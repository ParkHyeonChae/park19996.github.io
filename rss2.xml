<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Today.log</title>
    <link>https://parkhyeonchae.github.io/</link>
    
    <image>
      <url>https://www.gravatar.com/avatar/1c7b783eebce74f6d18078289a8103b2</url>
      <title>Today.log</title>
      <link>https://parkhyeonchae.github.io/</link>
    </image>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Devlog</description>
    <pubDate>Sun, 29 Mar 2020 20:55:32 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Django 12. 비밀번호찾기 인증번호 구현 (AJAX)</title>
      <link>https://parkhyeonchae.github.io/2020/03/30/django-project-12/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/30/django-project-12/</guid>
      <pubDate>Sun, 29 Mar 2020 17:08:41 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-12-비밀번호-찾기-구현-AJAX&quot;&gt;&lt;a href=&quot;#Django-12-비밀번호-찾기-구현-AJAX&quot; class=&quot;headerlink&quot; title=&quot;Django 12. 비밀번호 찾기 구현 (AJAX)&quot;&gt;&lt;/a&gt;Django 1
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-12-비밀번호-찾기-구현-AJAX"><a href="#Django-12-비밀번호-찾기-구현-AJAX" class="headerlink" title="Django 12. 비밀번호 찾기 구현 (AJAX)"></a>Django 12. 비밀번호 찾기 구현 (AJAX)</h1><blockquote><p>Jquery Ajax를 활용하고 인증번호를 확인 후 사용자의 비밀번호찾기를 구현합니다.</p></blockquote><hr><h2 id="1-인증번호-생성-함수-구현"><a href="#1-인증번호-생성-함수-구현" class="headerlink" title="1. 인증번호 생성 함수 구현"></a>1. 인증번호 생성 함수 구현</h2><p>이전 포스트와 같이 비밀번호찾기 또한 <strong>Ajax</strong>를 활용하여 구현합니다. 하지만 아이디찾기와는 다르게 회원가입 때 구현한 <strong>send_mail</strong>을 활용해 비밀번호찾기 인증번호를 발송하는 기능을 추가합니다. 비밀번호찾기 로직은 다음과 같습니다.</p><ol><li><strong>8자리의 랜덤한 문자를 생성하는 인증번호 함수를 구현한다.</strong></li><li><strong>비밀번호찾기 창을 통해 이름, 아이디, 메일을 입력한 후 Ajax로 view에 요청한다.</strong></li><li><strong>비밀번호찾기 버튼을 클릭했을시 templates에서 인증번호 타이머 스크립트를 실행한다.</strong></li><li><strong>Ajax요청시 send_mail 함수를 통해 요청한 사용자에게 인증번호를 담은 메일을 발송한다.</strong></li><li><strong>메일 발송과 함께 사용자 DB auth필드에 인증번호를 삽입한다.</strong></li><li><strong>입력된 인증번호가 DB auth 값과 일치하면 비밀번호변경 창으로 이동한다.</strong></li></ol><p>인증번호를 생성하는 함수를 구현하기 위해 send_mail 함수가 있는 <strong>users app</strong> 내 <strong>helper.py</strong>에 아래의 소스를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;helper.py</span><br><span class="line"></span><br><span class="line">import string</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">def email_auth_num():</span><br><span class="line">    LENGTH &#x3D; 8</span><br><span class="line">    string_pool &#x3D; string.ascii_letters + string.digits</span><br><span class="line">    auth_num &#x3D; &quot;&quot;</span><br><span class="line">    for i in range(LENGTH):</span><br><span class="line">        auth_num +&#x3D; random.choice(string_pool)</span><br><span class="line">    return auth_num</span><br></pre></td></tr></table></figure><h2 id="2-forms-py-작성"><a href="#2-forms-py-작성" class="headerlink" title="2. forms.py 작성"></a>2. forms.py 작성</h2><p><strong>forms.py</strong>에 아래와 같이 비밀번호찾기에 사용할 form을 작성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">class RecoveryPwForm(forms.Form):</span><br><span class="line">    user_id &#x3D; forms.CharField(</span><br><span class="line">        widget&#x3D;forms.TextInput,)</span><br><span class="line">    name &#x3D; forms.CharField(</span><br><span class="line">        widget&#x3D;forms.TextInput,)</span><br><span class="line">    email &#x3D; forms.EmailField(</span><br><span class="line">        widget&#x3D;forms.EmailInput,)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        fields &#x3D; [&#39;user_id&#39;, &#39;name&#39;, &#39;email&#39;]</span><br><span class="line"></span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        super(RecoveryPwForm, self).__init__(*args, **kwargs)</span><br><span class="line">        self.fields[&#39;user_id&#39;].label &#x3D; &#39;아이디&#39;</span><br><span class="line">        self.fields[&#39;user_id&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">            &#39;id&#39;: &#39;pw_form_id&#39;,</span><br><span class="line">        &#125;)</span><br><span class="line">        self.fields[&#39;name&#39;].label &#x3D; &#39;이름&#39;</span><br><span class="line">        self.fields[&#39;name&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">            &#39;id&#39;: &#39;pw_form_name&#39;,</span><br><span class="line">        &#125;)</span><br><span class="line">        self.fields[&#39;email&#39;].label &#x3D; &#39;이메일&#39;</span><br><span class="line">        self.fields[&#39;email&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">            &#39;id&#39;: &#39;pw_form_email&#39;,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>인증번호 입력 후 사용자의 비밀번호 변경 창에 사용할 <strong>SetPasswordForm</strong>을 상속받는 <strong>CustomSetPasswordForm</strong>을 아래와 같이 입력합나다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">from django.contrib.auth.forms import SetPasswordForm</span><br><span class="line"></span><br><span class="line">class CustomSetPasswordForm(SetPasswordForm):</span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        super(CustomSetPasswordForm, self).__init__(*args, **kwargs)</span><br><span class="line">        self.fields[&#39;new_password1&#39;].label &#x3D; &#39;새 비밀번호&#39;</span><br><span class="line">        self.fields[&#39;new_password1&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">        &#125;)</span><br><span class="line">        self.fields[&#39;new_password2&#39;].label &#x3D; &#39;새 비밀번호 확인&#39;</span><br><span class="line">        self.fields[&#39;new_password2&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h2 id="3-views-py-작성"><a href="#3-views-py-작성" class="headerlink" title="3. views.py 작성"></a>3. views.py 작성</h2><p>비밀번호찾기 GET시 매핑할 view인 <strong>RecoveryPwView</strong>를 <strong>views.py</strong>에 아래와 같이 작성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from .forms import RecoveryPwForm</span><br><span class="line"></span><br><span class="line">@method_decorator(logout_message_required, name&#x3D;&#39;dispatch&#39;)</span><br><span class="line">class RecoveryPwView(View):</span><br><span class="line">    template_name &#x3D; &#39;users&#x2F;recovery_pw.html&#39;</span><br><span class="line">    recovery_pw &#x3D; RecoveryPwForm</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        if request.method&#x3D;&#x3D;&#39;GET&#39;:</span><br><span class="line">            form &#x3D; self.recovery_pw(None)</span><br><span class="line">            return render(request, self.template_name, &#123; &#39;form&#39;:form, &#125;)</span><br></pre></td></tr></table></figure><p>비밀번호찾기 창에서 필드 값들을 입력하고 Ajax요청을 하는 view를 아래와 같이 작성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from .helper import email_auth_num</span><br><span class="line"></span><br><span class="line">def ajax_find_pw_view(request):</span><br><span class="line">    user_id &#x3D; request.POST.get(&#39;user_id&#39;)</span><br><span class="line">    name &#x3D; request.POST.get(&#39;name&#39;)</span><br><span class="line">    email &#x3D; request.POST.get(&#39;email&#39;)</span><br><span class="line">    target_user &#x3D; User.objects.get(user_id&#x3D;user_id, name&#x3D;name, email&#x3D;email)</span><br><span class="line"></span><br><span class="line">    if target_user:</span><br><span class="line">        auth_num &#x3D; email_auth_num()</span><br><span class="line">        target_user.auth &#x3D; auth_num </span><br><span class="line">        target_user.save()</span><br><span class="line"></span><br><span class="line">        send_mail(</span><br><span class="line">            &#39;비밀번호 찾기 인증메일입니다.&#39;,</span><br><span class="line">            [email],</span><br><span class="line">            html&#x3D;render_to_string(&#39;users&#x2F;recovery_email.html&#39;, &#123;</span><br><span class="line">                &#39;auth_num&#39;: auth_num,</span><br><span class="line">            &#125;),</span><br><span class="line">        )</span><br><span class="line">    return HttpResponse(json.dumps(&#123;&quot;result&quot;: target_user.user_id&#125;, cls&#x3D;DjangoJSONEncoder), content_type &#x3D; &quot;application&#x2F;json&quot;)</span><br></pre></td></tr></table></figure><p>Ajax로 요청된 값들을 User 모델에서 찾은 후 반환된 <strong>target_user</strong>의 <strong>auth</strong>필드에 방금 구현한 인증번호 생성함수를 통해 <strong>auth_num</strong>를 저장합니다. 후에 <strong>send_mail</strong> 함수로 인증번호인 <strong>auth_num</strong>을 담은 메일을 사용자에게 발송합니다.</p><p>템플릿에서 입력된 인증번호를 확인하는 view는 아래와 같습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">def auth_confirm_view(request):</span><br><span class="line">    user_id &#x3D; request.POST.get(&#39;user_id&#39;)</span><br><span class="line">    input_auth_num &#x3D; request.POST.get(&#39;input_auth_num&#39;)</span><br><span class="line">    target_user &#x3D; User.objects.get(user_id&#x3D;user_id, auth&#x3D;input_auth_num)</span><br><span class="line">    target_user.auth &#x3D; &quot;&quot;</span><br><span class="line">    target_user.save()</span><br><span class="line">    request.session[&#39;auth&#39;] &#x3D; target_user.user_id  </span><br><span class="line">    </span><br><span class="line">    return HttpResponse(json.dumps(&#123;&quot;result&quot;: target_user.user_id&#125;, cls&#x3D;DjangoJSONEncoder), content_type &#x3D; &quot;application&#x2F;json&quot;)</span><br></pre></td></tr></table></figure><p>마찬가지로 Ajax로 요청된 <strong>user_id</strong>와 입력된 인증번호인 <strong>input_auth_num</strong>가 일치하는 쿼리를 User모델에서 찾아 반환한 후 auth 세션을 생성하고 비밀번호를 찾으려는 사용자의 user_id를 세션값으로 생성합니다.</p><p>마지막으로 auth_confirm_view를 통해 Ajax통신이 성공했다면 redirect될 비밀번호 변경창의 view를 아래와 같이 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from .forms import CustomSetPasswordForm        </span><br><span class="line"></span><br><span class="line">@logout_message_required</span><br><span class="line">def auth_pw_reset_view(request):</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;GET&#39;:</span><br><span class="line">        if not request.session.get(&#39;auth&#39;, False):</span><br><span class="line">            raise PermissionDenied</span><br><span class="line"></span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class="line">        session_user &#x3D; request.session[&#39;auth&#39;]</span><br><span class="line">        current_user &#x3D; User.objects.get(user_id&#x3D;session_user)</span><br><span class="line">        login(request, current_user)</span><br><span class="line"></span><br><span class="line">        reset_password_form &#x3D; CustomSetPasswordForm(request.user, request.POST)</span><br><span class="line">        </span><br><span class="line">        if reset_password_form.is_valid():</span><br><span class="line">            user &#x3D; reset_password_form.save()</span><br><span class="line">            messages.success(request, &quot;비밀번호 변경완료! 변경된 비밀번호로 로그인하세요.&quot;)</span><br><span class="line">            logout(request)</span><br><span class="line">            return redirect(&#39;users:login&#39;)</span><br><span class="line">        else:</span><br><span class="line">            logout(request)</span><br><span class="line">            request.session[&#39;auth&#39;] &#x3D; session_user</span><br><span class="line">    else:</span><br><span class="line">        reset_password_form &#x3D; CustomSetPasswordForm(request.user)</span><br><span class="line"></span><br><span class="line">    return render(request, &#39;users&#x2F;password_reset.html&#39;, &#123;&#39;form&#39;:reset_password_form&#125;)</span><br></pre></td></tr></table></figure><p><strong>GET</strong>시 auth_confirm_view에서 생성한 세션값을 비교해 False면 403 에러를 발생시킵니다. 인증된 사용자의 비밀번호 변경값이 <strong>POST</strong>로 넘어오면 Django에서 제공해주는 SetPasswordForm를 사용하여 비밀번호 변경을 구현하기 위해 유지되고 있는 세션의 user를 login합니다. 그 후 유효성검사에 성공하면 변경된 비밀번호를 저장한 후 logout하여 세션을 해제합니다.</p><h2 id="4-urls-py-작성"><a href="#4-urls-py-작성" class="headerlink" title="4. urls.py 작성"></a>4. urls.py 작성</h2><p>구현한 view들을 연결하기 위해 <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 아래의 소스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">path(&#39;recovery&#x2F;pw&#x2F;&#39;, views.RecoveryPwView.as_view(), name&#x3D;&#39;recovery_pw&#39;),</span><br><span class="line">path(&#39;recovery&#x2F;pw&#x2F;find&#x2F;&#39;, views.ajax_find_pw_view, name&#x3D;&#39;ajax_pw&#39;),</span><br><span class="line">path(&#39;recovery&#x2F;pw&#x2F;auth&#x2F;&#39;, views.auth_confirm_view, name&#x3D;&#39;recovery_auth&#39;),</span><br><span class="line">path(&#39;recovery&#x2F;pw&#x2F;reset&#x2F;&#39;, views.auth_pw_reset_view, name&#x3D;&#39;recovery_pw_reset&#39;),</span><br></pre></td></tr></table></figure><h2 id="5-templates-작성"><a href="#5-templates-작성" class="headerlink" title="5. templates 작성"></a>5. templates 작성</h2><p><strong>templates</strong>의 <strong>users</strong>에 <strong>recovery_email.html</strong>을 생성하고 인증번호가 담긴 메일의 템플릿을 작성한 후 <strong>recovery_pw.html</strong>을 생성하여 아래의 소스를 작성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;recovery_pw.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label name&#x3D;&quot;label_user_id&quot; for&#x3D;&quot;&#123;&#123; form.user_id.id_for_label &#125;&#125;&quot;&gt;&#123;&#123; form.user_id.label &#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">        &#123;&#123; form.user_id &#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label name&#x3D;&quot;label_name&quot; for&#x3D;&quot;&#123;&#123; form.name.id_for_label &#125;&#125;&quot;&gt;&#123;&#123; form.name.label &#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">        &#123;&#123; form.name &#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label name&#x3D;&quot;label_email&quot; for&#x3D;&quot;&#123;&#123; form.email.id_for_label &#125;&#125;&quot;&gt;&#123;&#123; form.email.label &#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">            &#123;&#123; form.email &#125;&#125;</span><br><span class="line">        &lt;small&gt;</span><br><span class="line">            등록하신 메일로 인증번호가 발송됩니다.</span><br><span class="line">        &lt;&#x2F;small&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;div_find_pw&quot;&gt;</span><br><span class="line">        &lt;button id&#x3D;&quot;find_pw&quot; name&#x3D;&quot;recovery_pw&quot;&gt;비밀번호찾기&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;result_pw&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>Ajax 스크립트 코드는 이전 포스트의 아이디찾기와 비슷합니다. 비밀번호찾기 버튼을 클릭 후 Ajax통신이 성공했을 경우 인증번호 입력 타이머 스크립트는 아래와 같습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;recovery_pw.html --&gt;</span><br><span class="line"></span><br><span class="line">function countdown( elementName, minutes, seconds ) &#123;</span><br><span class="line">    var elementName, endTime, hours, mins, msLeft, time;</span><br><span class="line">    function twoDigits( n ) &#123;</span><br><span class="line">        return (n &lt;&#x3D; 9 ? &quot;0&quot; + n : n);</span><br><span class="line">    &#125;</span><br><span class="line">    function updateTimer() &#123;</span><br><span class="line">        msLeft &#x3D; endTime - (+new Date);</span><br><span class="line">        if ( msLeft &lt; 1000 ) &#123;</span><br><span class="line">            alert(&quot;인증시간이 초과되었습니다.&quot;);</span><br><span class="line">            $(&quot;&quot; + elementName).remove();</span><br><span class="line">            cert_ok &#x3D; false;</span><br><span class="line">            certificationNum &#x3D; false;</span><br><span class="line">            location.href &#x3D; &quot;&#123;% url &#39;users:recovery_pw&#39; %&#125;&quot;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            time &#x3D; new Date( msLeft );</span><br><span class="line">            hours &#x3D; time.getUTCHours();</span><br><span class="line">            mins &#x3D; time.getUTCMinutes();</span><br><span class="line">            $(&quot;&quot; + elementName).html((hours ? hours + &#39;:&#39; + twoDigits( mins ) : twoDigits(mins))</span><br><span class="line">            + &#39;:&#39; + twoDigits( time.getUTCSeconds()));</span><br><span class="line">            setTimeout( updateTimer, time.getUTCMilliseconds() + 500 );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    endTime &#x3D; (+new Date) + 1000 * (60*minutes + seconds) + 500;</span><br><span class="line">    updateTimer();</span><br><span class="line">&#125;</span><br><span class="line">countdown(&quot;#timeset&quot;, 5, 0);</span><br></pre></td></tr></table></figure><p>위 스크립트와 동일한 위치인 success부분에 auth_confirm_view와 매핑되는 ajax를 한번 더 구현하고 redirect 될 비밀번호 변경창인 <strong>password_reset.html</strong>을 생성하면 인증번호를 이용한 비밀번호가 찾기 구현이 완료되게 됩니다.</p><p> 전체 소스는 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>를 참고하세요.</p><h2 id="6-결과"><a href="#6-결과" class="headerlink" title="6. 결과"></a>6. 결과</h2><p><img src="12-1.GIF" alt="django-project-12"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/30/django-project-12/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 11. 아이디찾기 구현 (AJAX)</title>
      <link>https://parkhyeonchae.github.io/2020/03/29/django-project-11/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/29/django-project-11/</guid>
      <pubDate>Sun, 29 Mar 2020 05:14:47 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-11-아이디찾기-구현-AJAX&quot;&gt;&lt;a href=&quot;#Django-11-아이디찾기-구현-AJAX&quot; class=&quot;headerlink&quot; title=&quot;Django 11. 아이디찾기 구현 (AJAX)&quot;&gt;&lt;/a&gt;Django 11. 아이디
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-11-아이디찾기-구현-AJAX"><a href="#Django-11-아이디찾기-구현-AJAX" class="headerlink" title="Django 11. 아이디찾기 구현 (AJAX)"></a>Django 11. 아이디찾기 구현 (AJAX)</h1><blockquote><p>Jquery Ajax를 활용하여 비동기적으로 사용자의 아이디 찾기를 구현합니다.</p></blockquote><hr><h2 id="1-Ajax-CDN-추가"><a href="#1-Ajax-CDN-추가" class="headerlink" title="1. Ajax CDN 추가"></a>1. Ajax CDN 추가</h2><p><strong>Jquery Ajax</strong>는 웹페이지 전체를 다시 로드하지 않고 일부분만 로드하는 <strong>비동기 통신</strong>의 사용기법 중 하나입니다. 쉽게 말해 동적인 웹페이지를 만들기 위한 방법으로, JavaScript fetch API 등 여러가지 기법이 있지만 이 프로젝트에서는 이번 포스팅인 아이디찾기 뿐 아니라 비밀번호 찾기, 댓글쓰기 등과 같은 기능을 구현할 때, 화면전체를 로드하지 않고 특정 데이터만 로드하기 위해 Jquery의 Ajax를 사용하겠습니다.</p><p>Ajax를 사용하기 위해 <strong>Jquery CDN</strong>을 아래와 같이 <strong>templates</strong>의 <strong>user_base.html</strong>에 추가해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;user_base.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;3.4.1&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-forms-py-작성"><a href="#2-forms-py-작성" class="headerlink" title="2. forms.py 작성"></a>2. forms.py 작성</h2><p>form을 생성하기 위해 <strong>forms.py</strong>에 아래와 같이 <strong>RecoveryIdForm</strong> 클래스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">class RecoveryIdForm(forms.Form):</span><br><span class="line">    name &#x3D; forms.CharField(widget&#x3D;forms.TextInput,)</span><br><span class="line">    email &#x3D; forms.EmailField(widget&#x3D;forms.EmailInput,)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        fields &#x3D; [&#39;name&#39;, &#39;email&#39;]</span><br><span class="line"></span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        super(RecoveryIdForm, self).__init__(*args, **kwargs)</span><br><span class="line">        self.fields[&#39;name&#39;].label &#x3D; &#39;이름&#39;</span><br><span class="line">        self.fields[&#39;name&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">            &#39;id&#39;: &#39;form_name&#39;,</span><br><span class="line">        &#125;)</span><br><span class="line">        self.fields[&#39;email&#39;].label &#x3D; &#39;이메일&#39;</span><br><span class="line">        self.fields[&#39;email&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">            &#39;id&#39;: &#39;form_email&#39; </span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h2 id="3-views-py-작성"><a href="#3-views-py-작성" class="headerlink" title="3. views.py 작성"></a>3. views.py 작성</h2><p>접속중인 사용자의 접근을 방지하기 위해 decorator를 추가하고, GET으로 방금 생성한 form을 뿌려주는 <strong>RecoveryIdView</strong> 클래스를 <strong>views.py</strong>에 아래와 같이 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from .forms import RecoveryIdForm</span><br><span class="line">from django.views.generic import View</span><br><span class="line"></span><br><span class="line">@method_decorator(logout_message_required, name&#x3D;&#39;dispatch&#39;)</span><br><span class="line">class RecoveryIdView(View):</span><br><span class="line">    template_name &#x3D; &#39;users&#x2F;recovery_id.html&#39;</span><br><span class="line">    form &#x3D; RecoveryIdForm</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        if request.method&#x3D;&#x3D;&#39;GET&#39;:</span><br><span class="line">            form &#x3D; self.recovery_id(None)</span><br><span class="line">        return render(request, self.template_name, &#123; &#39;form&#39;:form, &#125;)</span><br></pre></td></tr></table></figure><p>그리고 RecoveryIdView와 매핑된 템플릿에서 아이디찾기라는 버튼을 클릭했을 때 요청되는 Ajax함수를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">import json</span><br><span class="line">from django.core.serializers.json import DjangoJSONEncoder</span><br><span class="line"></span><br><span class="line">def ajax_find_id_view(request):</span><br><span class="line">    name &#x3D; request.POST.get(&#39;name&#39;)</span><br><span class="line">    email &#x3D; request.POST.get(&#39;email&#39;)</span><br><span class="line">    result_id &#x3D; User.objects.get(name&#x3D;name, email&#x3D;email)</span><br><span class="line">       </span><br><span class="line">    return HttpResponse(json.dumps(&#123;&quot;result_id&quot;: result_id.user_id&#125;, cls&#x3D;DjangoJSONEncoder), content_type &#x3D; &quot;application&#x2F;json&quot;)</span><br></pre></td></tr></table></figure><p>템플릿에서 <u>사용자의 name과 email을 입력하고 아이디찾기 버튼을 클릭했을시 각 데이터들이 Json객체 담겨 Ajax요청이 들어오게 됩니다. view에서는 일치하는 user객체를 찾아 쿼리를 반환 후, HttpResponse를 통해 응답하고 반환되는 값이 없으면 DoesNotExist 에러를 발생시킵니다.</u></p><h2 id="4-urls-py-작성"><a href="#4-urls-py-작성" class="headerlink" title="4. urls.py 작성"></a>4. urls.py 작성</h2><p>생성한 각각의 view를 연결하기 위해 <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 아래의 소스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">path(&#39;recovery&#x2F;id&#x2F;&#39;, views.RecoveryIdView.as_view(), name&#x3D;&#39;recovery_id&#39;),</span><br><span class="line">path(&#39;recovery&#x2F;id&#x2F;find&#x2F;&#39;, views.ajax_find_id_view, name&#x3D;&#39;ajax_id&#39;),</span><br></pre></td></tr></table></figure><h2 id="5-templates-작성"><a href="#5-templates-작성" class="headerlink" title="5. templates 작성"></a>5. templates 작성</h2><p><strong>recovery_id.html</strong>을 생성하고 아래와 같이 템플릿을 작성한 뒤, Ajax를 위한 Script를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;recovery_id.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;label name&#x3D;&quot;label_name&quot; for&#x3D;&quot;&#123;&#123; form_id.name.id_for_label &#125;&#125;&quot;&gt;&#123;&#123; form.name.label &#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">    &#123;&#123; form.name &#125;&#125;</span><br><span class="line">    &lt;label name&#x3D;&quot;label_email&quot; for&#x3D;&quot;&#123;&#123; form_id.email.id_for_label &#125;&#125;&quot;&gt;&#123;&#123; form.email.label &#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">    &#123;&#123; form.email &#125;&#125;</span><br><span class="line">    &lt;small&gt;</span><br><span class="line">        등록하신 이름과 메일주소가 일치해야 합니다.</span><br><span class="line">    &lt;&#x2F;small&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button id&#x3D;&quot;find_id&quot; name&#x3D;&quot;recovery_id&quot;&gt;아이디찾기&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;result_id&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            $(&#39;#find_id&#39;).click(function () &#123;</span><br><span class="line">                var name &#x3D; $(&quot;#form_name&quot;).val();</span><br><span class="line">                var email &#x3D; $(&quot;#form_email&quot;).val();</span><br><span class="line"></span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    type: &quot;POST&quot;,</span><br><span class="line">                    url: &quot;&#x2F;users&#x2F;recovery&#x2F;id&#x2F;find&#x2F;&quot;,</span><br><span class="line">                    dataType: &quot;json&quot;,</span><br><span class="line">                    data: &#123;</span><br><span class="line">                        &#39;name&#39;: name,</span><br><span class="line">                        &#39;email&#39;: email,</span><br><span class="line">                        &#39;csrfmiddlewaretoken&#39;: &#39;&#123;&#123;csrf_token&#125;&#125;&#39;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    success: function (response) &#123;</span><br><span class="line">                        $(&#39;#result_id&#39;).replaceWith(</span><br><span class="line">                            &#39;&lt;div id&#x3D;&quot;result_id&quot;&gt;&lt;hr&gt;&lt;div&gt;&lt;span&gt;입력된 정보로 가입된 아이디는 &lt;&#x2F;span&gt;&lt;span id&#x3D;&quot;result_id&quot;&gt;&#39; +</span><br><span class="line">                                response.result_id +&#39;&lt;&#x2F;span&gt;&lt;span&gt; 입니다.&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&lt;hr&gt;&lt;&#x2F;div&gt;&#39;)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    error: function () &#123;</span><br><span class="line">                        if (name &#x3D;&#x3D; &quot;&quot; || email &#x3D;&#x3D; &quot;&quot;) &#123;</span><br><span class="line">                            alert(&#39;이름와 이메일을 입력해주세요.&#39;);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            alert(&#39;입력하신 정보가 일치하지 않거나 존재하지 않습니다.&#39;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>Script를 보면 아이디 찾기 버튼을 클릭할 시 views.py에 작성해둔 ajax_find_id_view와 매핑된 url로 <u>사용자가 입력한 name과 email, csrf공격보안을 위한 csrftoken을 data에 담아 Json타입의 POST 요청</u>을 하게 됩니다.</p><p>view에서는 data값을 받아 일치하는 쿼리를 찾은 후, 응답할시(success) 아이디 찾기 결과를 나타낼 result_id란 id값을 가지는 div부분을 반환된 값으로 replaceWith하게 됩니다. 입력 필드들의 값의 유무를 체크하고 일치하는 쿼리가 없어 DoesNotExist오류가 발생해 응답오류(error)가 발생했다면 작성한 alert창을 표시하도록 구현합니다.</p><h2 id="6-결과"><a href="#6-결과" class="headerlink" title="6. 결과"></a>6. 결과</h2><p><img src="11-1.GIF" alt="django-project-11"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/29/django-project-11/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 10. 로그인 상태 유지하기 구현</title>
      <link>https://parkhyeonchae.github.io/2020/03/27/django-project-10/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/27/django-project-10/</guid>
      <pubDate>Thu, 26 Mar 2020 23:12:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-10-로그인-상태-유지하기-구현&quot;&gt;&lt;a href=&quot;#Django-10-로그인-상태-유지하기-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 10. 로그인 상태 유지하기 구현&quot;&gt;&lt;/a&gt;Django 10. 로그
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-10-로그인-상태-유지하기-구현"><a href="#Django-10-로그인-상태-유지하기-구현" class="headerlink" title="Django 10. 로그인 상태 유지하기 구현"></a>Django 10. 로그인 상태 유지하기 구현</h1><blockquote><p>사용자의 선택에 따라 클라이언트 프로세스 종료시에도 접속 상태를 유지할 수 있도록 구현합니다.</p></blockquote><hr><h2 id="1-settings-py-설정"><a href="#1-settings-py-설정" class="headerlink" title="1. settings.py 설정"></a>1. settings.py 설정</h2><p>Dango의 login 세션은 기본적으로 브라우저 등과 같은 클라이언트의 프로세스를 종료해도 서버단에서 세션을 유지시키기 때문에 logout 함수 실행 전까지 사용자의 세션이 남아있게 됩니다. 로그인 창에서 Checkbox를 통해 사용자가 로그인 상태를 유지할 것인지 직접 선택하게 하기 위해 <strong>settings.py</strong>에 아래의 소스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cs_web&#x2F;settings.py</span><br><span class="line"></span><br><span class="line">SESSION_EXPIRE_AT_BROWSER_CLOSE &#x3D; True</span><br></pre></td></tr></table></figure><p>위 소스를 추가함으로써 프로세스의 종료시 세션을 만료시키도록 설정합니다. default 설정은 False입니다.</p><p><em>*브라우저가 종료되었음을 서버에서 탐지할 수는 없으므로 브라우저가 그냥 종료될 때 세션이 만료되는 것이 아니라 프로세스는 살아있기에 프로세스를 종료해야 세션이 삭제됩니다.</em></p><p><strong><a href="https://django.readthedocs.io/en/1.4.X/topics/http/sessions.html" target="_blank" rel="external nofollow noopener noreferrer">Django Session 문서</a></strong></p><h2 id="2-views-py-수정"><a href="#2-views-py-수정" class="headerlink" title="2. views.py 수정"></a>2. views.py 수정</h2><p>로그인 창에서 로그인 상태 유지 Checkbox를 통해 넘어온 값을 확인하여 settings.py의 세션 만료 설정을 False로 변경하는 소스를 <strong>views.py</strong>의 <strong>LoginView</strong> 클래스 내 login(self.request, user) 소스 아래에 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line">if user is not None:</span><br><span class="line">    self.request.session[&#39;user_id&#39;] &#x3D; user_id</span><br><span class="line">    login(self.request, user)</span><br><span class="line">    remember_session &#x3D; self.request.POST.get(&#39;remember_session&#39;, False)</span><br><span class="line">    if remember_session:</span><br><span class="line">        settings.SESSION_EXPIRE_AT_BROWSER_CLOSE &#x3D; False</span><br></pre></td></tr></table></figure><h2 id="3-templates-수정"><a href="#3-templates-수정" class="headerlink" title="3. templates 수정"></a>3. templates 수정</h2><p>사용자가 로그인 상태 유지 checkbox를 선택하고 로그인을 진행할 시 view에서는 remember_session의 유무를 비교하도록 <strong>login.html</strong>의 <strong>form</strong>내부에 아래와 같이 remember_session이란 name 값을 가지는 checkbox를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;login.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;remember_session&quot;&#x2F;&gt;</span><br><span class="line">    &lt;span&gt;로그인 상태 유지&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;label&gt;</span><br></pre></td></tr></table></figure><p> 사용자의 로그인 상태유지 선택에 따라 세션 유지를 확인해보면 잘 적용되어 동작하는 것을 확인할 수 있습니다.</p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/27/django-project-10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 09. 로그인, 로그아웃 구현</title>
      <link>https://parkhyeonchae.github.io/2020/03/27/django-project-09/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/27/django-project-09/</guid>
      <pubDate>Thu, 26 Mar 2020 20:16:37 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-09-로그인-로그아웃-구현&quot;&gt;&lt;a href=&quot;#Django-09-로그인-로그아웃-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 09. 로그인, 로그아웃 구현&quot;&gt;&lt;/a&gt;Django 09. 로그인, 로그아웃 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-09-로그인-로그아웃-구현"><a href="#Django-09-로그인-로그아웃-구현" class="headerlink" title="Django 09. 로그인, 로그아웃 구현"></a>Django 09. 로그인, 로그아웃 구현</h1><blockquote><p>Django Authentication에서 제공하는 기능을 사용하여 사용자 로그인, 로그아웃을 구현합니다.</p></blockquote><hr><h2 id="1-로그인-forms-py-작성"><a href="#1-로그인-forms-py-작성" class="headerlink" title="1. 로그인 forms.py 작성"></a>1. 로그인 forms.py 작성</h2><p>Login을 구현하기 위해 사용할 form을 먼저 구현하겠습니다. <strong>users app</strong>의 <strong>forms.py</strong>에 해쉬화된 비밀번호를 검사하는 <strong>check_password</strong>를 import 한 후 아래의 소스를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">class LoginForm(forms.Form):</span><br><span class="line">    user_id &#x3D; forms.CharField(</span><br><span class="line">        widget&#x3D;forms.TextInput(</span><br><span class="line">        attrs&#x3D;&#123;&#39;class&#39;: &#39;form-control&#39;,&#125;), </span><br><span class="line">        error_messages&#x3D;&#123;&#39;required&#39;: &#39;아이디을 입력해주세요.&#39;&#125;,</span><br><span class="line">        max_length&#x3D;17,</span><br><span class="line">        label&#x3D;&#39;아이디&#39;</span><br><span class="line">    )</span><br><span class="line">    password &#x3D; forms.CharField(</span><br><span class="line">        widget&#x3D;forms.PasswordInput(</span><br><span class="line">        attrs&#x3D;&#123;&#39;class&#39;: &#39;form-control&#39;,&#125;), </span><br><span class="line">        error_messages&#x3D;&#123;&#39;required&#39;: &#39;비밀번호를 입력해주세요.&#39;&#125;,</span><br><span class="line">        label&#x3D;&#39;비밀번호&#39;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    def clean(self):</span><br><span class="line">        cleaned_data &#x3D; super().clean()</span><br><span class="line">        user_id &#x3D; cleaned_data.get(&#39;user_id&#39;)</span><br><span class="line">        password &#x3D; cleaned_data.get(&#39;password&#39;)</span><br><span class="line"></span><br><span class="line">        if user_id and password:</span><br><span class="line">            try:</span><br><span class="line">               user &#x3D; User.objects.get(user_id&#x3D;user_id)</span><br><span class="line">            except User.DoesNotExist:</span><br><span class="line">                self.add_error(&#39;user_id&#39;, &#39;아이디가 존재하지 않습니다.&#39;)</span><br><span class="line">                return</span><br><span class="line">            </span><br><span class="line">            if not check_password(password, user.password):</span><br><span class="line">                self.add_error(&#39;password&#39;, &#39;비밀번호가 틀렸습니다.&#39;)</span><br></pre></td></tr></table></figure><p>LoginForm 클래스를 생성한 뒤 입력필드에 맞는 적절한 <strong>widget</strong>을 삽입합니다. </p><p>clean 함수를 클래스 내부에 추가하고 해당 입력값에 맞는 표준 형식으로 변환하기 위해 <strong>cleaned_data</strong>로 form에 입력된 user_id와 password 값을 담아두고 검사하여 아이디 존재여부와 비밀번호 오류를 form에서 처리하도록 구현하였습니다.</p><p><strong><a href="https://docs.djangoproject.com/en/3.0/ref/forms/widgets/" target="_blank" rel="external nofollow noopener noreferrer">Django Forms Widgets 공식문서</a></strong></p><h2 id="2-로그인-views-py-작성"><a href="#2-로그인-views-py-작성" class="headerlink" title="2. 로그인 views.py 작성"></a>2. 로그인 views.py 작성</h2><p>Django에서 제공하는 로그인 기능을 사용하기 위해 contrib.auth의 <strong>login</strong>, <strong>authenticate</strong> 와 Generic View인 <strong>FormView</strong>를 import 한 후 users app의 <strong>views.py</strong>에 아래의 코드를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from .forms import LoginForm</span><br><span class="line">from django.contrib.auth import login, authenticate</span><br><span class="line">from django.views.generic import FormView</span><br><span class="line"></span><br><span class="line">@method_decorator(logout_message_required, name&#x3D;&#39;dispatch&#39;)</span><br><span class="line">class LoginView(FormView):</span><br><span class="line">    template_name &#x3D; &#39;users&#x2F;login.html&#39;</span><br><span class="line">    form_class &#x3D; LoginForm</span><br><span class="line">    success_url &#x3D; &#39;&#x2F;users&#x2F;main&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">    def form_valid(self, form):</span><br><span class="line">        user_id &#x3D; form.cleaned_data.get(&quot;user_id&quot;)</span><br><span class="line">        password &#x3D; form.cleaned_data.get(&quot;password&quot;)</span><br><span class="line">        user &#x3D; authenticate(self.request, username&#x3D;user_id, password&#x3D;password)</span><br><span class="line">        </span><br><span class="line">        if user is not None:</span><br><span class="line">            self.request.session[&#39;user_id&#39;] &#x3D; user_id</span><br><span class="line">            login(self.request, user)</span><br><span class="line"></span><br><span class="line">        return super().form_valid(form)</span><br></pre></td></tr></table></figure><p>마찬가지로 이미 로그인 중인 사용자의 접근을 막기 위해 <strong>logout_message_required</strong>를 사용하고, 직접 구현한 decorators의 user객체를 비교하기 위해 <strong>user_id</strong>란 이름의 세션에 로그인한 <strong>user_id</strong> 값을 추가합니다. form_valid를 통과한 user 객체가 존재한다면 로그인을 한 후 작성되어 있는 main페이지로 이동하게됩니다.</p><h2 id="3-로그아웃-views-py-작성"><a href="#3-로그아웃-views-py-작성" class="headerlink" title="3.  로그아웃 views.py 작성"></a>3.  로그아웃 views.py 작성</h2><p>Django의 <strong>logout</strong>을 호출하면 현재 요청에 대한 세션이 모두 제거됩니다. views.py에 <strong>logout</strong>을 import 한 후 아래의 코드를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from django.contrib.auth import logout</span><br><span class="line"></span><br><span class="line">def logout_view(request):</span><br><span class="line">    logout(request)</span><br><span class="line">    return redirect(&#39;&#x2F;&#39;)</span><br></pre></td></tr></table></figure><h2 id="4-urls-py-작성"><a href="#4-urls-py-작성" class="headerlink" title="4. urls.py 작성"></a>4. urls.py 작성</h2><p>구현한 login, logout view를 연결하기 위해 <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 아래의 코드를 추가합니다. 로그인 성공시 이동할 main path도 함께 추가합니다. main페이지 구현은 따로 포스팅하지 않겠습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">path(&#39;main&#x2F;&#39;, views.main_view, name&#x3D;&#39;main&#39;),</span><br><span class="line">path(&#39;login&#x2F;&#39;, views.LoginView.as_view(), name&#x3D;&#39;login&#39;),</span><br><span class="line">path(&#39;logout&#x2F;&#39;, views.logout_view, name&#x3D;&#39;logout&#39;),</span><br></pre></td></tr></table></figure><h2 id="5-templates-작성"><a href="#5-templates-작성" class="headerlink" title="5. templates 작성"></a>5. templates 작성</h2><p>templates의 <strong>users</strong>폴더에 <strong>login.html</strong>을 생성하고 아래의 코드를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;login.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;.&quot; novalidate&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label name&#x3D;&quot;label_user_id&quot; for&#x3D;&quot;&#123;&#123; form.user_id.id_for_label &#125;&#125;&quot;&gt;</span><br><span class="line">            &#123;&#123; form.user_id.label &#125;&#125;</span><br><span class="line">        &lt;&#x2F;label&gt;</span><br><span class="line">        &#123;&#123; form.user_id &#125;&#125;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            if (document.getElementsByName(&#39;user_id&#39;)[0].value !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">                document.getElementsByName(&#39;label_user_id&#39;)[0].setAttribute(&#39;class&#39;, &#39;active&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">        &#123;% if form.user_id.errors %&#125;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            document.getElementsByName(&#39;user_id&#39;)[0].setAttribute(&#39;class&#39;, &#39;form-control is-invalid&#39;)</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">        &#123;% for error in form.user_id.errors %&#125;</span><br><span class="line">        &lt;div class&#x3D;&quot;invalid-feedback&quot;&gt;</span><br><span class="line">            &#123;&#123; error &#125;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>위 소스는 login.html의 user_id 입력 필드입니다. <strong>{ { form.user_id } }</strong>로 forms.py에서 설정한 <strong>widget type</strong>을 생성하고 <strong>add_error</strong>가 있다면 <strong>erros</strong> 값으로 넘어와 오류를 출력하게 됩니다. password 입력 필드 또한 ‘user_id’ 부분을 forms.py에서 지정한 ‘password’로 바꿔 작성하면 로그인 템플릿 구현이 완료됩니다.</p><h2 id="6-결과"><a href="#6-결과" class="headerlink" title="6. 결과"></a>6. 결과</h2><p><img src="09-1.GIF" alt="django-project-09"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/27/django-project-09/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 08. SMTP 회원가입 인증메일 구현</title>
      <link>https://parkhyeonchae.github.io/2020/03/26/django-project-08/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/26/django-project-08/</guid>
      <pubDate>Thu, 26 Mar 2020 11:46:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-08-SMTP-회원가입-인증메일-구현&quot;&gt;&lt;a href=&quot;#Django-08-SMTP-회원가입-인증메일-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 08. SMTP 회원가입 인증메일 구현&quot;&gt;&lt;/a&gt;Djan
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-08-SMTP-회원가입-인증메일-구현"><a href="#Django-08-SMTP-회원가입-인증메일-구현" class="headerlink" title="Django 08. SMTP 회원가입 인증메일 구현"></a>Django 08. SMTP 회원가입 인증메일 구현</h1><blockquote><p>Naver의 SMTP서버와 Django send_mail, token을 사용하여 회원가입 인증메일을 구현합니다.</p></blockquote><hr><h2 id="1-네이버-SMTP-서버-설정"><a href="#1-네이버-SMTP-서버-설정" class="headerlink" title="1.  네이버 SMTP 서버 설정"></a>1.  네이버 SMTP 서버 설정</h2><p>메일 전송을 구현하기 위해 네이버 메일로 들어가 SMTP 서버를 설정합니다.</p><p>*Google 또한 SMTP 서버를 제공하지만 <u>Gmail 보안상의 이유로 렌더링하는 메일 html스타일에 href 경로가 존재하면 3~4분의 딜레이가 생기게 됩니다.</u> 이 프로젝트에서는 토큰값이 담긴 href를 메일로 보내 인증하는 방식이기에 딜레이가 발생하는 Google SMTP를 사용하지 않고 Naver SMTP를 사용합니다.</p><p>네이버 메일의 환경설정에서 <strong>POP3/IMAP</strong> 설정으로 들어가 <strong>IMAP/SMTP</strong> 사용설정을 <strong>사용함</strong>으로 변경합니다.</p><p><img src="08-1.JPG" alt="django-project-08"></p><p><strong>settings.py</strong>에 아래의 소스를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># cs_web&#x2F;settings.py</span><br><span class="line"></span><br><span class="line">EMAIL_BACKEND &#x3D; &#39;django.core.mail.backends.smtp.EmailBackend&#39;</span><br><span class="line">EMAIL_HOST &#x3D; &#39;smtp.naver.com&#39;</span><br><span class="line">EMAIL_HOST_USER &#x3D; &#39;&lt;네이버 ID&gt;&#39;</span><br><span class="line">EMAIL_HOST_PASSWORD &#x3D; get_secret(&quot;EMAIL_HOST_PASSWORD&quot;)</span><br><span class="line">EMAIL_USE_TLS &#x3D; True</span><br><span class="line">EMAIL_PORT &#x3D; 587</span><br><span class="line">DEFAULT_FROM_MAIL &#x3D; &#39;&lt;네이버 ID&gt;&#39;</span><br></pre></td></tr></table></figure><p>EMAIL_HOST_PASSWORD를 숨기기 위해 SECRET_KEY값이 담긴 <strong>secrets.json</strong>파일에 naver 계정 비밀번호를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># secrets.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;SECRET_KEY&quot;: &quot;&lt;SECRET_KEY 값&quot;&gt;,</span><br><span class="line">    &quot;EMAIL_HOST_PASSWORD&quot;: &quot;&lt;네이버 계정 비밀번호&gt;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-send-mail-구현"><a href="#2-send-mail-구현" class="headerlink" title="2.  send_mail 구현"></a>2.  send_mail 구현</h2><p>Host 연결을 마쳤으므로 이제 django의 mail 기능인 <strong>send_mail</strong>을 import 하고 <strong>threading</strong> 모듈을 사용해 메일 보내기 기능을 구현합니다. 부가적인 기능을 따로 관리하기 위해 <strong>users app</strong>에 <strong>hepler.py</strong>를 생성하고 아래의 소스를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;helper.py</span><br><span class="line"></span><br><span class="line">from django.core.mail import send_mail</span><br><span class="line">from django.core.mail import EmailMultiAlternatives</span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line">class EmailThread(threading.Thread):</span><br><span class="line">    def __init__(self, subject, body, from_email, recipient_list, fail_silently, html):</span><br><span class="line">        self.subject &#x3D; subject</span><br><span class="line">        self.body &#x3D; body</span><br><span class="line">        self.recipient_list &#x3D; recipient_list</span><br><span class="line">        self.from_email &#x3D; from_email</span><br><span class="line">        self.fail_silently &#x3D; fail_silently</span><br><span class="line">        self.html &#x3D; html</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    def run (self):</span><br><span class="line">        msg &#x3D; EmailMultiAlternatives(self.subject, self.body, self.from_email, self.recipient_list)</span><br><span class="line">        if self.html:</span><br><span class="line">            msg.attach_alternative(self.html, &quot;text&#x2F;html&quot;)</span><br><span class="line">        msg.send(self.fail_silently)</span><br><span class="line"></span><br><span class="line">def send_mail(subject, recipient_list, body&#x3D;&#39;&#39;, from_email&#x3D;&#39;&lt;네이버 메일계정&gt;&#39;, fail_silently&#x3D;False, html&#x3D;None, *args, **kwargs):</span><br><span class="line">    EmailThread(subject, body, from_email, recipient_list, fail_silently, html).start()</span><br></pre></td></tr></table></figure><p>threading 모듈을 사용해 동시에 여러 사용자에게 메일을 보낼 수 있도록 구현합니다. 또한 html 형식의 메일을 전송하기에 <strong>EmailMultiAlternatives</strong>를 import 하여 텍스트 뿐 아니라 다른 컨텐츠 유형을 포함시킬 수 있도록 합니다.</p><p><strong><a href="https://docs.djangoproject.com/en/3.0/topics/email/" target="_blank" rel="external nofollow noopener noreferrer">Django Send_Mail 공식문서</a></strong></p><h2 id="3-forms-py-수정"><a href="#3-forms-py-수정" class="headerlink" title="3. forms.py 수정"></a>3. forms.py 수정</h2><p>회원가입 후 메일 인증을 완료하지 못한 사용자는 로그인 할 수 없도록 앞서 구현한 <strong>forms.py</strong>에서 <strong>CsRegisterForm</strong>의 <strong>save</strong>함수에 <strong>is_active</strong>를 비활성화하는 소스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">def save(self, commit&#x3D;True):</span><br><span class="line">    user &#x3D; super(CsRegisterForm, self).save(commit&#x3D;False)</span><br><span class="line">    user.level &#x3D; &#39;2&#39;</span><br><span class="line">    user.department &#x3D; &#39;컴퓨터공학부&#39;</span><br><span class="line">    user.is_active &#x3D; False</span><br><span class="line">    user.save()</span><br></pre></td></tr></table></figure><h2 id="4-views-py-수정"><a href="#4-views-py-수정" class="headerlink" title="4. views.py 수정"></a>4. views.py 수정</h2><p>메일 전송 기능을 구현한 후 사용자에게 인증 토큰값을 담은 인증링크를 보내기 위해 <strong>CsRegisterView</strong>의 <strong>form_valid</strong> 부분에 아래의 <strong>send_mail</strong> 소스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from django.urls import reverse</span><br><span class="line">from .helper import send_mail</span><br><span class="line">from django.template.loader import render_to_string</span><br><span class="line">from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode</span><br><span class="line">from django.utils.encoding import force_bytes, force_text</span><br><span class="line">from django.contrib.auth.tokens import default_token_generator</span><br><span class="line"></span><br><span class="line">def form_valid(self, form):</span><br><span class="line">    self.object &#x3D; form.save()</span><br><span class="line"></span><br><span class="line">    send_mail(</span><br><span class="line">        &#39;&#123;&#125;님의 회원가입 인증메일 입니다.&#39;.format(self.object.user_id),</span><br><span class="line">        [self.object.email],</span><br><span class="line">        html&#x3D;render_to_string(&#39;users&#x2F;register_email.html&#39;, &#123;</span><br><span class="line">            &#39;user&#39;: self.object,</span><br><span class="line">            &#39;uid&#39;: urlsafe_base64_encode(force_bytes(self.object.pk)).encode().decode(),</span><br><span class="line">            &#39;domain&#39;: self.request.META[&#39;HTTP_HOST&#39;],</span><br><span class="line">            &#39;token&#39;: default_token_generator.make_token(self.object),</span><br><span class="line">        &#125;),</span><br><span class="line">    )</span><br><span class="line">    return redirect(self.get_success_url())</span><br></pre></td></tr></table></figure><p><strong>default_token_generator</strong>로 생성된 token 값을 전송할 메일인 html 파일에 domain과 함께 값을 담아 메일 전송을 하게 됩니다.</p><p><em>(‘uid’ 부분에서 .decode(‘UTF-8’)로 디코딩을 할 시 오류가 발생하게 됩니다. pythono3에서 이미 디코딩을 해주기에 .encode().decode()로 구현합니다.)</em></p><p>토큰 값이 담긴 메일의 링크를 사용자가 클릭시 계정을 활성화하도록 아래와 같이 <strong>activate view</strong>를 구현합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">def activate(request, uid64, token):</span><br><span class="line">    try:</span><br><span class="line">        uid &#x3D; force_text(urlsafe_base64_decode(uid64))</span><br><span class="line">        current_user &#x3D; User.objects.get(pk&#x3D;uid)</span><br><span class="line">    except (TypeError, ValueError, OverflowError, User.DoesNotExist, ValidationError):</span><br><span class="line">        messages.error(request, &#39;메일 인증에 실패했습니다.&#39;)</span><br><span class="line">        return redirect(&#39;users:login&#39;)</span><br><span class="line"></span><br><span class="line">    if default_token_generator.check_token(current_user, token):</span><br><span class="line">        current_user.is_active &#x3D; True</span><br><span class="line">        current_user.save()</span><br><span class="line"></span><br><span class="line">        messages.info(request, &#39;메일 인증이 완료 되었습니다. 회원가입을 축하드립니다!&#39;)</span><br><span class="line">        return redirect(&#39;users:login&#39;)</span><br><span class="line"></span><br><span class="line">    messages.error(request, &#39;메일 인증에 실패했습니다.&#39;)</span><br><span class="line">    return redirect(&#39;users:login&#39;)</span><br></pre></td></tr></table></figure><p>회원가입 인증메일이 발송되었다는 메세지와 함께 간단한 안내 창으로 redirect시키기 위해 <strong>CsRegisterView</strong>의 <strong>get_success_url</strong>에 아래와 같은 소스로 수정합니다. 마찬가지로 세션을 생성하여 강제적인 url 이동을  방지합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">def get_success_url(self):</span><br><span class="line">    self.request.session[&#39;register_auth&#39;] &#x3D; True</span><br><span class="line">    messages.success(self.request, &#39;회원님의 입력한 Email 주소로 인증 메일이 발송되었습니다. 인증 후 로그인이 가능합니다.&#39;)</span><br><span class="line">    return reverse(&#39;users:register_success&#39;)</span><br></pre></td></tr></table></figure><p>마지막으로 위에서 구현한 register_auth의 세션값을 비교하여 인증메일 발송 안내창을 render 해주는 view를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">def register_success(request):</span><br><span class="line">    if not request.session.get(&#39;register_auth&#39;, False):</span><br><span class="line">        raise PermissionDenied</span><br><span class="line">    request.session[&#39;register_auth&#39;] &#x3D; False</span><br><span class="line"></span><br><span class="line">    return render(request, &#39;users&#x2F;register_success.html&#39;)</span><br></pre></td></tr></table></figure><h2 id="5-urls-py-작성"><a href="#5-urls-py-작성" class="headerlink" title="5. urls.py 작성"></a>5. urls.py 작성</h2><p>views에서 구현한 메일발송 안내, 발송된 메일의 인증링크를 연결하기 위해 <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 아래의 <strong>path</strong>를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">path(&#39;registerauth&#x2F;&#39;, views.register_success, name&#x3D;&#39;register_success&#39;),</span><br><span class="line">path(&#39;activate&#x2F;&lt;str:uid64&gt;&#x2F;&lt;str:token&gt;&#x2F;&#39;, views.activate, name&#x3D;&#39;activate&#39;),</span><br></pre></td></tr></table></figure><h2 id="6-templates-작성"><a href="#6-templates-작성" class="headerlink" title="6. templates 작성"></a>6. templates 작성</h2><p>전송될 메일 html을 구현합니다. html형식으로 메일발송시 <u>head부분을 제외한 body부분안의 내용만 작성해야합니다. 또한 css를 적용해야 한다면 반드시 inline형식으로 구현해야 합니다.</u></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;register_email.html --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% autoescape off %&#125;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;&#123;&#123; domain &#125;&#125;&#123;% url &#39;users:activate&#39; uid64&#x3D;uid token&#x3D;token %&#125;&quot;&gt;인증하기&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;           </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">&#123;% endautoescape %&#125;</span><br></pre></td></tr></table></figure><p>전체 소스가 아닌 href 부분만 삽입하였습니다. 마찬가지로 메일 발송이 완료되었다는 페이지를 register_success.html을 생성하여 구현하면 됩니다.</p><h2 id="7-결과"><a href="#7-결과" class="headerlink" title="7. 결과"></a>7. 결과</h2><p><img src="08-2.JPG" alt="django-project-08"></p><p><img src="08-3.JPG" alt="django-project-08"></p><p>아직 login 페이지를 생성하지 않았기에 인증링크 클릭시 render 오류가 발생 할 수 있습니다. 하지만 admin페이지에서 생성한 계정의 is_activate가 False에서 True로 활성화된 것을 확인할 수 있습니다.</p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/26/django-project-08/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 07. 회원가입 구현</title>
      <link>https://parkhyeonchae.github.io/2020/03/26/django-project-07/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/26/django-project-07/</guid>
      <pubDate>Wed, 25 Mar 2020 19:27:13 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-07-회원가입-구현&quot;&gt;&lt;a href=&quot;#Django-07-회원가입-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 07. 회원가입 구현&quot;&gt;&lt;/a&gt;Django 07. 회원가입 구현&lt;/h1&gt;&lt;blockquote
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-07-회원가입-구현"><a href="#Django-07-회원가입-구현" class="headerlink" title="Django 07. 회원가입 구현"></a>Django 07. 회원가입 구현</h1><blockquote><p>Django에서 제공하는 내장 Form을 사용하여 회원가입과 Validation을 구현합니다.</p></blockquote><hr><h2 id="1-forms-py-추가"><a href="#1-forms-py-추가" class="headerlink" title="1. forms.py 추가"></a>1. forms.py 추가</h2><p>Django는 <strong>form</strong>을 통해 커스텀되고 생성된 필드를 <strong>templates</strong>과 연결하여 사용할 수 있습니다. <strong>form</strong>에서 지정된 필드에 따라 <strong>validation</strong> 처리를 해주며, <strong>form</strong>으로 넘긴 입력 필드를 as_p() 등과 같은 기능을 사용함으로써 간결한 html 작성이 가능하다는 장점이 있습니다.</p><p>이 프로젝트는 기본적으로 회원가입이 컴퓨터공학부 전용, 일반인 전용 두가지로 나누어져 있습니다. 입력필드는 대부분 같고 필수, 선택사항 필드만 다르기에 일반인 회원가입은 포스팅에서 생략하도록 하겠습니다.</p><p><strong>users app</strong> 내에 <strong>forms.py</strong> 파일을 생성한 후 django의 내장 form인 <strong>UserCreationForm</strong>을 상속받는 <strong>CsRegisterForm</strong> 클래스를 생성하고 아래와 같이 코드를 입력합니다. 우선 아이디와 비밀번호 필드만 추가하겠습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">from django import forms</span><br><span class="line">from .models import User</span><br><span class="line">from django.contrib.auth.forms import UserCreationForm</span><br><span class="line"></span><br><span class="line">def hp_validator(value):</span><br><span class="line">    if len(str(value)) !&#x3D; 10:</span><br><span class="line">        raise forms.ValidationError(&#39;정확한 핸드폰 번호를 입력해주세요.&#39;)</span><br><span class="line"></span><br><span class="line">def student_id_validator(value):</span><br><span class="line">    if len(str(value)) !&#x3D; 8:</span><br><span class="line">        raise forms.ValidationError(&#39;본인의 학번 8자리를 입력해주세요.&#39;)</span><br><span class="line"></span><br><span class="line">class CsRegisterForm(UserCreationForm):</span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        super(CsRegisterForm, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        self.fields[&#39;user_id&#39;].label &#x3D; &#39;아이디&#39;</span><br><span class="line">        self.fields[&#39;user_id&#39;].widget.attrs.update(&#123;     </span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">            &#39;autofocus&#39;: False</span><br><span class="line">        &#125;)</span><br><span class="line">        self.fields[&#39;password1&#39;].label &#x3D; &#39;비밀번호&#39;</span><br><span class="line">        self.fields[&#39;password1&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; User</span><br><span class="line">        fields &#x3D; [&#39;user_id&#39;, &#39;password1&#39;, &#39;password2&#39;, &#39;email&#39;, &#39;name&#39;, &#39;hp&#39;, &#39;grade&#39;, &#39;student_id&#39;, &#39;circles&#39;]</span><br><span class="line"></span><br><span class="line">    def save(self, commit&#x3D;True):</span><br><span class="line">        user &#x3D; super(CsRegisterForm, self).save(commit&#x3D;False)</span><br><span class="line">        user.level &#x3D; &#39;2&#39;</span><br><span class="line">        user.department &#x3D; &#39;컴퓨터공학부&#39;</span><br><span class="line">        user.save()</span><br><span class="line"></span><br><span class="line">        return user</span><br></pre></td></tr></table></figure><p><strong>widget</strong> 커스텀, <strong>validations</strong>을 수정이 가능하도록 <strong>init </strong>메소드로 초기화 후 form을 작성합니다.</p><p><strong>save</strong> 함수를 보시면 컴퓨터공학부 회원가입을 통해 생성된 사용자는 <strong>level 2</strong>의 권한을 가지며, department 필드가 <strong>컴퓨터공학부</strong>로 저장됩니다.</p><p><strong><a href="https://docs.djangoproject.com/en/1.8/_modules/django/contrib/auth/forms/" target="_blank" rel="external nofollow noopener noreferrer">Django auth.forms 공식문서</a></strong></p><h2 id="2-views-py-작성"><a href="#2-views-py-작성" class="headerlink" title="2. views.py 작성"></a>2. views.py 작성</h2><p>django의 generic view인 <strong>CreateView</strong>를 import하여 회원가입 CBV를 구현하겠습니다. 아래의 소스를 기존의 <strong>views.py</strong>에 추가해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from django.core.exceptions import PermissionDenied</span><br><span class="line">from .forms import CsRegisterForm</span><br><span class="line">from django.views.generic import CreateView</span><br><span class="line"> </span><br><span class="line">class CsRegisterView(CreateView):</span><br><span class="line">    model &#x3D; User</span><br><span class="line">    template_name &#x3D; &#39;users&#x2F;register_cs.html&#39;</span><br><span class="line">    form_class &#x3D; CsRegisterForm</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        if not request.session.get(&#39;agreement&#39;, False):</span><br><span class="line">            raise PermissionDenied</span><br><span class="line">        request.session[&#39;agreement&#39;] &#x3D; False</span><br><span class="line">        return super().get(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def get_success_url(self):</span><br><span class="line">        messages.success(self.request, &quot;회원가입 성공.&quot;)</span><br><span class="line">        return redirect(&#39;users:login&#39;)</span><br><span class="line"></span><br><span class="line">    def form_valid(self, form):</span><br><span class="line">        self.object &#x3D; form.save()</span><br><span class="line">        return redirect(self.get_success_url())</span><br></pre></td></tr></table></figure><p>회원가입 창으로 redirect시 get함수를 통해 이전 포스팅에서 구현한 agreement 세션값을 검사하게 됩니다. 만약 사용자가 약관에 동의를 안했을시 403 에러가 발생하도록 <strong>PermissionDenied</strong>처리를 해줍니다.</p><p>POST시 form에서 validations 검증이 성공했다면 get_success_url()로 넘어가 Success 메세지와 함께 login 경로로 redirect 되도록 구현합니다.</p><p><strong><a href="https://docs.djangoproject.com/en/3.0/ref/class-based-views/" target="_blank" rel="external nofollow noopener noreferrer">Django 내장 CBV API 공식문서</a></strong></p><h2 id="3-urls-py-작성"><a href="#3-urls-py-작성" class="headerlink" title="3. urls.py 작성"></a>3. urls.py 작성</h2><p>기존 <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 회원가입 url을 추가해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;agreement&#x2F;&#39;, views.AgreementView.as_view(), name&#x3D;&#39;agreement&#39;),</span><br><span class="line">    path(&#39;csregister&#x2F;&#39;, views.CsRegisterView.as_view(), name&#x3D;&#39;csregister&#39;), # 추가</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-templates-작성"><a href="#4-templates-작성" class="headerlink" title="4.  templates 작성"></a>4.  templates 작성</h2><p><strong>templates</strong>의 <strong>users</strong> 내에 <strong>register_cs.html</strong>을 생성하고 아래의 소스를 입력합니다. (전체 코드는 생략하고 form 태그의 아이디 입력필드만 포스팅하겠습니다.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;register_cs.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;&quot; id&#x3D;&quot;signup&quot; method&#x3D;&quot;POST&quot; novalidate&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;label name&#x3D;&quot;label_user_id&quot; for&#x3D;&quot;&#123;&#123; form.user_id.id_for_label &#125;&#125;&quot;&gt;</span><br><span class="line">            &#123;&#123; form.user_id.label &#125;&#125;</span><br><span class="line">    &lt;&#x2F;label&gt;</span><br><span class="line">    &#123;&#123; form.user_id &#125;&#125;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            if (document.getElementsByName(&#39;user_id&#39;)[0].value !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">            document.getElementsByName(&#39;label_user_id&#39;)[0].setAttribute(&#39;class&#39;,&#39;active&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">    &#123;% if form.user_id.errors %&#125;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            document.getElementsByName(&#39;user_id&#39;)[0].setAttribute(&#39;class&#39;, &#39;form-control is-invalid&#39;)</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">        &#123;% for error in form.user_id.errors %&#125;</span><br><span class="line">        &lt;div class&#x3D;&quot;invalid-feedback&quot;&gt;</span><br><span class="line">            &#123;&#123; error &#125;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">        </span><br><span class="line">    &lt;small&gt;</span><br><span class="line">            로그인 시 사용할 아이디를 입력해주세요.</span><br><span class="line">    &lt;&#x2F;small&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>form의 입력필드는 html에서 <strong>{ { form.user_id } }</strong> 같은 형식으로 사용될 수 있습니다.</p><p><em>중간 중간 삽입되어 있는 script는 회원가입 에러 처리를 위한 script로 부트스트랩 플러그인 유료버전에 제공되어 있는 기능을 보고 javascript로 구현한 것입니다.</em></p><h2 id="5-결과"><a href="#5-결과" class="headerlink" title="5. 결과"></a>5. 결과</h2><p><img src="07-1.JPG" alt="django-project-07"></p><p><img src="07-2.JPG" alt="django-project-07"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/26/django-project-07/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 06. 회원가입 이용약관 동의 구현</title>
      <link>https://parkhyeonchae.github.io/2020/03/25/django-project-06/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/25/django-project-06/</guid>
      <pubDate>Wed, 25 Mar 2020 13:39:31 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-06-회원가입-이용약관-동의-구현&quot;&gt;&lt;a href=&quot;#Django-06-회원가입-이용약관-동의-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 06. 회원가입 이용약관 동의 구현&quot;&gt;&lt;/a&gt;Django 06.
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-06-회원가입-이용약관-동의-구현"><a href="#Django-06-회원가입-이용약관-동의-구현" class="headerlink" title="Django 06. 회원가입 이용약관 동의 구현"></a>Django 06. 회원가입 이용약관 동의 구현</h1><blockquote><p>Session을 사용하여 회원가입 전 사이트 이용약관 / 개인정보 수집 동의를 구현합니다.</p></blockquote><hr><h2 id="1-templates-작성"><a href="#1-templates-작성" class="headerlink" title="1. templates 작성"></a>1. templates 작성</h2><p>회원가입 버튼을 통해 회원가입 창으로 넘어가기 전 사이트의 개인정보수집 동의 및 이용약관 동의를 구현하기 위해 우선 생성해두었던 <strong>templates</strong> 폴더에 <strong>users</strong> 폴더를 생성한 후 <strong>user_base.html</strong>과 <strong>agreement.html</strong> 파일을 생성한 후 아래의 코드를 입력합니다.</p><p><strong>user_base.html</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;user_base.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&#39;utf-8&#39;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&#39;viewport&#39; content&#x3D;&#39;width&#x3D;device-width, initial-scale&#x3D;1&#39;&gt;</span><br><span class="line">    &#123;% block header %&#125;</span><br><span class="line">    &lt;!-- header 삽입 부분 --&gt;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body style&#x3D;&quot;background-color: #d6d6d6;&quot;&gt; </span><br><span class="line">    &#123;% block contents %&#125;</span><br><span class="line">    &lt;!-- body 삽입 부분 --&gt;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% if messages %&#125;</span><br><span class="line">    &#123;% for message in messages %&#125;</span><br><span class="line">    &#123;% if message.tags %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        alert(&quot;&#123;&#123; message.message &#125;&#125;&quot;) &lt;!-- message alert script --&gt;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>이제 templates는 django 템플릿 언어를 통해 이 user_base.html를 상속받습니다. 프로젝트의 전반적인 디자인은 <strong>bootstrap4</strong>와 부트스트랩 PlugIn인 <strong>Material Design Bootsrap</strong>을 사용하였습니다. 각 CDN과 추가되는 파일들은 포스팅하지 않겠습니다.</p><p><strong>agreement.html</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;agreement.html --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% extends &quot;users&#x2F;user_base.html&quot; %&#125;</span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line">&#123;% block contents %&#125;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&lt;form action&#x3D;&quot;&quot; , method&#x3D;&quot;POST&quot;&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label&quot;&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;agreement1&quot; &#x2F;&gt;</span><br><span class="line">            &lt;span&gt;이용약관에 동의합니다.&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;label&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;agreement2&quot; &#x2F;&gt;</span><br><span class="line">            &lt;span&gt;개인정보 수집 및 이용에 동의합니다.&lt;&#x2F;span&gt;</span><br><span class="line">         &lt;&#x2F;label&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>사이트 이용약관과 개인정보 수집동의 텍스트는 법률을 보면서 직접 작성하거나 구글링 등을 통해 쉽게 구할 수 있습니다. 다른 소스들은 제외하고 동의부분 <strong>checkbox</strong>의 <strong>name</strong>을 각각 <strong>agreement1,</strong> <strong>agreement2</strong>로 설정해줍니다.</p><h2 id="2-views-py-작성"><a href="#2-views-py-작성" class="headerlink" title="2. views.py 작성"></a>2. views.py 작성</h2><p>약관 동의 로직은 다음과 같습니다.</p><ol><li><strong>회원가입 버튼 Click시 회원가입(register.html)이 아닌 약관동의(agreement.html)로 redirect</strong></li><li><strong>url 강제입력으로 회원가입창으로 넘어가서는 안된다.</strong></li><li><strong>agreement.html에서 동의 checkbox가 checked되어야 /register로 redirect가 가능하다.</strong></li></ol><p>위의 로직을 바탕으로 <strong>users app</strong>의 <strong>views.py</strong>를 아래와 같이 작성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from django.shortcuts import render, redirect</span><br><span class="line">from django.utils.decorators import method_decorator</span><br><span class="line">from .decorators import *</span><br><span class="line">from .models import User</span><br><span class="line">from django.views.generic import View</span><br><span class="line">from django.contrib import messages</span><br><span class="line"></span><br><span class="line">@method_decorator(logout_message_required, name&#x3D;&#39;dispatch&#39;)</span><br><span class="line">class AgreementView(View):</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        request.session[&#39;agreement&#39;] &#x3D; False</span><br><span class="line">        return render(request, &#39;users&#x2F;agreement.html&#39;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwarg):</span><br><span class="line">        if request.POST.get(&#39;agreement1&#39;, False) and request.POST.get(&#39;agreement2&#39;, False):</span><br><span class="line">            request.session[&#39;agreement&#39;] &#x3D; True</span><br><span class="line"></span><br><span class="line">            if request.POST.get(&#39;csregister&#39;) &#x3D;&#x3D; &#39;csregister&#39;:       </span><br><span class="line">                return redirect(&#39;&#x2F;users&#x2F;csregister&#x2F;&#39;)</span><br><span class="line">            else:</span><br><span class="line">                return redirect(&#39;&#x2F;users&#x2F;register&#x2F;&#39;)</span><br><span class="line">        else:</span><br><span class="line">            messages.info(request, &quot;약관에 모두 동의해주세요.&quot;)</span><br><span class="line">            return render(request, &#39;users&#x2F;agreement.html&#39;)</span><br></pre></td></tr></table></figure><p>이전 포스팅에서 구현한 decorator 함수를 통해 로그인 중인 사용자는 접근하지 못하게 합니다. AgreementView CBV를 추가하여 회원가입 버튼을 눌렀을시<strong>(GET)</strong> agreement란 이름의 세션 값을 <strong>False</strong>로 생성하고 agreement.html을 render 해줍니다.</p><p>agreement.html의 form에서 회원가입 버튼을 Click하여 Submit 했을 시<strong>(POST)</strong>  AgreementView의 post 함수는 Submit된 agreement1과 agreement2의 checked 상태를 확인합니다. checked 상태가 되었다면 agreement의 세션값을 <strong>True</strong>로 바꾸어 주고 컴퓨터공학부 가입인지 일반 가입인지 구분하여 redirect시켜줍니다. </p><p>이제 이 agreement 세션 값을 통해 회원가입 view에서 약관에 동의를 한 사용자인지 아닌지 판별할 수 있습니다.</p><h2 id="3-urls-py-작성"><a href="#3-urls-py-작성" class="headerlink" title="3. urls.py 작성"></a>3. urls.py 작성</h2><p>view 구현이 끝났다면 <strong>urls.py</strong>에 <strong>AgreementView</strong>를 연결시키고 index창의 회원가입 버튼에 아래의 <strong>agreement path</strong>와 연결시킵니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">from django.urls import path</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">app_name &#x3D; &#39;users&#39;</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;agreement&#x2F;&#39;, views.AgreementView.as_view(), name&#x3D;&#39;agreement&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-결과"><a href="#4-결과" class="headerlink" title="4. 결과"></a>4. 결과</h2><p>현재 login view를 구현하지 않았기에 login_message_required는 주석처리를 해둔 뒤 서버를 실행하여 /users/agreement/ 경로로 들어가면 회원가입 전 이용약관 동의 페이지를 확인할 수 있습니다.</p><p><img src="06-1.JPG" alt="django-project-06"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/25/django-project-06/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 05. 사용권한 Decorator 구현</title>
      <link>https://parkhyeonchae.github.io/2020/03/25/django-project-05/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/25/django-project-05/</guid>
      <pubDate>Tue, 24 Mar 2020 19:59:10 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-05-사용권한-Decorator-구현&quot;&gt;&lt;a href=&quot;#Django-05-사용권한-Decorator-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 05. 사용권한 Decorator 구현&quot;&gt;&lt;/a&gt;Djan
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-05-사용권한-Decorator-구현"><a href="#Django-05-사용권한-Decorator-구현" class="headerlink" title="Django 05. 사용권한 Decorator 구현"></a>Django 05. 사용권한 Decorator 구현</h1><blockquote><p>Python Decorator 기능으로 프로젝트 각 앱의 권한을 설정하는 함수를 구현합니다.</p></blockquote><hr><h2 id="1-decorators-py-생성"><a href="#1-decorators-py-생성" class="headerlink" title="1. decorators.py 생성"></a>1. decorators.py 생성</h2><p>각 앱마다의 사용권한, 예를 들어 공지사항 게시판의 글작성은 관리자 권한의 사용자만, 시험시간표와 같은 기능은 컴퓨터공학부 사용자만 이용할 수 있도록 구현하기 위해 Python에서 제공하는 <strong>Decorator</strong> 기능을 사용하겠습니다.</p><p><strong>users app</strong> 내에 <strong>decorators.py</strong>라는 파일을 생성해주고 아래의 소스를 입력합니다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;decorators.py</span><br><span class="line"></span><br><span class="line">from django.conf import settings</span><br><span class="line">from django.shortcuts import redirect</span><br><span class="line">from django.contrib import messages</span><br><span class="line">from .models import User</span><br><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line"># 로그인 확인</span><br><span class="line">def login_message_required(function):</span><br><span class="line">    def wrap(request, *args, **kwargs):</span><br><span class="line">        if not request.user.is_authenticated:</span><br><span class="line">            messages.info(request, &quot;로그인한 사용자만 이용할 수 있습니다.&quot;)</span><br><span class="line">            return redirect(settings.LOGIN_URL)</span><br><span class="line">        return function(request, *args, **kwargs)</span><br><span class="line">    return wrap</span><br><span class="line"></span><br><span class="line"># 관리자 권한 확인</span><br><span class="line">def admin_required(function):</span><br><span class="line">    def wrap(request, *args, **kwargs):</span><br><span class="line">        if request.user.level &#x3D;&#x3D; &#39;1&#39; or request.user.level &#x3D;&#x3D; &#39;0&#39;:</span><br><span class="line">            return function(request, *args, **kwargs)</span><br><span class="line">        messages.info(request, &quot;접근 권한이 없습니다.&quot;)</span><br><span class="line">        return redirect(&#39;&#x2F;users&#x2F;main&#x2F;&#39;)</span><br><span class="line">    return wrap</span><br><span class="line"></span><br><span class="line"># 비로그인 확인</span><br><span class="line">def logout_message_required(function):</span><br><span class="line">    def wrap(request, *args, **kwargs):</span><br><span class="line">        if request.user.is_authenticated:</span><br><span class="line">            messages.info(request, &quot;접속중인 사용자입니다.&quot;)</span><br><span class="line">            return redirect(&#39;&#x2F;users&#x2F;main&#x2F;&#39;)</span><br><span class="line">        return function(request, *args, **kwargs)</span><br><span class="line">    return wrap</span><br></pre></td></tr></table></figure><p><strong>login_message_required</strong> </p><p>게시판 글작성 등과 같이 로그인한 사용자에게만 권한을 주기 위해 django에서 제공하는 Authentication System인 <strong>is_authenticated</strong>로 현재 사용자가 로그인 중인지 확인합니다. </p><p><em>(django는 기본적으로 사용자의 접속여부를 판별하는 @login_required를 django.contrib.auth.decorators에서 제공하고있습니다.)</em> <strong><a href="https://docs.djangoproject.com/en/3.0/topics/auth/default/" target="_blank" rel="external nofollow noopener noreferrer">Django Authentication 공식문서</a></strong></p><p>request.user로 현재 사용자의 접속상태를 확인하고 비로그인시 django의 <strong>message framework</strong> 기능을 사용하여 쿠키값에 로그인이 필요하다는 메세지를 담아 이전 포스트에서 설정한 settings.py의 login 경로로 redirect시킵니다. 이 message는 1회성으로 사용자에게 경고창, 확인창 등을 표시할때 유용하게 사용됩니다.</p><p><strong>admin_required</strong></p><p>공지사항 글작성, 타 게시판 글삭제, 댓글삭제, 학사일정과 같은 기능을 사용할 수 있는 권한을 설정하기 위해 model 생성 부분에서 지정한 사용자의 level 필드를 비교하고 관리자 권한의 사용자가 아닐시 접근 불가 메세지와 함께 나중에 생성할 main 경로로 redirect 시킵니다.</p><p><strong>logout_message_required</strong></p><p>이미 로그인한 사용자의 회원가입, 로그인을 막기 위해 is_authenticated로 접속중인 사용자를 판별합니다.</p><h2 id="2-decorator-적용"><a href="#2-decorator-적용" class="headerlink" title="2. decorator 적용"></a>2. decorator 적용</h2><p>위에서 구현한 decorator를 적용하는 방법은 아래와 같습니다.</p><p><strong>FBV (Fuction Based View)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from users.decorators import *</span><br><span class="line"></span><br><span class="line">@login_message_required</span><br><span class="line">def example_def(request):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p><strong>CBV (Class Based View)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from users.decorators import *</span><br><span class="line">from django.utils.decorators import method_decorator</span><br><span class="line"></span><br><span class="line">@method_decorator(logout_message_required, name&#x3D;&#39;dispatch&#39;)</span><br><span class="line">class ExampleClass(View):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p><strong>Django 내장 login_required 사용</strong></p><p>decorator를 따로 구현할 필요가 없는 경우 django에서 기본으로 제공하는 login_required를 사용할 때는 아래의 import만 추가하면 됩니다. 사용방법은 위와 동일합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.auth.decorators import login_required</span><br></pre></td></tr></table></figure><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/25/django-project-05/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 04. 사용자 앱 모델 생성/연결</title>
      <link>https://parkhyeonchae.github.io/2020/03/25/django-project-04/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/25/django-project-04/</guid>
      <pubDate>Tue, 24 Mar 2020 18:03:36 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-04-사용자-앱-모델-생성-연결&quot;&gt;&lt;a href=&quot;#Django-04-사용자-앱-모델-생성-연결&quot; class=&quot;headerlink&quot; title=&quot;Django 04. 사용자 앱 모델 생성/연결&quot;&gt;&lt;/a&gt;Django 04. 사용
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-04-사용자-앱-모델-생성-연결"><a href="#Django-04-사용자-앱-모델-생성-연결" class="headerlink" title="Django 04. 사용자 앱 모델 생성/연결"></a>Django 04. 사용자 앱 모델 생성/연결</h1><blockquote><p>사용자 앱인 users app을 생성하고 models, admin, urls를 설정합니다. </p></blockquote><hr><h2 id="1-users앱-생성"><a href="#1-users앱-생성" class="headerlink" title="1. users앱 생성"></a>1. users앱 생성</h2><p>manage.py가 있는 경로에 아래의 명령어로 프로젝트의 사용자계정 부분을 담당하는 <strong>users app</strong>을 생성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ django-admin startapp users</span><br></pre></td></tr></table></figure><p>django 서버 실행 시 settings.py 에서 생성한 users app을 읽어올 수 있도록 <strong>settings.py</strong>의 <strong>INSTALLED_APPS</strong>에  추가해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># cs_web&#x2F;settings.py</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    &#39;django.contrib.admin&#39;,</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br><span class="line">    &#39;users.apps.UsersConfig&#39;, # 추가 부분</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><em>*일반적으로 ‘users’ 와 같이 app이름만 추가하셔도 상관은 없으나, django convention이며 시그널 또는 apps 파일에서 Config를 사용하는 경우가 있기에 저 형식으로 코드를 추가해줍니다.</em></p><h2 id="2-urls-py-생성"><a href="#2-urls-py-생성" class="headerlink" title="2. urls.py 생성"></a>2. urls.py 생성</h2><p>app별로 urls를 관리하기 위해 <strong>users</strong> 앱 내부에 <strong>urls.py</strong>를 생성한 후 아래와 같은 코드를 작성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">from django.urls import path</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">app_name &#x3D; &#39;users&#39;</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; []</span><br></pre></td></tr></table></figure><p>생성한 urls.py를 읽어올 수 있도록 <strong>settings.py</strong>가 있는 경로의 <strong>urls.py</strong>를 아래와 같이 수정합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># cs_web&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    path(&#39;users&#x2F;&#39;, include(&#39;users.urls&#39;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="3-models-py-작성"><a href="#3-models-py-작성" class="headerlink" title="3. models.py 작성"></a>3. models.py 작성</h2><p>이제 프로젝트 사용자의 DB, 즉 django MTV패턴 중 Model 부분을 생성합니다.</p><p>django의 Model 생성 방법 중 처음부터 커스텀을 하는 방식인 AbstractBaseUser, BaseUserManger을 사용하겠습니다.</p><p>프로젝트의 사용자 DB 필드는 다음과 같습니다.</p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>필드</strong></th><th><strong>역할</strong></th></tr></thead><tbody><tr><td style="text-align:left">user_id</td><td>사용자 로그인 ID</td></tr><tr><td style="text-align:left">password</td><td>사용자 계정 비밀번호</td></tr><tr><td style="text-align:left">email</td><td>메일주소</td></tr><tr><td style="text-align:left">hp</td><td>핸드폰번호</td></tr><tr><td style="text-align:left">name</td><td>이름</td></tr><tr><td style="text-align:left">student_id</td><td>학번</td></tr><tr><td style="text-align:left">grade</td><td>학년, 졸업생 구분</td></tr><tr><td style="text-align:left">level</td><td>사이트 사용권한</td></tr><tr><td style="text-align:left">circles</td><td>학과 내 동아리</td></tr><tr><td style="text-align:left">department</td><td>교내 타 학과, 일반인 구분</td></tr><tr><td style="text-align:left">auth</td><td>인증번호</td></tr><tr><td style="text-align:left">date_joined</td><td>가입일</td></tr></tbody></table></div><p>저희 과 뿐만 아니라 타 과, 일반인의 가입을 고려하여 level로 권한을 구분하였습니다.</p><p><strong>Level 0</strong>  개발자 (모든 권한)</p><p><strong>Level 1</strong> : 관리자 (공지사항 작성, 게시글 삭제, 시험시간표 생성 등 사이트 관리 권한)</p><p><strong>Level 2</strong> : 컴퓨터공학부 사용자</p><p><strong>Level 3</strong> : 일반인</p><p>먼저 <strong>users</strong> 앱의 <strong>models.py</strong>에 아래와 같이 BaseUserManager를 상속받는 <strong>UserManager</strong> 클래스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;models.py</span><br><span class="line"></span><br><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin</span><br><span class="line">from .choice import *</span><br><span class="line"></span><br><span class="line">class UserManager(BaseUserManager):</span><br><span class="line">    def create_user(self, user_id, password, email, hp, name, student_id, grade, department, circles, auth, **extra_fields):</span><br><span class="line">        user &#x3D; self.model(</span><br><span class="line">            user_id &#x3D; user_id,</span><br><span class="line">            email &#x3D; email,</span><br><span class="line">            hp &#x3D; hp,</span><br><span class="line">            name &#x3D; name,</span><br><span class="line">            student_id &#x3D; student_id,</span><br><span class="line">            grade &#x3D; grade,</span><br><span class="line">            department &#x3D; department,</span><br><span class="line">            circles &#x3D; circles,</span><br><span class="line">            auth &#x3D; auth,</span><br><span class="line">            **extra_fields</span><br><span class="line">        )</span><br><span class="line">        user.set_password(password)</span><br><span class="line">        user.save(using&#x3D;self._db)</span><br><span class="line">        return user</span><br><span class="line"></span><br><span class="line">    def create_superuser(self, user_id, password, email&#x3D;None, hp&#x3D;None, name&#x3D;None, student_id&#x3D;None, grade&#x3D;None, department&#x3D;None, circles&#x3D;None, auth&#x3D;None):</span><br><span class="line">        user &#x3D; self.create_user(user_id, password, email, hp, name, student_id, grade, department, circles, auth)</span><br><span class="line">        user.is_superuser &#x3D; True</span><br><span class="line">        user.is_staff &#x3D; True</span><br><span class="line">        user.is_admin &#x3D; True</span><br><span class="line">        user.level &#x3D; 0</span><br><span class="line">        user.save(using&#x3D;self._db)</span><br><span class="line">        return user</span><br></pre></td></tr></table></figure><p>AbstractBaseUser를 상속받는 <strong>User</strong> 클래스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;modesl.py</span><br><span class="line"></span><br><span class="line">class User(AbstractBaseUser, PermissionsMixin):</span><br><span class="line">    </span><br><span class="line">    objects &#x3D; UserManager()</span><br><span class="line"></span><br><span class="line">    user_id &#x3D; models.CharField(max_length&#x3D;17, verbose_name&#x3D;&quot;아이디&quot;, unique&#x3D;True)</span><br><span class="line">    password &#x3D; models.CharField(max_length&#x3D;256, verbose_name&#x3D;&quot;비밀번호&quot;)</span><br><span class="line">    email &#x3D; models.EmailField(max_length&#x3D;128, verbose_name&#x3D;&quot;이메일&quot;,null&#x3D;True, unique&#x3D;True)</span><br><span class="line">    hp &#x3D; models.IntegerField(verbose_name&#x3D;&quot;핸드폰번호&quot;, null&#x3D;True, unique&#x3D;True)</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;8, verbose_name&#x3D;&quot;이름&quot;, null&#x3D;True)</span><br><span class="line">    student_id &#x3D; models.IntegerField(verbose_name&#x3D;&quot;학번&quot;, null&#x3D;True)</span><br><span class="line">    grade &#x3D; models.CharField(choices&#x3D;GRADE_CHOICES, max_length&#x3D;18, verbose_name&#x3D;&quot;학년&quot;, null&#x3D;True)</span><br><span class="line">    level &#x3D; models.CharField(choices&#x3D;LEVEL_CHOICES, max_length&#x3D;18, verbose_name&#x3D;&quot;등급&quot;, default&#x3D;3)</span><br><span class="line">    circles &#x3D; models.CharField(choices&#x3D;CIRCLES_CHOICES, max_length&#x3D;18, verbose_name&#x3D;&quot;동아리&quot;, null&#x3D;True)</span><br><span class="line">    department &#x3D; models.CharField(choices&#x3D;DEPARTMENT_CHOICES, max_length&#x3D;24, verbose_name&#x3D;&quot;학과&quot;, null&#x3D;True)</span><br><span class="line">    auth &#x3D; models.CharField(max_length&#x3D;10, verbose_name&#x3D;&quot;인증번호&quot;, null&#x3D;True)</span><br><span class="line">    date_joined &#x3D; models.DateTimeField(auto_now_add&#x3D;True, verbose_name&#x3D;&#39;가입일&#39;, null&#x3D;True, blank&#x3D;True)</span><br><span class="line"></span><br><span class="line">    is_active &#x3D; models.BooleanField(default&#x3D;True)</span><br><span class="line">    is_admin &#x3D; models.BooleanField(default&#x3D;False)</span><br><span class="line">    is_staff &#x3D; models.BooleanField(default&#x3D;False)</span><br><span class="line">    is_superuser &#x3D; models.BooleanField(default&#x3D;False)</span><br><span class="line"></span><br><span class="line">    USERNAME_FIELD &#x3D; &#39;user_id&#39;</span><br><span class="line">    REQUIRED_FIELDS &#x3D; [&#39;email&#39;]</span><br><span class="line">    </span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.user_id</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        db_table &#x3D; &quot;회원목록&quot;</span><br><span class="line">        verbose_name &#x3D; &quot;사용자&quot;</span><br><span class="line">        verbose_name_plural &#x3D; &quot;사용자&quot;</span><br></pre></td></tr></table></figure><p>choice 필드에서 사용되고 있는 CHOICES 들을 따로 관리하기 위해 <strong>users</strong> 앱 내부에 <strong>choice.py</strong> 라는 파일을 생성한 후 아래의 코드를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;choice.py</span><br><span class="line"></span><br><span class="line">GRADE_CHOICES &#x3D; (</span><br><span class="line">    (&quot;선택안함&quot;, &quot;선택안함&quot;),</span><br><span class="line">    (&quot;1학년&quot;, &quot;1학년&quot;),</span><br><span class="line">    (&quot;2학년&quot;, &quot;2학년&quot;),</span><br><span class="line">    (&quot;3학년&quot;, &quot;3학년&quot;),</span><br><span class="line">    (&quot;4학년&quot;, &quot;4학년&quot;),</span><br><span class="line">    (&quot;졸업생&quot;, &quot;졸업생&quot;),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">LEVEL_CHOICES &#x3D; (</span><br><span class="line">    (&quot;3&quot;, &quot;Lv3_미인증사용자&quot;),</span><br><span class="line">    (&quot;2&quot;, &quot;Lv2_인증사용자&quot;),</span><br><span class="line">    (&quot;1&quot;, &quot;Lv1_관리자&quot;),</span><br><span class="line">    (&quot;0&quot;, &quot;Lv0_개발자&quot;),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">CIRCLES_CHOICES &#x3D; (</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">DEPARTMENT_CHOICES &#x3D; (</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><em>(CIRCLES_CHOICES, DEPARTMENT_CHOICES는 명시하지 않겠습니다.</em>)</p><p><strong>models.py</strong>에서 <strong>choice.py</strong>를 import하는 코드를 추가해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;models.py</span><br><span class="line"></span><br><span class="line">from .choice import *</span><br></pre></td></tr></table></figure><p>마지막으로 <strong>settings.py</strong>에 아래의 코드를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># cs_web&#x2F;settings.py</span><br><span class="line"></span><br><span class="line">LOGIN_URL &#x3D; &#39;&#x2F;users&#x2F;login&#x2F;&#39;          # 로그인 URL</span><br><span class="line">LOGIN_REDIRECT_URL &#x3D; &#39;&#x2F;users&#x2F;main&#x2F;&#39;  # 로그인 후 URL</span><br><span class="line">LOGOUT_REDIRECT_URL &#x3D; &#39;&#x2F;&#39;            # 로그아웃 후 URL</span><br><span class="line">AUTH_USER_MODEL &#x3D; &quot;users.User&quot;       # 커스텀 인증 모델</span><br></pre></td></tr></table></figure><h2 id="4-admin-py-작성"><a href="#4-admin-py-작성" class="headerlink" title="4. admin.py 작성"></a>4. admin.py 작성</h2><p>생성한 Model을 django admin페이지에서 관리할 수 있도록 <strong>admin.py</strong>에 아래의 코드를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;admin.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from .models import User</span><br><span class="line">from django.contrib.auth.models import Group</span><br><span class="line"></span><br><span class="line">class UserAdmin(admin.ModelAdmin):</span><br><span class="line">    list_display &#x3D; (</span><br><span class="line">        &#39;user_id&#39;, </span><br><span class="line">        &#39;name&#39;, </span><br><span class="line">        &#39;student_id&#39;,</span><br><span class="line">        &#39;grade&#39;,</span><br><span class="line">        &#39;circles&#39;,</span><br><span class="line">        &#39;department&#39;, </span><br><span class="line">        &#39;level&#39;,</span><br><span class="line">        &#39;date_joined&#39;</span><br><span class="line">        )</span><br><span class="line">    search_fields &#x3D; (&#39;user_id&#39;, &#39;name&#39;, &#39;student_id&#39;, &#39;department&#39;)</span><br><span class="line"></span><br><span class="line">admin.site.register(User, UserAdmin)</span><br><span class="line">admin.site.unregister(Group) # Admin페이지의 GROUP삭제</span><br></pre></td></tr></table></figure><h2 id="5-DB-Migrate"><a href="#5-DB-Migrate" class="headerlink" title="5. DB Migrate"></a>5. DB Migrate</h2><p>아래의 명령어로 <strong>migrations</strong> 파일을 생성한 후 django DB에 적용하기 위해 <strong>migrate</strong>를 진행합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py makemigrations</span><br><span class="line">$ python manage.py migrate</span><br></pre></td></tr></table></figure><p><em>*app 생성 직후를 제외한 migrations는 명령 뒤에 app의 이름을 명시해주는것이 좋습니다.</em></p><h2 id="6-Super계정-생성"><a href="#6-Super계정-생성" class="headerlink" title="6. Super계정 생성"></a>6. Super계정 생성</h2><p>프로젝트의 admin page에 접속해보기 위해 아래의 명령으로 최고권한 계정을 생성해줍니다. (models의 Usermanager를 통해 Level은 최고권한인 0으로 지정되게 됩니다.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>runserver 명령을 통해 django 서버를 실행하고 /admin 경로로 들어가 생성한 superuser 계정으로 접속하면 아래와 같이 커스텀한대로 Admin페이지가 잘 출력되는 것을 보실 수 있습니다.</p><p><img src="04-1.PNG" alt="django-project-04"></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/25/django-project-04/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 03. Settings.py 초기설정</title>
      <link>https://parkhyeonchae.github.io/2020/03/23/django-project-03/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/23/django-project-03/</guid>
      <pubDate>Sun, 22 Mar 2020 20:58:37 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-03-Settings-py-초기설정&quot;&gt;&lt;a href=&quot;#Django-03-Settings-py-초기설정&quot; class=&quot;headerlink&quot; title=&quot;Django 03. Settings.py 초기설정&quot;&gt;&lt;/a&gt;Django 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-03-Settings-py-초기설정"><a href="#Django-03-Settings-py-초기설정" class="headerlink" title="Django 03. Settings.py 초기설정"></a>Django 03. Settings.py 초기설정</h1><blockquote><p>Git 업로드를 위해 secret_key를 분리하고, timezone, static 경로 등을 설정합니다.</p></blockquote><hr><h2 id="1-SECRET-KEY-분리"><a href="#1-SECRET-KEY-분리" class="headerlink" title="1. SECRET_KEY 분리"></a>1. SECRET_KEY 분리</h2><p>django는  프로젝트 시작 시 무작위의 <strong>SECRET_KEY</strong> 값을 생성합니다.</p><p>이 <strong>SECRET_KEY</strong>는 암호화 서명 등 보안 설정에 사용되는 중요한 값입니다.</p><p><u>django 공식 문서에서도 이 KEY값을 숨기는것을 권장하고 있습니다.</u></p><p>이 프로젝트는 Git을 통해 버전관리를 하므로 SECRET_KEY를 json으로 분리하겠습니다.</p><p>manage.py가 있는 루트에 <strong>secrets.json</strong> 파일을 생성해주고 settings.py의 SECRET_KEY값을 추가해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;SECRET_KEY&quot;: &quot;s5sz5mjuex4k#6s7+_#)xp#a*u$hr7vqao&amp;xb6^8*(me5pq4-m&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>(위의 key값은 예시일 뿐으로 현재 프로젝트와 상관없는 무작위 값입니다.)</em></p><p>후에 SMTP를 사용할 때, mail host pw값과 같은 비밀값들을 추가해줄 수 있습니다.</p><p>settings.py의 SECRET_KEY 부분을 방금 생성한 secrets.json을 읽어오도록 수정해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">from django.conf import settings</span><br><span class="line">from django.core.exceptions import ImproperlyConfigured</span><br><span class="line"></span><br><span class="line">secret_file &#x3D; os.path.join(BASE_DIR, &#39;secrets.json&#39;)</span><br><span class="line"></span><br><span class="line">with open(secret_file) as f:</span><br><span class="line">    secrets &#x3D; json.loads(f.read())</span><br><span class="line"></span><br><span class="line">def get_secret(setting, secrets&#x3D;secrets):</span><br><span class="line">    try:</span><br><span class="line">        return secrets[setting]</span><br><span class="line">    except KeyError:</span><br><span class="line">        error_msg &#x3D; &quot;Set the &#123;0&#125; environment variable&quot;.format(setting)</span><br><span class="line">        raise ImproperlyConfigured(error_msg)</span><br><span class="line"></span><br><span class="line">SECRET_KEY &#x3D; get_secret(&quot;SECRET_KEY&quot;)</span><br></pre></td></tr></table></figure><p>프로젝트 최상단 루트에 <strong>.gitignore</strong> 파일을 생성하고 secrets.json 파일을 추가해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secrets.json</span><br></pre></td></tr></table></figure><p>secrets.json 뿐만 아니라 django에서 숨겨야하는 값들을 모두 gitignore에 추가하기 위해 아래의 gitignore.io 사이트를 참고하여 추가해줍니다.</p><p><strong><a href="https://www.gitignore.io/api/django" target="_blank" rel="external nofollow noopener noreferrer">Django Gitignore 파일 확인하기</a></strong></p><p>이미 SECRET_KEY값이 노출되었다면 <strong><a href="https://miniwebtool.com/django-secret-key-generator/" target="_blank" rel="external nofollow noopener noreferrer">Django Secret_key 생성하기</a></strong> 사이트에서 SECRET_KEY를 다시 생성할 수 있습니다.</p><h2 id="2-LANGUAGE-CODE-TIME-ZONE-설정"><a href="#2-LANGUAGE-CODE-TIME-ZONE-설정" class="headerlink" title="2.  LANGUAGE_CODE / TIME_ZONE 설정"></a>2.  LANGUAGE_CODE / TIME_ZONE 설정</h2><p>django-admin 등을 한글형식으로 바꾸고 한국 시간대를 사용하기 위해 settings.py의 <strong>LANGUAGE_CODE</strong>와 <strong>TIME_ZONE</strong>을 아래와 같이 수정해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE &#x3D; &#39;ko&#39; </span><br><span class="line">TIME_ZONE &#x3D; &#39;Asia&#x2F;Seoul&#39;</span><br></pre></td></tr></table></figure><p><em>*django 3버전으로 넘어오면서 2버전대에서 사용하던 ‘ko-kr’을 사용하면 오류가 발생하게 됩니다.</em></p><h2 id="3-TEPLATES-경로설정"><a href="#3-TEPLATES-경로설정" class="headerlink" title="3. TEPLATES 경로설정"></a>3. TEPLATES 경로설정</h2><p>Template 폴더를 각 App마다 생성하지 않고 한 곳에서 관리하기 위해 TEMPLATES의 <strong>‘DIRS’</strong>를 수정해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES &#x3D; [</span><br><span class="line">    &#123;</span><br><span class="line">        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,</span><br><span class="line">        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &quot;templates&quot;)],</span><br><span class="line">        &#39;APP_DIRS&#39;: True,</span><br><span class="line">        &#39;OPTIONS&#39;: &#123;</span><br><span class="line">            &#39;context_processors&#39;: [</span><br><span class="line">                &#39;django.template.context_processors.debug&#39;,</span><br><span class="line">                &#39;django.template.context_processors.request&#39;,</span><br><span class="line">                &#39;django.contrib.auth.context_processors.auth&#39;,</span><br><span class="line">                &#39;django.contrib.messages.context_processors.messages&#39;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-STATIC-경로설정"><a href="#4-STATIC-경로설정" class="headerlink" title="4. STATIC 경로설정"></a>4. STATIC 경로설정</h2><p>마찬가지로 django 프로젝트의 css, js, img 등 정적인 파일들을 관리하기 위해 <strong>STATIC_URL</strong>을 수정하고, <strong>STATICFILES_DIRS</strong>, <strong>STATIC_ROOT</strong> 경로를 추가해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL &#x3D; &#39;&#x2F;static&#x2F;&#39;</span><br><span class="line">STATICFILES_DIRS &#x3D; [os.path.join(BASE_DIR, &#39;static&#39;)]</span><br><span class="line">STATIC_ROOT &#x3D; os.path.join(BASE_DIR, &#39;.static&#39;)</span><br></pre></td></tr></table></figure><p>STATICFILES_DIRS은  static 파일을 찾는 경로, STATIC_ROOT는 배포작업시 collectstatic 명령을 사용했을 때 정적파일들을 모으고 지정한 경로로 옮겨주는 역할을 합니다.</p><h2 id="5-MEDIA-경로설정"><a href="#5-MEDIA-경로설정" class="headerlink" title="5. MEDIA 경로설정"></a>5. MEDIA 경로설정</h2><p>파일 / 사진 첨부와 같이 media파일을 저장하는 경로를 설정하기 위해 <strong>MEDIA_URL</strong>과 <strong>MEDIA_ROOT</strong>를 추가해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_URL &#x3D; &#39;&#x2F;media&#x2F;&#39; # 업로드 할 경로</span><br><span class="line">MEDIA_ROOT &#x3D; os.path.join(BASE_DIR, &#39;media&#39;)</span><br></pre></td></tr></table></figure><p>지정된 ROOT에 미리 <strong>templates</strong>, <strong>static</strong>, <strong>media</strong> 폴더를 생성해줍니다.</p><p>위의 설정을 모두 마쳤다면 프로젝트 개발 전 전체구조는 아래와 같습니다.</p><p><img src="03-1.PNG" alt="django-project-03"></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/23/django-project-03/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 02. 가상환경 설정, Django 설치</title>
      <link>https://parkhyeonchae.github.io/2020/03/23/django-project-02/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/23/django-project-02/</guid>
      <pubDate>Sun, 22 Mar 2020 17:46:45 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-02-가상환경-설정-Django-설치&quot;&gt;&lt;a href=&quot;#Django-02-가상환경-설정-Django-설치&quot; class=&quot;headerlink&quot; title=&quot;Django 02. 가상환경 설정, Django 설치&quot;&gt;&lt;/a&gt;Dja
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-02-가상환경-설정-Django-설치"><a href="#Django-02-가상환경-설정-Django-설치" class="headerlink" title="Django 02. 가상환경 설정, Django 설치"></a>Django 02. 가상환경 설정, Django 설치</h1><blockquote><p>Python Virtualenv로 가상환경을 구축하고 Django프레임워크를 설치합니다.</p></blockquote><hr><h2 id="1-Python-Virtualenv-설치"><a href="#1-Python-Virtualenv-설치" class="headerlink" title="1. Python Virtualenv 설치"></a>1. Python Virtualenv 설치</h2><p>python 가상환경 pip인 virtualenv를 설치합니다.</p><p>설치환경은 <strong>window</strong>, python 버전은 <strong>3.7.4</strong> 입니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install virtualenv</span><br></pre></td></tr></table></figure><p>Cs-web 프로젝트 폴더를 생성, 그 경로로 이동 후 env란 이름의 가상환경을 설치해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd Cs-web</span><br><span class="line">$ virtualenv env</span><br></pre></td></tr></table></figure><p>window환경에서 가상환경을 실행하기 위해 설치된 django_env 폴더의 Scripts 경로로 이동 후 activate 명령을 통해 가상환경을 실행합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd env</span><br><span class="line">$ cd Scripts</span><br><span class="line">$ activate</span><br></pre></td></tr></table></figure><p>아래와 같이 가상환경이 실행된 것을 알 수 있습니다. 가상환경에서 빠져나오는 명령어는 deactivate입니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(env) C:\Users\&lt;username&gt;\desktop\Cs-Web\env\Scripts</span><br></pre></td></tr></table></figure><h2 id="2-Django-설치"><a href="#2-Django-설치" class="headerlink" title="2. Django 설치"></a>2. Django 설치</h2><p>현재 제가 사용하고 있는 django 버전은 3.0.2이므로 그대로 설치해주도록 하겠습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip insatll django&#x3D;&#x3D;3.0.2</span><br></pre></td></tr></table></figure><p>2020-03-23 기준으로 django 최신버전은 3.0.4 입니다.  <strong><a href="https://www.djangoproject.com/download/" target="_blank" rel="external nofollow noopener noreferrer">Django 최신버전 확인</a></strong></p><p>2버전에서 3버전으로 넘어오면서 MariaDB와 ASGI를 지원, 그 밖에 필터표현식, 자잘한 변경사항이 추가되었습니다.</p><p>프로젝트 진행중에 구글링을 많이 활용했었는데, django 3버전 미만의 소스코드들이 실행이 되지 않는 상황이 종종 있었습니다. 뿐만 아니라 django-multiselectfield, hitcount 등과 같은 유용한 패키지들이 django 버전에 맞추어 업데이트가 되지 않는 상황이라 굳이 3버전을 설치할 필요는 없습니다.</p><p><strong><a href="https://docs.djangoproject.com/en/dev/releases/3.0/" target="_blank" rel="external nofollow noopener noreferrer">Django 3버전 릴리스노트</a></strong></p><p><strong><a href="https://pypi.org/search/?q=django" target="_blank" rel="external nofollow noopener noreferrer">Django 버전별 패키지 확인하기</a></strong></p><h2 id="3-Django-프로젝트-생성"><a href="#3-Django-프로젝트-생성" class="headerlink" title="3. Django 프로젝트 생성"></a>3. Django 프로젝트 생성</h2><p>cs_web 이름의 django 프로젝트를 생성하는 명령은 다음과 같습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ django-admin startproject cs_web</span><br></pre></td></tr></table></figure><p>아래와 같은 구조로 생성되게 됩니다.</p><p><img src="02-1.PNG" alt="django-project-02"></p><p>cs_web 경로로 이동 후 django 서버를 실행해봅니다.</p><p>django 서버 실행 명령어인 manage.py runserver는 개발환경에서의 <strong>django 테스트앱서버</strong>를 실행하는 것으로 프로젝트 완성 후 배포할 때에는 Nginx, Apache 등을 통해 웹서버를 분리 후 배포하는 것을 권장하고 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd cs_web</span><br><span class="line">$ python manage.py runserver</span><br></pre></td></tr></table></figure><p>127.0.0.1로 접속하면 다음과 같은 django 테스트서버가 실행된 것을 확인할 수 있습니다.</p><p><img src="02-2.PNG" alt="django-project-02"></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/23/django-project-02/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 01. 프로젝트 소개</title>
      <link>https://parkhyeonchae.github.io/2020/03/22/django-project-01/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/22/django-project-01/</guid>
      <pubDate>Sun, 22 Mar 2020 12:00:40 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-01-프로젝트-소개&quot;&gt;&lt;a href=&quot;#Django-01-프로젝트-소개&quot; class=&quot;headerlink&quot; title=&quot;Django 01. 프로젝트 소개&quot;&gt;&lt;/a&gt;Django 01. 프로젝트 소개&lt;/h1&gt;&lt;blockquote
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-01-프로젝트-소개"><a href="#Django-01-프로젝트-소개" class="headerlink" title="Django 01. 프로젝트 소개"></a>Django 01. 프로젝트 소개</h1><blockquote><p>Django프레임워크로 개발한 프로젝트를 소개하고 각 App별 기능들을 설명합니다.</p></blockquote><hr><h2 id="1-포스팅-목적"><a href="#1-포스팅-목적" class="headerlink" title="1. 포스팅 목적"></a>1. 포스팅 목적</h2><p><strong>강의</strong> 포스팅이 아닌 <strong>개발기록</strong> 포스팅입니다. 프로젝트를 진행하며 Django를 공부한 내용과 개발한 과정을 기록하겠습니다.</p><p>Django에 대해 자세하게 알지 못하기에 구현과정 중 틀린부분 또는 Django Convention을 지키지 않았을 수도 있습니다. 프로젝트를 진행하며 공부한 내용을 기록한 글이라는 느낌으로 봐주시면 감사하겠습니다. 지적할 부분은 댓글로 남겨주시면 제가 더 공부해서 수정하겠습니다.</p><p>아래와 같은 개발스택을 사용하였습니다.</p><p><strong>Backend</strong> : Django/Python<br><strong>Frontend</strong> : Javascript, jQuery, Bootstarp4<br><strong>DB</strong> : Django 내장 DB (Sqlite3)<br><strong>서버</strong> : Centos7.6, Apache<br><strong>버전관리</strong> : Git</p><p><em>Django 프레임워크의 기초적인 개념은 포스팅하지 않기에 Django를 처음 접하시는 분들에겐 내용이 어려울 수 있습니다.  (후에 Django기초는 따로 포스팅 예정입니다.)</em></p><h2 id="2-프로젝트-소개"><a href="#2-프로젝트-소개" class="headerlink" title="2. 프로젝트 소개"></a>2. 프로젝트 소개</h2><p>대학교 졸업작품으로 진행한 프로젝트이며, 기존 학과홈페이지의 불편한 점을 개선하고, 원할한 정보전달과 학부생들의 소통을 목적으로 한 Django 프레임워크 기반의 학과홈페이지 프로젝트입니다.</p><h2 id="3-프로젝트-기능"><a href="#3-프로젝트-기능" class="headerlink" title="3. 프로젝트 기능"></a>3. 프로젝트 기능</h2><p>전체 프로젝트 구조는 아래와 같습니다.<br><img src="01.PNG" alt="django-project-01" align="left"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><p>프로젝트명은 reborn_web이며 이후 포스팅에서는 cs_web이란 프로젝트명으로 진행하겠습니다. </p><p><strong>users</strong><br>사용자 계정 App입니다. 기본적인 로그인, 회원가입, SMTP를 활용한 인증, 프로필수정, Ajax로 아이디/비밀번호 찾기, 비밀번호 변경, 회원탈퇴 등의 기능을 구현하였습니다.</p><p><strong>notice</strong><br>학과 공지사항 App입니다. 관리자 권한의 계정만 CRUD가 가능하며 게시글 검색, 공지사항 상단표시 등과 같은 기능을 추가하였습니다.</p><p><strong>free</strong><br>자유게시판 App입니다. 질문, 정보와 같은 카테고리를 추가하였고, 공지사항 App과 달리 Ajax로 댓글달기, 답글달기와 같은 기능을 추가하였습니다.</p><p><strong>anonymous</strong><br>익명게시판 App입니다. 페이스북 타임라인, 에브리타임을 모티브로 한 무한스크롤형식의 게시판입니다. 작성자는 익명으로 표시되며, 추천하기 등의 기능을 추가하였습니다.</p><p><strong>calender</strong><br>학과일정 App입니다. Django Model만 연결했으며 JavaScript의 구현 비중이 더 높기에 따로 포스팅은 하지 않겠습니다.</p><p><strong>timetable</strong><br>학과시험시간표 App입니다. 학년별 시험시간표, 사용자가 수강하는 과목만 선택하여 테이블형식으로 시험시간표를 볼수 있습니다. 관리자 권한의 사용자는 시험시간표를 업데이트 할 수 있으며, 마지막 업데이트 시간을 표시하게 구현하였습니다.</p><p><strong>about</strong><br>학생회 정보, 학과 내 동아리, 연구실 소개 등과 같은 기능을 추가한 App입니다.</p><h2 id="4-개발환경"><a href="#4-개발환경" class="headerlink" title="4. 개발환경"></a>4. 개발환경</h2><p><strong>OS</strong> : window10<br><strong>IDE</strong> : VsCode<br><strong>Python</strong> : 3.7.4<br><strong>Django</strong> : 3.0.2</p><h2 id="5-소스코드"><a href="#5-소스코드" class="headerlink" title="5. 소스코드"></a>5. 소스코드</h2><p>전반적인 Backend는 구현완료 상태이며, 메인화면 디자인 수정 작업 중에 있습니다. (2020/03/22)</p><p><strong><a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">GitHub 소스코드 전체보기</a></strong></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/22/django-project-01/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
