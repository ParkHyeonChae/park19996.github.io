<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Today.log</title>
    <link>https://parkhyeonchae.github.io/</link>
    
    <image>
      <url>https://www.gravatar.com/avatar/1c7b783eebce74f6d18078289a8103b2</url>
      <title>Today.log</title>
      <link>https://parkhyeonchae.github.io/</link>
    </image>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Devlog</description>
    <pubDate>Mon, 04 May 2020 14:36:48 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Django 26. 댓글 쓰기 / 삭제 구현 (AJAX)</title>
      <link>https://parkhyeonchae.github.io/2020/04/18/django-project-26/</link>
      <guid>https://parkhyeonchae.github.io/2020/04/18/django-project-26/</guid>
      <pubDate>Sat, 18 Apr 2020 05:55:06 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-26-댓글-쓰기-삭제-구현-AJAX&quot;&gt;&lt;a href=&quot;#Django-26-댓글-쓰기-삭제-구현-AJAX&quot; class=&quot;headerlink&quot; title=&quot;Django 26. 댓글 쓰기 / 삭제 구현 (AJAX)&quot;&gt;&lt;/a&gt;Dja
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-26-댓글-쓰기-삭제-구현-AJAX"><a href="#Django-26-댓글-쓰기-삭제-구현-AJAX" class="headerlink" title="Django 26. 댓글 쓰기 / 삭제 구현 (AJAX)"></a>Django 26. 댓글 쓰기 / 삭제 구현 (AJAX)</h1><blockquote><p>Ajax를 사용하여 게시글에 댓글을 달고, 삭제하는 기능을 구현합니다.</p></blockquote><hr><p>게시글에 댓글달기를 구현하기에 앞서 이전의 포스팅에서는 공지사항 앱인 <strong>notice app</strong>을 활용하여 포스팅을 진행하였습니다. 하지만 공지사항에는 댓글을 달 수 없도록 설정하였기에 이 프로젝트에서는 자유롭게 게시글을 작성하고 소통할 수 있는 자유게시판 앱을 추가하였습니다. 구현 방법은 공지사항 앱과 같으며 <strong>free</strong>란 <strong>app</strong>을 생성했다는 가정하에 포스팅을 진행하겠습니다. 댓글 포스팅은 총 3개로 나누어 포스팅할 예정입니다. 기본적인 구현 로직은 다음과 같습니다.</p><p><strong>level0 개발자, level1 관리자 : 모든 댓글의 입력, 삭제, 모든 답글의 입력, 삭제</strong> </p><p><strong>level2 사용자 : 댓글의 입력, 답글의 입력 (본인 글일시 댓글의 입력, 삭제, 답글의 입력, 삭제)</strong></p><ol><li><strong>본인의 글일시 댓글과 답글에 (글쓴이) 표시를 한다.</strong></li><li><strong>답글작성은 댓글에서만 가능하다. (답글에 답글불가)</strong></li><li><strong>댓글과 답글 작성, 삭제시 그 갯수를 동적으로 표시한다.</strong></li><li><strong>본 게시글이 삭제될시 댓글과 답글은 DB상에서 삭제된다.</strong></li><li><strong>댓글과 답글 삭제시 DB상에서 내용은 보존한다.</strong></li><li><strong>댓글과 답글 삭제시 삭제된 댓글이라는 표시를 한다.</strong></li><li><strong>답글이 있는 댓글을 삭제해도 그 답글은 보존한다.</strong></li><li><strong>답글의 입력창은 답글이 입력되는 위치에 동적으로 생성한다. (다른곳을 Click시 입력창 삭제)</strong></li><li><strong>댓글과 답글 입력, 삭제는 비동기로 구현한다.</strong></li></ol><p><em>*이번 포스팅에서는 Ajax를 사용한 댓글쓰기와 댓글삭제를 구현하겠습니다.</em></p><h2 id="1-댓글-models-py-작성"><a href="#1-댓글-models-py-작성" class="headerlink" title="1. 댓글 models.py 작성"></a>1. 댓글 models.py 작성</h2><p>댓글을 작성하기 위한 models을 생성하기 위해 적용할 게시판앱의 models.py에 아래의 Comment 클래스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># free&#x2F;models.py</span><br><span class="line"></span><br><span class="line">class Comment(models.Model):</span><br><span class="line">    post &#x3D; models.ForeignKey(Free, on_delete&#x3D;models.CASCADE, verbose_name&#x3D;&#39;게시글&#39;)</span><br><span class="line">    writer &#x3D; models.ForeignKey(settings.AUTH_USER_MODEL, on_delete&#x3D;models.SET_NULL, null&#x3D;True, verbose_name&#x3D;&#39;댓글작성자&#39;)</span><br><span class="line">    content &#x3D; models.TextField(verbose_name&#x3D;&#39;댓글내용&#39;)</span><br><span class="line">    created &#x3D; models.DateTimeField(auto_now_add&#x3D;True, verbose_name&#x3D;&#39;작성일&#39;)</span><br><span class="line">    deleted &#x3D; models.BooleanField(default&#x3D;False, verbose_name&#x3D;&#39;삭제여부&#39;)</span><br><span class="line">    </span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.content</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        db_table &#x3D; &#39;자유게시판 댓글&#39;</span><br><span class="line">        verbose_name &#x3D; &#39;자유게시판 댓글&#39;</span><br><span class="line">        verbose_name_plural &#x3D; &#39;자유게시판 댓글&#39;</span><br></pre></td></tr></table></figure><p>댓글을 작성할 게시글 필드인 post와 댓글작성자 필드인 wirter는 <strong>ForeignKey</strong>관계로 설정합니다. 작성된 댓글을 삭제할 시 ‘삭제된 댓글입니다.’ 로 표시하기 위해 <strong>deleted</strong> 필드를 추가합니다.</p><p>아래의 명령어를 통해 생성한 Comment를 django DB에 적용하기 위해 migrate합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py makemigrations free</span><br><span class="line">$ python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="2-admin-py-작성"><a href="#2-admin-py-작성" class="headerlink" title="2. admin.py 작성"></a>2. admin.py 작성</h2><p>생성한 Model을 django admin페이지에서 관리할 수 있도록 <strong>admin.py</strong>에 아래의 코드를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># free&#x2F;admin.py</span><br><span class="line"></span><br><span class="line">from .models import Comment</span><br><span class="line"></span><br><span class="line">class CommentAdmin(admin.ModelAdmin):</span><br><span class="line">    list_display &#x3D; (</span><br><span class="line">        &#39;post&#39;, </span><br><span class="line">        &#39;content&#39;,</span><br><span class="line">        &#39;writer&#39;,</span><br><span class="line">        &#39;created&#39;,</span><br><span class="line">        &#39;deleted&#39;,</span><br><span class="line">    )</span><br><span class="line">    search_fields &#x3D; (&#39;post__title&#39;, &#39;content&#39;, &#39;writer__user_id&#39;,)</span><br><span class="line"></span><br><span class="line">admin.site.register(Comment, CommentAdmin)</span><br></pre></td></tr></table></figure><p>search_fields의 <strong>incontains</strong>에러를 피하기 위하여 <strong>ForeignKey</strong> 관계로 연결된 필드는 <strong>‘post__title’</strong>과 같은 형식으로 추가합니다.</p><h2 id="3-댓글쓰기-views-py-작성"><a href="#3-댓글쓰기-views-py-작성" class="headerlink" title="3. 댓글쓰기 views.py 작성"></a>3. 댓글쓰기 views.py 작성</h2><p>templates에서 Ajax로 댓글작성 비동기요청이 들어왔을때 응답을 해주기 위해 게시글의 id값을 인자로 받는 <strong>comment_write_view</strong>를 아래와 같이 작성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># free&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from django.http import HttpResponse</span><br><span class="line">import json</span><br><span class="line">from django.core import serializers</span><br><span class="line">from django.core.serializers.json import DjangoJSONEncoder</span><br><span class="line"></span><br><span class="line">@login_message_required</span><br><span class="line">def comment_write_view(request, pk):</span><br><span class="line">    post &#x3D; get_object_or_404(Free, id&#x3D;pk)</span><br><span class="line">    writer &#x3D; request.POST.get(&#39;writer&#39;)</span><br><span class="line">    content &#x3D; request.POST.get(&#39;content&#39;)</span><br><span class="line">    if content:</span><br><span class="line">        comment &#x3D; Comment.objects.create(post&#x3D;post, content&#x3D;content, writer&#x3D;request.user)</span><br><span class="line">        post.save()</span><br><span class="line">        data &#x3D; &#123;</span><br><span class="line">            &#39;writer&#39;: writer,</span><br><span class="line">            &#39;content&#39;: content,</span><br><span class="line">            &#39;created&#39;: &#39;방금 전&#39;,</span><br><span class="line">            &#39;comment_id&#39;: comment.id</span><br><span class="line">        &#125;</span><br><span class="line">        if request.user &#x3D;&#x3D; post.writer:</span><br><span class="line">            data[&#39;self_comment&#39;] &#x3D; &#39;(글쓴이)&#39;</span><br><span class="line">        </span><br><span class="line">        return HttpResponse(json.dumps(data, cls&#x3D;DjangoJSONEncoder), content_type &#x3D; &quot;application&#x2F;json&quot;)</span><br></pre></td></tr></table></figure><p><strong>templates</strong>에서 <strong>json</strong>으로 받은 댓글의 내용과 작성자를 id값에 맞는 post에 create메소드를 사용하여 댓글을 생성합니다. 성공적으로 DB에 댓글이 생성되었을시 댓글의 id값, 글작성자와 댓글작성자를 비교해 글쓴이 여부 등과 같은 data를 딕셔너리형으로 담아 <strong>response</strong>합니다.</p><h2 id="4-댓글삭제-views-py-작성"><a href="#4-댓글삭제-views-py-작성" class="headerlink" title="4. 댓글삭제 views.py 작성"></a>4. 댓글삭제 views.py 작성</h2><p>댓글삭제도 댓글쓰기 view와 마찬가지로 게시글의 id값을 인자로 받는 <strong>comment_delete_view</strong>를 아래와 같이 작성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># free&#x2F;views.py</span><br><span class="line"></span><br><span class="line">@login_message_required</span><br><span class="line">def comment_delete_view(request, pk):</span><br><span class="line">    post &#x3D; get_object_or_404(Free, id&#x3D;pk)</span><br><span class="line">    comment_id &#x3D; request.POST.get(&#39;comment_id&#39;)</span><br><span class="line">    target_comment &#x3D; Comment.objects.get(pk &#x3D; comment_id)</span><br><span class="line"></span><br><span class="line">    if request.user &#x3D;&#x3D; target_comment.writer or request.user.level &#x3D;&#x3D; &#39;1&#39; or request.user.level &#x3D;&#x3D; &#39;0&#39;:</span><br><span class="line">        target_comment.deleted &#x3D; True</span><br><span class="line">        target_comment.save()</span><br><span class="line">        post.save()</span><br><span class="line">        data &#x3D; &#123;</span><br><span class="line">            &#39;comment_id&#39;: comment_id,</span><br><span class="line">        &#125;</span><br><span class="line">        return HttpResponse(json.dumps(data, cls&#x3D;DjangoJSONEncoder), content_type &#x3D; &quot;application&#x2F;json&quot;)</span><br></pre></td></tr></table></figure><p>댓글삭제 요청이 들어왔을 경우 pk값으로 받은 게시글의 id를 사용해 게시글을 찾아내고, 댓글의 id값인 comment_id와 비교하여 삭제요청을 한 사용자의 등급이 관리자거나 글쓴이 본인일 경우에 댓글의 <strong>deleted</strong> 필드를 <strong>True</strong>로 변경합니다. templates에서는 deleted가 True인 댓글을 템플릿 필터를 활용해 삭제메세지로 표시할 수 있게 됩니다.</p><h2 id="5-urls-py-작성"><a href="#5-urls-py-작성" class="headerlink" title="5. urls.py 작성"></a>5. urls.py 작성</h2><p>구현한 views를 연결하기 위해 <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 아래와 같이 path를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># free&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;&lt;int:pk&gt;&#x2F;comment&#x2F;write&#x2F;&#39;, views.comment_write_view, name&#x3D;&#39;comment_write&#39;),</span><br><span class="line">    path(&#39;&lt;int:pk&gt;&#x2F;comment&#x2F;delete&#x2F;&#39;, views.comment_delete_view, name&#x3D;&#39;comment_delete&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="6-댓글표시-templates-작성"><a href="#6-댓글표시-templates-작성" class="headerlink" title="6. 댓글표시 templates 작성"></a>6. 댓글표시 templates 작성</h2><p>사용자가 게시글을 <strong>GET</strong>으로 접근했을시 보여지는 템플릿을 우선적으로 작성합니다. 템플릿 필터를 활용하여 삭제댓글, 글쓴이 표시를 하고 비동기로 댓글이 append될 <strong>hidden</strong> 타입의 <strong>comment_list</strong> div를 추가합니다.  작성자를 얻기 위해 현재 접속된 사용자를 value값으로 설정합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;free&#x2F;free_detail.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;card&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;card-header&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-12&quot;&gt;</span><br><span class="line">            &#123;% csrf_token %&#125;</span><br><span class="line">            &lt;div class&#x3D;&quot;form-group row&quot;&gt;</span><br><span class="line">                &lt;textarea class&#x3D;&quot;form-control&quot; id&#x3D;&quot;content_id&quot; rows&#x3D;&quot;3&quot; placeholder&#x3D;&quot;댓글을 입력해주세요.&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;text-right&quot; style&#x3D;&quot;float:right&quot;&gt;</span><br><span class="line">                &lt;button id&#x3D;&quot;comment_write&quot; class&#x3D;&quot;btn btn-sm&quot;&gt;댓글달기&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;more_comment&quot;&gt;</span><br><span class="line">            &#123;% if comments %&#125;</span><br><span class="line">                &#123;% for comment in comments %&#125;</span><br><span class="line">                &lt;div id&#x3D;&#39;&#123;&#123; comment.id &#125;&#125;&#39;&gt;</span><br><span class="line">                    &#123;% if comment.deleted %&#125;</span><br><span class="line">                    &lt;span&gt;삭제된 댓글입니다.&lt;&#x2F;span&gt;&lt;hr&gt;</span><br><span class="line">                    &#123;% else %&#125;</span><br><span class="line">                        &#123;% if comment.writer &#x3D;&#x3D; free.writer %&#125;</span><br><span class="line">                        &lt;strong&gt;&#123;&#123; comment.writer &#125;&#125;&amp;nbsp;&lt;span&gt;(글쓴이)&lt;&#x2F;span&gt;&lt;&#x2F;strong&gt;</span><br><span class="line">                        &#123;% else  %&#125;</span><br><span class="line">                        &lt;strong&gt;&#123;&#123; comment.writer &#125;&#125;&lt;&#x2F;strong&gt;</span><br><span class="line">                        &#123;% endif %&#125;</span><br><span class="line">                        &lt;span style&#x3D;&quot;float:right&quot;&gt;&#123;&#123; comment.created &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">                        &#123;% if comment.writer &#x3D;&#x3D; request.user or request.user.level &#x3D;&#x3D; &#39;0&#39; or request.user.level &#x3D;&#x3D; &#39;1&#39; %&#125;</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                            &lt;div style&#x3D;&quot;white-space:pre-wrap; text-align:left;&quot;&gt;&#123;&#123; comment.content &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">                            &lt;div style&#x3D;&quot;text-align: right;&quot;&gt;</span><br><span class="line">                                &lt;a onclick&#x3D;&quot;commentDelete(&#39;&#123;&#123;comment.id&#125;&#125;&#39;);&quot;&gt;댓글삭제&lt;&#x2F;a&gt;</span><br><span class="line">                            &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;hr&gt;</span><br><span class="line">                        &#123;% else %&#125;</span><br><span class="line">                        &lt;div&gt;</span><br><span class="line">                            &lt;div style&#x3D;&quot;white-space:pre-wrap; text-align:left;&quot;&gt;&#123;&#123; comment.content &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;hr&gt;</span><br><span class="line">                        &#123;% endif %&#125;</span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;div class&#x3D;&#39;&#123;&#123; comment.id &#125;&#125;&#39;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">            &lt;input type&#x3D;&quot;hidden&quot; id&#x3D;&quot;comment_writer&quot; value&#x3D;&#123;&#123;request.user&#125;&#125;&gt;</span><br><span class="line">            &lt;div id&#x3D;&quot;comment_list&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="7-댓글쓰기-AJAX-Script-작성"><a href="#7-댓글쓰기-AJAX-Script-작성" class="headerlink" title="7. 댓글쓰기 AJAX Script 작성"></a>7. 댓글쓰기 AJAX Script 작성</h2><p>댓글 달기 button인 comment_write를 click하였을때 실행되는 Ajax Script는 아래와 같습니다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;free&#x2F;free_detail.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    $(document).ready(function () &#123;</span><br><span class="line">        $(&#39;#comment_write&#39;).click(function () &#123;</span><br><span class="line">            var content&#x3D; $(&quot;#content_id&quot;).val();</span><br><span class="line">            var writer&#x3D; $(&quot;#comment_writer&quot;).val();</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type: &quot;POST&quot;,</span><br><span class="line">                url: &quot;&#123;% url &#39;free:comment_write&#39; free.id %&#125;&quot;,</span><br><span class="line">                dataType: &quot;json&quot;,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    &#39;writer&#39;: writer,</span><br><span class="line">                    &#39;content&#39;: content,</span><br><span class="line">                    &#39;csrfmiddlewaretoken&#39;: &#39;&#123;&#123;csrf_token&#125;&#125;&#39;,</span><br><span class="line">                &#125;,</span><br><span class="line">                success: function (response) &#123;</span><br><span class="line">                    if (response.self_comment) &#123;</span><br><span class="line">                        $(&#39;#comment_list&#39;).append(</span><br><span class="line">                           &#39;&lt;div&gt;&lt;div id&#x3D;&#39;+response.comment_id+&#39;&gt;&lt;strong&gt;&#39;+response.writer+&#39;&amp;nbsp;&lt;span&gt;&#39;+response.self_comment+&#39;&lt;&#x2F;span&gt;&lt;&#x2F;strong&gt;&#39;+</span><br><span class="line">                           &#39;&lt;span style&#x3D;&quot;float:right;&quot;&gt;&#39;+response.created+&#39;&lt;&#x2F;span&gt;&#39;+</span><br><span class="line">                           &#39;&lt;div&gt;&lt;div style&#x3D;&quot;white-space:pre-wrap; text-align:left;&quot;&gt;&#39;+response.content+</span><br><span class="line">                           &#39;&lt;&#x2F;div&gt;&lt;div style&#x3D;&quot;text-align:right;&quot;&gt;&lt;a onclick&#x3D;&quot;commentDelete(&#39;+response.comment_id+&#39;);&quot;&gt;댓글삭제&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;hr&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&#39;+response.comment_id+&#39;&gt;&lt;&#x2F;div&gt;&#39;</span><br><span class="line">                        );</span><br><span class="line">                    &#125;</span><br><span class="line">                    else&#123;</span><br><span class="line">                        $(&#39;#comment_list&#39;).append(</span><br><span class="line">                            &#39;&lt;div&gt;&lt;div id&#x3D;&#39;+response.comment_id+&#39;&gt;&lt;strong&gt;&#39;+response.writer+&#39;&lt;&#x2F;strong&gt;&#39;+</span><br><span class="line">                            &#39;&lt;span style&#x3D;&quot;float:right;&quot;&gt;&#39;+response.created+&#39;&lt;&#x2F;span&gt;&#39;+</span><br><span class="line">                            &#39;&lt;div&gt;&lt;div style&#x3D;&quot;white-space:pre-wrap; text-align:left;&quot;&gt;&#39;+response.content+</span><br><span class="line">                            &#39;&lt;&#x2F;div&gt;&lt;div style&#x3D;&quot;text-align:right;&quot;&gt;&lt;a onclick&#x3D;&quot;commentDelete(&#39;+response.comment_id+&#39;);&quot;&gt;댓글삭제&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;hr&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&#39;+response.comment_id+&#39;&gt;&lt;&#x2F;div&gt;&#39;</span><br><span class="line">                        );</span><br><span class="line">                    &#125;</span><br><span class="line">                    $(&#39;#content_id&#39;).val(&quot;&quot;);</span><br><span class="line">                &#125;,</span><br><span class="line">                error: function () &#123;</span><br><span class="line">                    if ($(&#39;#content_id&#39;).val()&#x3D;&#x3D;&quot;&quot;) &#123;</span><br><span class="line">                        alert(&#39;댓글을 입력해주세요.&#39;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>댓글의 내용과 작성자를 이전에 구현한 <strong>comment_write_view</strong>에 <strong>json</strong>형태로 전달합니다. <strong>comment_wirte_view</strong>에서 성공적으로 응답이 오면 본인 글에 댓글을 작성할시 작성자 옆에 (글쓴이)표시를 하기 위해서 self_comment의 여부를 확인하고 hidden type으로 설정해둔 <strong>comment_list</strong>에 적절한 html을 append시킵니다. </p><h2 id="8-댓글삭제-templates-작성"><a href="#8-댓글삭제-templates-작성" class="headerlink" title="8. 댓글삭제 templates 작성"></a>8. 댓글삭제 templates 작성</h2><p>댓글 삭제를 위한 Script는 아래와 같습니다. 사용자가 댓글 삭제를 클릭할 시 confirm 창으로 삭제여부를 확인하고 <strong>comment_delete_view</strong>에서 본인의 댓글인지 확인 후 성공적으로 삭제가 되었을시 templates에서 응답을 받아 replaceWith메소드를 통해 삭제된 댓글입니다.라는 표시를 하게 됩니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;free&#x2F;free_detail.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    function commentDelete(value) &#123;</span><br><span class="line">        var comment_id &#x3D; value;</span><br><span class="line">        var delete_warning &#x3D; confirm(&#39;댓글을 삭제하시겠습니까?&#39;);</span><br><span class="line">        if (delete_warning &#x3D;&#x3D; true) &#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type: &quot;POST&quot;,</span><br><span class="line">                url: &quot;&#123;% url &#39;free:comment_delete&#39; free.id %&#125;&quot;,</span><br><span class="line">                dataType: &quot;json&quot;,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    &#39;comment_id&#39;: comment_id,</span><br><span class="line">                    &#39;csrfmiddlewaretoken&#39;: &#39;&#123;&#123;csrf_token&#125;&#125;&#39;,</span><br><span class="line">                &#125;,</span><br><span class="line">                success: function (response) &#123;</span><br><span class="line">                    $(&#39;#&#39;+response.comment_id).replaceWith(&#39;&lt;span style&#x3D;&quot;color:gray;&quot;&gt;삭제된 댓글입니다.&lt;&#x2F;span&gt;&lt;hr&gt;&#39;);</span><br><span class="line">                &#125;,</span><br><span class="line">                error: function () &#123;</span><br><span class="line">                    alert(&#39;본인 댓글이 아닙니다.&#39;);</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="9-결과"><a href="#9-결과" class="headerlink" title="9. 결과"></a>9. 결과</h2><p><img src="26-1.GIF" alt="django-project-26"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/04/18/django-project-26/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 25. 업로드(MEDIA) 파일 동시 수정 / 삭제 구현</title>
      <link>https://parkhyeonchae.github.io/2020/04/13/django-project-25/</link>
      <guid>https://parkhyeonchae.github.io/2020/04/13/django-project-25/</guid>
      <pubDate>Mon, 13 Apr 2020 13:05:52 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-25-업로드-MEDIA-파일-동시-수정-삭제-구현&quot;&gt;&lt;a href=&quot;#Django-25-업로드-MEDIA-파일-동시-수정-삭제-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 25. 업로드(MEDIA) 파일
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-25-업로드-MEDIA-파일-동시-수정-삭제-구현"><a href="#Django-25-업로드-MEDIA-파일-동시-수정-삭제-구현" class="headerlink" title="Django 25. 업로드(MEDIA) 파일 동시 수정 / 삭제 구현"></a>Django 25. 업로드(MEDIA) 파일 동시 수정 / 삭제 구현</h1><blockquote><p>글 수정, 삭제시 서버단에서도 동시 처리가 되도록 하고 URL로 MEDIA파일 접근을 제한합니다.</p></blockquote><hr><p>이전  <strong><a href="https://parkhyeonchae.github.io/2020/04/12/django-project-24/">파일업로드 / 다운로드 포스팅</a></strong>과 이어집니다.</p><h2 id="1-글-삭제-시-media파일-동시-삭제-구현"><a href="#1-글-삭제-시-media파일-동시-삭제-구현" class="headerlink" title="1. 글 삭제 시 media파일 동시 삭제 구현"></a><strong>1. 글 삭제 시 media파일 동시 삭제 구현</strong></h2><p>업로드된 파일이 있는 게시글을 삭제하거나 수정할 시 FileField에는 파일의 path만 담고 있기 때문에 <strong>Django MEDIA_ROOT</strong>에 저장된 파일자체는 삭제되거나 수정되지 않습니다.</p><p>우선 게시글 객체가 삭제될 시 MEDIA_ROOT의 파일도 삭제되게 하기 위해 아래와 같이 <strong>models.py</strong>의 <strong>Notice</strong>클래스 내에 <strong>delete()</strong> 메소드를 오버라이딩합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;models.py</span><br><span class="line"></span><br><span class="line">class Notice(models.Model):</span><br><span class="line"></span><br><span class="line">    def delete(self, *args, **kargs):</span><br><span class="line">        if self.upload_files:</span><br><span class="line">            os.remove(os.path.join(settings.MEDIA_ROOT, self.upload_files.path))</span><br><span class="line">        super(Notice, self).delete(*args, **kargs)</span><br></pre></td></tr></table></figure><p><strong>view</strong>에서 <strong>delete()</strong> 메소드가 호출되면 업로드 파일의 유무를 체크한 후 파일의 path경로와 일치하는  MEDIA_ROOT의 파일을 삭제합니다.</p><h2 id="2-글-수정-시-media파일-동시-수정-구현"><a href="#2-글-수정-시-media파일-동시-수정-구현" class="headerlink" title="2. 글 수정 시 media파일 동시 수정 구현"></a><strong>2. 글 수정 시 media파일 동시 수정 구현</strong></h2><p>우선 기본적인 구현 방법은 FileField에 변경된 파일이 있거나 업로드된 파일을 취소할 시, 기존에 업로드되어 있던 파일은 앞서 오버라이딩한 <strong>delete()</strong> 메소드로 삭제하고 새로운 파일이 있다면 그 파일을 업로드 하도록 구현합니다.</p><p>글수정 view인 notice_edit_view에 <strong>POST</strong>요청이 들어왔을 시 확인해야할 사항은 <u>사용자가 기존에 첨부한 파일을 업로드 취소</u>하였을 경우와 <u>사용자가 첨부파일을 변경하였을 경우</u> 총 2가지입니다. 이 2가지를 클라이언트에서 처리하여 POST로 요청된 경우 둘 중 하나라도 전달되면 delete() 메소드를 수행합니다. 아래와 같이 <strong>views.py</strong>의 글수정 view인 <strong>notice_edit_view</strong>를 수정합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;views.py</span><br><span class="line"></span><br><span class="line">def notice_edit_view(request, pk):</span><br><span class="line">    notice &#x3D; Notice.objects.get(id&#x3D;pk)</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;POST&quot;:</span><br><span class="line">        if(notice.writer &#x3D;&#x3D; request.user or request.user.level &#x3D;&#x3D; &#39;0&#39;):</span><br><span class="line">            file_change_check &#x3D; request.POST.get(&#39;fileChange&#39;, False)</span><br><span class="line">            file_check &#x3D; request.POST.get(&#39;upload_files-clear&#39;, False)</span><br><span class="line"></span><br><span class="line">            if file_check or file_change_check:</span><br><span class="line">                os.remove(os.path.join(settings.MEDIA_ROOT, notice.upload_files.path))</span><br><span class="line"></span><br><span class="line">            form &#x3D; NoticeWriteForm(request.POST, request.FILES, instance&#x3D;notice)</span><br><span class="line">            if form.is_valid():</span><br><span class="line">                notice &#x3D; form.save(commit &#x3D; False)</span><br><span class="line">                if request.FILES:</span><br><span class="line">                    if &#39;upload_files&#39; in request.FILES.keys():</span><br><span class="line">                        notice.filename &#x3D; request.FILES[&#39;upload_files&#39;].name</span><br><span class="line">                notice.save()</span><br><span class="line">                messages.success(request, &quot;수정되었습니다.&quot;)</span><br><span class="line">                return redirect(&#39;&#x2F;notice&#x2F;&#39;+str(pk))</span><br><span class="line">    else:</span><br><span class="line">        notice &#x3D; Notice.objects.get(id&#x3D;pk)</span><br><span class="line">        if notice.writer &#x3D;&#x3D; request.user or request.user.level &#x3D;&#x3D; &#39;0&#39;:</span><br><span class="line">            form &#x3D; NoticeWriteForm(instance&#x3D;notice)</span><br><span class="line">            context &#x3D; &#123;</span><br><span class="line">                &#39;form&#39;: form,</span><br><span class="line">                &#39;edit&#39;: &#39;수정하기&#39;,</span><br><span class="line">            &#125;</span><br><span class="line">            if notice.filename and notice.upload_files:</span><br><span class="line">                context[&#39;filename&#39;] &#x3D; notice.filename</span><br><span class="line">                context[&#39;file_url&#39;] &#x3D; notice.upload_files.url</span><br><span class="line">            return render(request, &quot;notice&#x2F;notice_write.html&quot;, context)</span><br><span class="line">        else:</span><br><span class="line">            messages.error(request, &quot;본인 게시글이 아닙니다.&quot;)</span><br><span class="line">            return redirect(&#39;&#x2F;notice&#x2F;&#39;+str(pk))</span><br></pre></td></tr></table></figure><p><strong>file_change_check</strong>로 템플릿에서 업로드 파일이 변경되었는지를 확인하고 <strong>file_check</strong>로 기존의 파일을 사용자가 취소했는지 확인합니다.두가지 경우 하나라도 전달되었을 경우 <strong>MEDIA_ROOT</strong>의 파일을 삭제하고 현재 <strong>request.FILES</strong>을 확인하여 다시 파일명과 파일을 저장합니다.</p><p><strong>GET</strong>메소드로 클라이언트에 글 수정 템플릿을 뿌려줄 때 기존에 암호화되어 저장되있는 파일을 원본 파일명으로 출력하기 위해 <strong>filename</strong>과 <strong>file_url</strong>을 <strong>context</strong>에 담아 전달합니다.</p><h2 id="3-글-수정-템플릿-수정"><a href="#3-글-수정-템플릿-수정" class="headerlink" title="3. 글 수정 템플릿 수정"></a>3. 글 수정 템플릿 수정</h2><p>방금 글쓰기 view에서 구현한 <strong>file_change_check</strong>를 전달하기 위해 <strong>notice_wirte.html</strong>의 form태그 안에 FileField가 변경되었을 시 checkbox가 checked되는 input태그를 추가합니다. display를 none으로 설정하여 보여지지 않게 하고 view에서 전달받을 수 있도록 지정한 <strong>fileChange</strong>란 name속성을 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_write.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;POST&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;fileChangeCheck&quot; name&#x3D;&quot;fileChange&quot; style&#x3D;&quot;display: none;&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>Django의 FileField로 생성되는 form은 사용자의 입장에서 친절한 형태로 표시되지 않습니다. 그렇기에 <strong>jquery</strong>를 사용하여 FileField로 지정된 form을 사용자가 변경, 삭제할시 적잘한 안내 문구가 출력되도록 아래와 같이 스크립트를 추가합니다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_write.html --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% if filename %&#125;</span><br><span class="line">&lt;script type &#x3D; &quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    $(&#39;[href&#x3D;&quot;&#123;&#123; file_url &#125;&#125;&quot;]&#39;).html(&quot;&#123;&#123; filename &#125;&#125;&quot;);</span><br><span class="line">    $(&#39;#upload_files-clear_id&#39;).css(&#123;opacity:&#39;100&#39;, position:&#39;relative&#39;, &#39;pointer-events&#39;:&#39;auto&#39;&#125;)</span><br><span class="line"></span><br><span class="line">    $(&quot;#id_upload_files&quot;).change(function() &#123;</span><br><span class="line">        if ($(&#39;#id_upload_files&#39;).get(0).files.length &#x3D;&#x3D; 1) &#123;</span><br><span class="line">            $(&quot;.col-sm-12&quot;).contents().get(0).nodeValue &#x3D; &#39;[첨부파일 변경 시 기존 파일은 삭제됩니다.]&#39;</span><br><span class="line">            $(&#39;#upload_files-clear_id&#39;).attr(&quot;checked&quot;, false)</span><br><span class="line">            $(&#39;#upload_files-clear_id&#39;).prev().hide()</span><br><span class="line">            $(&#39;#upload_files-clear_id&#39;).next().hide()</span><br><span class="line">            $(&#39;#upload_files-clear_id&#39;).hide()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(&#39;#upload_files-clear_id&#39;).on(&#39;click&#39;, function()&#123;</span><br><span class="line">        if($(this).prop(&#39;checked&#39;))&#123;</span><br><span class="line">            $(&#39;#id_upload_files&#39;).hide()</span><br><span class="line">            document.getElementById(&#39;id_upload_files&#39;).previousSibling.nodeValue &#x3D; &#39;[업로드 된 첨부파일을 삭제합니다.]&#39;</span><br><span class="line">        &#125; else&#123;</span><br><span class="line">            $(&#39;#id_upload_files&#39;).show()</span><br><span class="line">            document.getElementById(&#39;id_upload_files&#39;).previousSibling.nodeValue &#x3D; &#39;변경: &#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(&#39;#write&#39;).click( function() &#123;</span><br><span class="line">        if($(&#39;#id_upload_files&#39;).get(0).files.length &#x3D;&#x3D; 1)&#123;</span><br><span class="line">            $(&#39;#fileChangeCheck&#39;).attr(&quot;checked&quot;,true)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>글 수정 템플릿에서 FileField로 생성한 업로드파일 취소 input태그의 id는 ‘<strong>필드명-clear_id</strong>‘ 로 지정됩니다. 따라서 기존의 암호화 되어있는 파일명은 opacity 속성을 추가해주어 투명도를 주고, view에서 context로 전달받은 <strong>filename</strong>과 <strong>file_url</strong>을 사용하여 원본파일명으로 표시되도록 구현합니다.</p><p>그리고 FileField로 생성된 타입이 File인 input태그의 id는 ‘<strong>id_필드명</strong>‘ 이므로 change 메소드로 input 태그의 변동사항을 확인하고, file 또한 존재할시 display=none으로 설정해둔 <strong>fileChangeCheck</strong>를 <strong>checked</strong>하여 view에 전달합니다. 스크립트가 잘 적용되었을 시 아래와 같은 결과를 확인하실 수 있습니다.</p><p><img src="25-2.JPG" alt="django-project-25"></p><h2 id="4-URL경로-입력-media-파일-접근-제한"><a href="#4-URL경로-입력-media-파일-접근-제한" class="headerlink" title="4. URL경로 입력 media 파일 접근 제한"></a><strong>4. URL경로 입력 media 파일 접근 제한</strong></h2><p>URL로 MEDIA_ROOT에 접근하여 강제적으로 파일을 다운, 이미지파일 등에 접근하는 것을 방지하기 위해 <strong>urls.py</strong>에 아래와 같이 소스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">from django.conf import settings</span><br><span class="line">from django.conf.urls.static import static</span><br><span class="line">from django.contrib import messages</span><br><span class="line">from django.shortcuts import redirect</span><br><span class="line"></span><br><span class="line">def protected_file(request, path, document_root&#x3D;None):</span><br><span class="line">    messages.error(request, &quot;접근 불가&quot;)</span><br><span class="line">    return redirect(&#39;&#x2F;&#39;)</span><br><span class="line"></span><br><span class="line">urlpatterns +&#x3D; static(settings.MEDIA_URL, protected_file, document_root&#x3D;settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure><p><strong>urlpatterns</strong>에 Media File을 제공하는 패턴을 추가하고 <strong>protected_file</strong> 함수를 구현함으로써 url로 서버상의 MEDIA_ROOT에 접근하는것을 방지합니다.</p><h2 id="5-결과"><a href="#5-결과" class="headerlink" title="5. 결과"></a>5. 결과</h2><p><img src="25-1.GIF" alt="django-project-25"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/04/13/django-project-25/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 24. 파일 업로드 암호화 / 한글명 파일 다운로드 구현</title>
      <link>https://parkhyeonchae.github.io/2020/04/12/django-project-24/</link>
      <guid>https://parkhyeonchae.github.io/2020/04/12/django-project-24/</guid>
      <pubDate>Sun, 12 Apr 2020 03:05:44 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-24-파일-업로드-암호화-한글명-파일-다운로드-구현&quot;&gt;&lt;a href=&quot;#Django-24-파일-업로드-암호화-한글명-파일-다운로드-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 24. 파일 업로드 암호화 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-24-파일-업로드-암호화-한글명-파일-다운로드-구현"><a href="#Django-24-파일-업로드-암호화-한글명-파일-다운로드-구현" class="headerlink" title="Django 24. 파일 업로드 암호화 / 한글명 파일 다운로드 구현"></a>Django 24. 파일 업로드 암호화 / 한글명 파일 다운로드 구현</h1><blockquote><p>파일 업로드 / 다운로드를 구현하고 파일명 암호화 저장, 한글명 파일 다운 등을 구현합니다.</p></blockquote><hr><p>프로젝트에서 파일 업로드 / 다운로드 구현 로직은 다음과 같습니다.</p><ol><li><strong>파일 업로드 시 서버에 파일명을 암호화시켜 업로드한다.</strong></li><li><strong>파일 업로드 시 서버 MEDIA_ROOT에 ‘’년, 월, 일’’ 디렉토리 별로 저장한다.</strong></li><li><strong>클라이언트에 파일명을 보여주기 위해 게시글 작성시 파일명을 따로 저장한다.</strong></li><li><strong>한글명 파일 다운로드가 가능하도록 구현한다.</strong></li><li><strong>글 수정, 삭제 시 서버 MEDIA_ROOT에 있는 암호화된 파일들도 동시 수정, 삭제 처리한다.</strong></li><li><strong>URL 강제 입력으로 첨부된 게시글 다운로드, 즉 MEDIA_URL에 접근하지 못하게 한다.</strong></li></ol><p>게시판의 첨부파일 업로드 기능을 구현하기 위해서 <strong>Django FileField</strong>를 사용합니다. 포스팅할 내용이 많아 업로드, 다운로드를 나누어 포스팅할 예정이었으나, 업로드와 다운로드는 합치고 다음 포스팅에 클라이언트단에서 게시글이 삭제되거나 수정되었을시 서버쪽 MEDIA_ROOT에서도 암호화되어 저장된 미디어파일들이 동시에 수정, 삭제되도록 구현하는것을 포스팅하겠습니다.</p><p><em>이번 포스팅 (Django 24) : 위의 구현 로직 1번, 2번, 3번, 4번</em></p><p><em>다음 포스팅 (Django 25) : 위의 구현 로직 5번, 6번</em></p><h2 id="1-MEDIA-URL-설정"><a href="#1-MEDIA-URL-설정" class="headerlink" title="1. MEDIA_URL 설정"></a>1. MEDIA_URL 설정</h2><p>포스팅 초기, 프로젝트 세팅하기 부분에서 미리 설정해두었지만 자세한 설명을 위해 다시 한번 언급하겠습니다. <strong>Django</strong>의 <strong>media파일</strong>이란, 모델에서 FileField로 지정된 필드를 통해 접근하고 저장되는 파일들입니다. <u>쉽게 말해 업로드된 파일은 MEDIA_ROOT에 저장되고</u>, <u>파일을 요청할 시 MEDIA_URL로 접근하게 됩니다</u>. <strong>settings.py</strong>에 아래와 같이 경로를 추가하고, 상단 루트에 <strong>media폴더</strong>를 생성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cs_web&#x2F;settings.py</span><br><span class="line"></span><br><span class="line">MEDIA_URL &#x3D; &#39;&#x2F;media&#x2F;&#39;</span><br><span class="line">MEDIA_ROOT &#x3D; os.path.join(BASE_DIR, &#39;media&#39;)</span><br></pre></td></tr></table></figure><h2 id="2-파일명-암호화-날짜별-저장경로-구현"><a href="#2-파일명-암호화-날짜별-저장경로-구현" class="headerlink" title="2. 파일명 암호화 / 날짜별 저장경로 구현"></a>2. 파일명 암호화 / 날짜별 저장경로 구현</h2><p>Django의 <strong>FileField</strong>는 <strong>upload_to</strong> 옵션을 지정해줌으로써 MEDIA_ROOT 내 저장될 경로를 설정해줄수 있습니다. FileField를 상속받는 ImageFiled 또한 같이 적용됨으로 이미지 첨부만 구현할 때에는 FileFiled 대신 ImageFiled를 사용합니다.</p><p><strong>upload_to</strong> 옵션은 <strong>models.FileField(upload_to=”%Y/%m%/d”)</strong>와 같은 형식으로 사용할 수 있습니다. 하지만 따로 함수로 구현하여 저장경로 설정 뿐아니라 파일명을 암호화하여 서버에 저장시키기 위해 아래와 같이 <strong>models.py</strong>의 모델 클래스 위에 <strong>get_file_path</strong>라는 함수를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;models.py</span><br><span class="line"></span><br><span class="line">from uuid import uuid4</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">def get_file_path(instance, filename):</span><br><span class="line">    ymd_path &#x3D; datetime.now().strftime(&#39;%Y&#x2F;%m&#x2F;%d&#39;)</span><br><span class="line">    uuid_name &#x3D; uuid4().hex</span><br><span class="line">    return &#39;&#x2F;&#39;.join([&#39;upload_file&#x2F;&#39;, ymd_path, uuid_name])</span><br></pre></td></tr></table></figure><p>객체와, 파일명필드를 인자로 받고 ymd_path에 현재 날짜를 지정된 형식으로 포맷합니다. 또한 파일명을 고유한 문자열로 암호화하기 위해 <strong>python uuid</strong>를 import하여 사용합니다.</p><h2 id="3-파일-파일명-모델-추가"><a href="#3-파일-파일명-모델-추가" class="headerlink" title="3. 파일 / 파일명  모델 추가"></a>3. 파일 / 파일명  모델 추가</h2><p>공지사항 게시판 앱에 파일 필드와 파일명 필드를 추가하기 위해 <strong>models.py</strong>를 수정합니다. 아래와 같이 <strong>upload_files</strong>, <strong>filename</strong>을 추가하고 upload_fils필드에 방금 구현한 get_file_path를 upload_to 옵션으로 지정합니다. 이제 upload_files에 접근하면 get_file_path로 구현한 경로, 파일명으로 MEDIA_ROOT에 저장되게 됩니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;models.py</span><br><span class="line"></span><br><span class="line">upload_files &#x3D; models.FileField(upload_to&#x3D;get_file_path, null&#x3D;True, blank&#x3D;True, verbose_name&#x3D;&#39;파일&#39;)</span><br><span class="line">filename &#x3D; models.CharField(max_length&#x3D;64, null&#x3D;True, verbose_name&#x3D;&#39;첨부파일명&#39;)</span><br></pre></td></tr></table></figure><p><em>(게시판에 Summernote 텍스트에디터를 적용하였을 경우 Summernote의 이미지업로드가 Django의 FileField에 추가되는 버그가 있을 수 있습니다. Summernote 최신버전을 이용하시거나 Summernote용 FileField를 추가로 생성하시면 됩니다.)</em></p><p>Image파일을 프로세싱하기 위해 python 라이브러리인 <strong>pillow</strong>를 설치해주고 migrate를 진행합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip install pillow</span><br><span class="line">$ python manage.py makemigrations notice</span><br><span class="line">$ python manage.py migrate</span><br></pre></td></tr></table></figure><p>파일 업로드 기능을 구현한 후 파일 업로드를 하면 MEDIA_ROOT에 아래처럼 get_file_path에서 구현한대로 파일명이 암호화되고, 날짜별로 저장되게 됩니다.</p><p><img src="24-2.JPG" alt="django-project-24"></p><h2 id="4-forms-py-파일필드-추가"><a href="#4-forms-py-파일필드-추가" class="headerlink" title="4. forms.py 파일필드 추가"></a>4. forms.py 파일필드 추가</h2><p>파일 업로드 기능을 view에 추가하기 위해 우선 글쓰기 폼인 NoticeWriteForm Meta클래스에 upload_fileds를 추가합니다. 아래와 같이 <strong>forms.py</strong>를 수정합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">class NoticeWriteForm(forms.ModelForm):</span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        super(NoticeWriteForm, self).__init__(*args, **kwargs)</span><br><span class="line">        self.fields[&#39;title&#39;].label &#x3D; &#39;제목&#39;</span><br><span class="line">        self.fields[&#39;title&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;placeholder&#39;: &#39;제목을 입력해주세요.&#39;,</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">            &#39;autofocus&#39;: True,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; Notice</span><br><span class="line">        fields &#x3D; [&#39;title&#39;, &#39;content&#39;, &#39;top_fixed&#39;, &#39;upload_files&#39;]</span><br></pre></td></tr></table></figure><h2 id="5-글작성-view-파일명-저장-추가"><a href="#5-글작성-view-파일명-저장-추가" class="headerlink" title="5. 글작성 view 파일명 저장 추가"></a>5. 글작성 view 파일명 저장 추가</h2><p>업로드된 파일이 암호화되어 저장되어도 파일이 있는 게시글에 접근했을때 그 파일 path를 따라 암호화된 파일명으로 나타내지 않고 원본 파일명 그대로 출력하기 위해 <strong>POST</strong>요청시 <strong>filename</strong>필드에 파일명을 저장하는 소스를 아래와 같이 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;views.py</span><br><span class="line"></span><br><span class="line">def notice_write_view(request):</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;POST&quot;:</span><br><span class="line">        form &#x3D; NoticeWriteForm(request.POST, request.FILES)</span><br><span class="line">        user &#x3D; request.session[&#39;user_id&#39;]</span><br><span class="line">        user_id &#x3D; User.objects.get(user_id &#x3D; user)</span><br><span class="line"></span><br><span class="line">        if form.is_valid():</span><br><span class="line">            notice &#x3D; form.save(commit &#x3D; False)</span><br><span class="line">            notice.writer &#x3D; user_id</span><br><span class="line">            if request.FILES:</span><br><span class="line">                if &#39;upload_files&#39; in request.FILES.keys():</span><br><span class="line">                    notice.filename &#x3D; request.FILES[&#39;upload_files&#39;].name</span><br><span class="line">            notice.save()</span><br><span class="line">            return redirect(&#39;notice:notice_list&#39;)</span><br><span class="line">    else:</span><br><span class="line">        form &#x3D; NoticeWriteForm()</span><br><span class="line"></span><br><span class="line">    return render(request, &quot;notice&#x2F;notice_write.html&quot;, &#123;&#39;form&#39;: form&#125;)</span><br></pre></td></tr></table></figure><p><strong>POST</strong>로 폼이 제출되면 업로드된 파일은 request.POST가 아닌 <strong>request.FILES</strong>를 통해 전달됩니다. 따라서 NoticeWriteForm의 인자에 <strong>request.FILES</strong>를 추가합니다. form의 is_valid가 통과되면 요청된 파일들 중에 upload_files를 찾아 그 파일의 파일명을 필드에 저장하게 됩니다.</p><p>Django의 <strong>request.FILES</strong>는 딕셔너리형으로 반환하기에 summernote와 같은 에디터의 이미지업로드와 중복되지 않도록 지정된 Field인 upload_files를 <strong>key</strong>로 찾아 그 파일명을 filename필드에 저장합니다. </p><h2 id="6-글작성-templates-파일-첨부하기-추가"><a href="#6-글작성-templates-파일-첨부하기-추가" class="headerlink" title="6. 글작성 templates 파일 첨부하기 추가"></a>6. 글작성 templates 파일 첨부하기 추가</h2><p>글작성 템플릿 하단부에 파일첨부하기 영역을 생성하기 위해 <strong>notice_write.html</strong>에 아래와 같이 upload_files를 폼으로 전달받는 소스를 추가합니다. 또한 POST로 파일을 넘기기 위해서 <strong>enctype</strong> 설정을 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_write.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;POST&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;card-footer&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">            &#123;&#123; form.upload_files &#125;&#125;</span><br><span class="line">            &lt;small id&#x3D;&quot;help&quot; class&#x3D;&quot;form-text text-muted&quot;&gt;</span><br><span class="line">                [파일 업로드]&amp;nbsp;첨부할 파일을 업로드해주세요. 여러 파일은 압축해서 업로드해주세요.</span><br><span class="line">            &lt;&#x2F;small&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p><em>(FileField는 브라우저 내장 기능이므로 style 지정 등 커스텀이 불가능합니다. 파일업로드 버튼의 색상, Text 등만 커스텀을 원할 시 opacity와 z-index를 설정하고 그 위에 임의로 생성한 버튼을 겹치는 방법이 있습니다.)</em></p><h2 id="7-한글명-첨부파일-다운로드-구현"><a href="#7-한글명-첨부파일-다운로드-구현" class="headerlink" title="7. 한글명 첨부파일 다운로드 구현"></a>7. 한글명 첨부파일 다운로드 구현</h2><p>파일 업로드 구현이 끝났으므로 이제 업로드된 파일을 다운로드 하기 위한 view를 구현합니다. 한글명으로된 파일도 다운로드가 가능하도록 아래와 같이 <strong>views.py</strong>에 인코딩 위한 각 모듈들을 import 한 후 소스를 작성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;views.py</span><br><span class="line"></span><br><span class="line">import urllib</span><br><span class="line">import os</span><br><span class="line">from django.http import HttpResponse, Http404</span><br><span class="line">import mimetypes</span><br><span class="line"></span><br><span class="line">@login_message_required</span><br><span class="line">def notice_download_view(request, pk):</span><br><span class="line">    notice &#x3D; get_object_or_404(Notice, pk&#x3D;pk)</span><br><span class="line">    url &#x3D; notice.upload_files.url[1:]</span><br><span class="line">    file_url &#x3D; urllib.parse.unquote(url)</span><br><span class="line">    </span><br><span class="line">    if os.path.exists(file_url):</span><br><span class="line">        with open(file_url, &#39;rb&#39;) as fh:</span><br><span class="line">            quote_file_url &#x3D; urllib.parse.quote(notice.filename.encode(&#39;utf-8&#39;))</span><br><span class="line">            response &#x3D; HttpResponse(fh.read(), content_type&#x3D;mimetypes.guess_type(file_url)[0])</span><br><span class="line">            response[&#39;Content-Disposition&#39;] &#x3D; &#39;attachment;filename*&#x3D;UTF-8\&#39;\&#39;%s&#39; % quote_file_url</span><br><span class="line">            return response</span><br><span class="line">        raise Http404</span><br></pre></td></tr></table></figure><p>템플릿의 첨부파일을 클릭할시 매핑된 url을 통해 <strong>notice_download_view</strong>를 호출합니다. 우선 pk값을 통해 notice 객체를 얻고, <strong>url</strong>에 첨부된 파일의 경로를 저장합니다. 그 후 퍼센트 인코딩된 텍스트를 되돌리기 위해 <strong>urllib.parse.unquote</strong>로 변환 후 <strong>file_url</strong>에 저장합니다. (이 포스팅을 따라 파일명을 암호화 처리하여 저장하셨다면 unquote 변환은 생략하셔도 됩니다.) </p><p><strong>os.path.exists</strong>로 파일의 존재유무를 체크하고, 바이너리 파일을 읽기 위해 <strong>rb</strong> 인자로 <strong>fh</strong>를 설정해둡니다. 그 후 filename을 <strong>utf-8</strong>로 인코딩한 파일을 <strong>urllib.parse.quote</strong>를 통해 퍼센트 인코딩으로 변환합니다. response 설정에서 다운로드 받을 타입을 <strong>mimetypes.guses_type</strong>으로 구분할 수 있습니다. (mimetypes 설정 또한 이 포스팅을 따라 파일명 암호화 저장을 구현하셨다면 생략하셔도 괜찮습니다.)</p><p>마지막으로 <strong>Content-Disposition</strong>의 헤더에 <strong>attachment;</strong> 를 추가해줌으로써 유니코드 파일명을 <strong>utf-8</strong>로 인코딩 후 직접 강제 다운로드를 가능할 수 있게 합니다.</p><h2 id="8-urls-py-작성-templates-수정"><a href="#8-urls-py-작성-templates-수정" class="headerlink" title="8. urls.py 작성, templates 수정"></a>8. urls.py 작성, templates 수정</h2><p>구현한 download view를 연결하기 위해  <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 아래와 같이 path를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;download&#x2F;&lt;int:pk&gt;&#39;, views.notice_download_view, name&#x3D;&quot;notice_download&quot;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>첨부된 파일이 있을시 게시글에 표시하고 다운로드 받을 수 있게 <strong>notice_detail.html</strong>의 적절한 위치에 아래의 소스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_detail.html --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% if notice.upload_files %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;col-12 text-right&quot;&gt;</span><br><span class="line">    &lt;span&gt;첨부파일 :&amp;nbsp;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;&#123;% url &#39;notice:notice_download&#39; notice.id %&#125;&quot; &gt;&#123;&#123; notice.filename|truncatechars:25 &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="9-결과"><a href="#9-결과" class="headerlink" title="9. 결과"></a>9. 결과</h2><p><img src="24-1.GIF" alt="django-project-24"></p><p>다음 <strong><a href="https://parkhyeonchae.github.io/2020/04/13/django-project-25/">파일 동시 수정 / 삭제 포스팅</a></strong>에서 글 수정, 삭제 시 서버 MEDIA_ROOT에 있는 암호화된 파일들도 동시 수정, 삭제 처리와 URL 강제 입력으로 첨부된 게시글 다운로드 방지 구현을 하겠습니다.</p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/04/12/django-project-24/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 23. 게시글 수정 / 삭제 구현</title>
      <link>https://parkhyeonchae.github.io/2020/04/11/django-project-23/</link>
      <guid>https://parkhyeonchae.github.io/2020/04/11/django-project-23/</guid>
      <pubDate>Fri, 10 Apr 2020 16:24:32 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-23-게시글-수정-삭제-구현&quot;&gt;&lt;a href=&quot;#Django-23-게시글-수정-삭제-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 23. 게시글 수정 / 삭제 구현&quot;&gt;&lt;/a&gt;Django 23. 게시글 수정
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-23-게시글-수정-삭제-구현"><a href="#Django-23-게시글-수정-삭제-구현" class="headerlink" title="Django 23. 게시글 수정 / 삭제 구현"></a>Django 23. 게시글 수정 / 삭제 구현</h1><blockquote><p>글수정을 구현하고 글을 삭제할 때 경고창을 띄운 후 삭제하도록 구현합니다.</p></blockquote><hr><h2 id="1-글-수정-View-작성"><a href="#1-글-수정-View-작성" class="headerlink" title="1. 글 수정 View 작성"></a>1. 글 수정 View 작성</h2><p>이 프로젝트에서 글을 수정할 수 있는 권한은 최고권한인 level 0의 개발자 권한과, 글 작성자 본인으로 설정하고, 이전에 생성한 글쓰기 폼인 <strong>noticeWriteView</strong>를 사용하여 구현합니다. <strong>notice app</strong>의 <strong>views.py</strong>에 아래의 소스를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;views.py</span><br><span class="line"></span><br><span class="line">@login_message_required</span><br><span class="line">def notice_edit_view(request, pk):</span><br><span class="line">    notice &#x3D; Notice.objects.get(id&#x3D;pk)</span><br><span class="line">    </span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;POST&quot;:</span><br><span class="line">        if(notice.writer &#x3D;&#x3D; request.user or request.user.level &#x3D;&#x3D; &#39;0&#39;):</span><br><span class="line">            form &#x3D; NoticeWriteForm(request.POST, instance&#x3D;notice)</span><br><span class="line">            if form.is_valid():</span><br><span class="line">                notice &#x3D; form.save(commit &#x3D; False)</span><br><span class="line">                notice.save()</span><br><span class="line">                messages.success(request, &quot;수정되었습니다.&quot;)</span><br><span class="line">                return redirect(&#39;&#x2F;notice&#x2F;&#39;+str(pk))</span><br><span class="line">    else:</span><br><span class="line">        notice &#x3D; Notice.objects.get(id&#x3D;pk)</span><br><span class="line">        if notice.writer &#x3D;&#x3D; request.user or request.user.level &#x3D;&#x3D; &#39;0&#39;:</span><br><span class="line">            form &#x3D; NoticeWriteForm(instance&#x3D;notice)</span><br><span class="line">            context &#x3D; &#123;</span><br><span class="line">                &#39;form&#39;: form,</span><br><span class="line">                &#39;edit&#39;: &#39;수정하기&#39;,</span><br><span class="line">            &#125;</span><br><span class="line">            return render(request, &quot;notice&#x2F;notice_write.html&quot;, context)</span><br><span class="line">        else:</span><br><span class="line">            messages.error(request, &quot;본인 게시글이 아닙니다.&quot;)</span><br><span class="line">            return redirect(&#39;&#x2F;notice&#x2F;&#39;+str(pk))</span><br></pre></td></tr></table></figure><p>로그인한 사용자만 접근이 가능하도록 decorator를 추가하고, 글 수정을 개발자와 글작성자만 가능하게 하기 위해 <strong>GET</strong>, <strong>POST</strong> 요청 후에 검사를 진행하고 현재 접속 사용자와 글의 작성자가 일치하지 않으면 에러 메세지를 출력합니다</p><p>글 수정 view는 해당 게시글의 <strong>pk</strong>값인 <strong>id</strong>를 파라미터로 받습니다. 사용자가 게시글에서 글 수정 버튼을 클릭할 시 <strong>GET</strong>으로 글쓰기 폼을 context에 담아 넘겨줍니다. 기존의 제목과 내용 등 값들을 그대로 넘겨주기 위해 <strong>instance = 객체</strong> 형식으로 폼을 전달합니다. 또한 ‘’작성하기’’ 버튼 Text 대신 ‘’수정하기’’로 변경하기 위해 context에 담아 템플릿에 전달합니다.</p><p>글 수정 <strong>POST</strong>요청 또한 마찬가지로 권한 검사를 진행한 후 폼에 입력된 값들을 전달받아 is_valid가 통과되면 저장 후 성공 메세지를 출력합니다.</p><h2 id="2-글-삭제-View-작성"><a href="#2-글-삭제-View-작성" class="headerlink" title="2. 글 삭제 View 작성"></a>2. 글 삭제 View 작성</h2><p>글 삭제 view 또한 글 수정과 마찬가지로 게시글의 <strong>pk</strong>값을 파라미터로 받고 권한 검사를 진행합니다. 아래와 같이 DB의 해당 row객체를 삭제하기 위해 <strong>delete()</strong> 메소드를 사용하는 소스를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;views.py</span><br><span class="line"></span><br><span class="line">@login_message_required</span><br><span class="line">def notice_delete_view(request, pk):</span><br><span class="line">    notice &#x3D; Notice.objects.get(id&#x3D;pk)</span><br><span class="line">    if notice.writer &#x3D;&#x3D; request.user or request.user.level &#x3D;&#x3D; &#39;0&#39;:</span><br><span class="line">        notice.delete()</span><br><span class="line">        messages.success(request, &quot;삭제되었습니다.&quot;)</span><br><span class="line">        return redirect(&#39;&#x2F;notice&#x2F;&#39;)</span><br><span class="line">    else:</span><br><span class="line">        messages.error(request, &quot;본인 게시글이 아닙니다.&quot;)</span><br><span class="line">        return redirect(&#39;&#x2F;notice&#x2F;&#39;+str(pk))</span><br></pre></td></tr></table></figure><h2 id="3-본인-게시글-확인-context-추가"><a href="#3-본인-게시글-확인-context-추가" class="headerlink" title="3. 본인 게시글 확인 context 추가"></a>3. 본인 게시글 확인 context 추가</h2><p>사용자가 특정 게시글에 접근했을때 글 작성자 본인이 아니면 수정과 삭제 버튼을 보이지 않게 하기 위해 게시글상세보기 포스팅에서 구현한 <strong>notice_detal_view</strong>에 아래의 소스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;views.py</span><br><span class="line"></span><br><span class="line">def notice_detail_view(request, pk):</span><br><span class="line">    notice &#x3D; get_object_or_404(Notice, pk&#x3D;pk)</span><br><span class="line"></span><br><span class="line">    if request.user &#x3D;&#x3D; notice.writer:</span><br><span class="line">        notice_auth &#x3D; True</span><br><span class="line">    else:</span><br><span class="line">        notice_auth &#x3D; False</span><br><span class="line"></span><br><span class="line">    context &#x3D; &#123;</span><br><span class="line">        &#39;notice&#39;: notice,</span><br><span class="line">        &#39;notice_auth&#39;: notice_auth,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>해당 게시글의 작성자인 notice.writer와 현재 접속 사용자인 request.user를 비교하여 일치하면 context로 <strong>True</strong>를 전달하고, 불일치시 <strong>False</strong>를 전달합니다.</p><h2 id="4-urls-py-작성"><a href="#4-urls-py-작성" class="headerlink" title="4. urls.py 작성"></a>4. urls.py 작성</h2><p>글 수정 view와 글 삭제 view를 연결하기 위해 <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 아래의 경로를 추가합니다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;&lt;int:pk&gt;&#x2F;edit&#x2F;&#39;, views.notice_edit_view, name&#x3D;&#39;notice_edit&#39;),</span><br><span class="line">    path(&#39;&lt;int:pk&gt;&#x2F;delete&#x2F;&#39;, views.notice_delete_view, name&#x3D;&#39;notice_delete&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="5-templates-수정"><a href="#5-templates-수정" class="headerlink" title="5. templates 수정"></a>5. templates 수정</h2><p>게시글의 작성자가 아니라면 수정, 삭제버튼이 생성되지 않게 하기 위해 앞서 context에 담아 전달받은 <strong>notice_auth</strong>를 사용합니다. 이전에 생성한 <strong>notice_detail.html</strong>에 아래의 소스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_detail.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if notice_auth or request.user.level &#x3D;&#x3D; &#39;0&#39; %&#125;</span><br><span class="line">    &lt;button class&#x3D;&quot;btn btn-sm&quot; onclick&#x3D;&quot;location.href&#x3D;&#39;&#x2F;notice&#x2F;&#123;&#123; notice.id &#125;&#125;&#x2F;edit&#x2F;&#39;&quot;&gt;수정&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;btn btn-sm&quot; data-toggle&#x3D;&quot;modal&quot; data-target&#x3D;&quot;#delete_modal&quot;&gt;삭제&lt;&#x2F;button&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>해당 게시글의 작성자가 아니라면 <strong>notice_auth</strong>가 <strong>False</strong>가 되어 수정과 삭제 버튼이 출력되지 않습니다. <strong>수정 버튼</strong>은 onclick 이벤트로 해당 게시글의 id값 경로로 이동할 수 있게 하고, <strong>삭제 버튼</strong>은 사용자가 삭제버튼을 클릭할 시 바로 삭제되지 않고 삭제경고창을 출력 후 진행하기 위해 <strong>Bootstrap modal</strong>을 활용합니다.</p><p><strong>notice_wirite.html</strong>에 아래의 소스를 추가하여 앞서 구현한 글 수정 view에서 context로 전달된 edit 객체를 사용해 수정하기 상태라면 작성하기 텍스트 대신 수정하기 텍스트로 표시되게 합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_write.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if edit %&#125;</span><br><span class="line">    &lt;button type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-sm&quot;&gt;&#123;&#123; edit &#125;&#125;&lt;&#x2F;button&gt;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    &lt;button type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-sm&quot;&gt;작성하기&lt;&#x2F;button&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="6-글-삭제-경고창-구현"><a href="#6-글-삭제-경고창-구현" class="headerlink" title="6. 글 삭제 경고창 구현"></a>6. 글 삭제 경고창 구현</h2><p>삭제 버튼을 클릭시 팝업되는 modal창 소스는 아래와 같습니다. <strong>notice_detail.html</strong>에 해당 게시글 id값의 삭제 url로 이동하는 스크립트와 함께 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_detail.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;delete_modal&quot; class&#x3D;&quot;modal fade&quot; tabindex&#x3D;&quot;-1&quot; role&#x3D;&quot;dialog&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;modal-dialog&quot; role&#x3D;&quot;document&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;modal-content&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;modal-header&quot;&gt;</span><br><span class="line">                &lt;h5 class&#x3D;&quot;modal-title&quot;&gt;삭제경고&lt;&#x2F;h5&gt;</span><br><span class="line">                &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;close&quot; data-dismiss&#x3D;&quot;modal&quot; aria-label&#x3D;&quot;Close&quot;&gt;</span><br><span class="line">                    &lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;times;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;modal-body&quot;&gt;</span><br><span class="line">                &lt;p&gt;게시글을 삭제하시겠습니까?&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;modal-footer&quot;&gt;</span><br><span class="line">                &lt;button onclick&#x3D;&quot;delete_modal()&quot; type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-dark&quot;&gt;삭제하기&lt;&#x2F;button&gt;</span><br><span class="line">                &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-light&quot; data-dismiss&#x3D;&quot;modal&quot;&gt;취소하기&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    function delete_modal() &#123;</span><br><span class="line">        location.replace(&#39;&#x2F;notice&#x2F;&#123;&#123; notice.id &#125;&#125;&#x2F;delete&#x2F;&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="7-결과"><a href="#7-결과" class="headerlink" title="7. 결과"></a>7. 결과</h2><p><img src="23-1.GIF" alt="django-project-23"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/04/11/django-project-23/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 22. 게시글 상단에 표시하기 구현</title>
      <link>https://parkhyeonchae.github.io/2020/04/09/django-project-22/</link>
      <guid>https://parkhyeonchae.github.io/2020/04/09/django-project-22/</guid>
      <pubDate>Thu, 09 Apr 2020 11:09:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-22-게시글-상단에-표시하기-구현&quot;&gt;&lt;a href=&quot;#Django-22-게시글-상단에-표시하기-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 22. 게시글 상단에 표시하기 구현&quot;&gt;&lt;/a&gt;Django 22.
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-22-게시글-상단에-표시하기-구현"><a href="#Django-22-게시글-상단에-표시하기-구현" class="headerlink" title="Django 22. 게시글 상단에 표시하기 구현"></a>Django 22. 게시글 상단에 표시하기 구현</h1><blockquote><p>공지사항이나 중요한 글을 게시글 리스트 상단에 추가로 표시할 수 있도록 구현합니다.</p></blockquote><hr><h2 id="1-forms-py-수정"><a href="#1-forms-py-수정" class="headerlink" title="1. forms.py 수정"></a>1. forms.py 수정</h2><p>중요한 글을 상단에 고정시키기 위해 이전 16번 포스팅글에서 BooleanField로 생성한 <strong>top_fixed </strong>필드를 활용합니다. 이 프로젝트의 상단고정 표시조건은 다음과 같습니다.</p><ol><li><strong>상단표시 체크를 하면 기존 리스트에 게시글을 표시하되, 상단에 추가로 같은 글을 고정시킨다.</strong></li><li><strong>페이지를 넘겨도 상단고정 게시글은 표시되게 한다.</strong></li><li><strong>게시글 검색을 했을시 검색결과만 표시되게 한다.</strong></li></ol><p>위 조건에 맞게 구현하기 위해 우선 글쓰기폼인 <strong>NoticeWriteForm</strong>의 Meta클래스에 <strong>top_fixed </strong>필드를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">class NoticeWriteForm(forms.ModelForm):</span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        super(NoticeWriteForm, self).__init__(*args, **kwargs)</span><br><span class="line">        self.fields[&#39;title&#39;].label &#x3D; &#39;제목&#39;</span><br><span class="line">        self.fields[&#39;title&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;placeholder&#39;: &#39;제목을 입력해주세요.&#39;,</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">            &#39;autofocus&#39;: True,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; Notice</span><br><span class="line">        fields &#x3D; [&#39;title&#39;, &#39;content&#39;, &#39;top_fixed&#39;]</span><br></pre></td></tr></table></figure><h2 id="2-상단고정-체크박스-추가"><a href="#2-상단고정-체크박스-추가" class="headerlink" title="2. 상단고정 체크박스 추가"></a>2. 상단고정 체크박스 추가</h2><p>이전에 생성해둔 글쓰기 템플릿인 <strong>notice_wirte.html</strong>에 아래와 같이 폼으로 넘어온 <strong>top_fixed</strong>를 적절한 위치에 추가합니다. 프로젝트에서는 작성하기 버튼 좌측에 위치하였습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_write.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;label&gt;</span><br><span class="line">    &#123;&#123; form.top_fixed &#125;&#125;</span><br><span class="line">    &lt;span&gt;상단에 표시하기&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;label&gt;</span><br></pre></td></tr></table></figure><h2 id="3-ListView-수정"><a href="#3-ListView-수정" class="headerlink" title="3. ListView 수정"></a>3. ListView 수정</h2><p>상단표시가 된 게시글을 글리스트에 출력하기 위해 이전에 구현한 <strong>NoticeListView</strong>를 수정합니다. <strong>get_context_data</strong> 함수에 아래의 소스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;views.py</span><br><span class="line"></span><br><span class="line">class NoticeListView(ListView):</span><br><span class="line">def get_context_data(self, **kwargs):</span><br><span class="line">    notice_fixed &#x3D; Notice.objects.filter(top_fixed&#x3D;True).order_by(&#39;-registered_date&#39;)</span><br><span class="line">    context[&#39;notice_fixed&#39;] &#x3D; notice_fixed</span><br></pre></td></tr></table></figure><p>공지사항 게시판 모델인 Notice 모델에 필터를 걸어 <strong>top_fixed</strong>가 <strong>True</strong>인 게시글 쿼리셋을 가져온 후 context에 추가하여 템플릿에 전달합니다.</p><h2 id="4-List-템플릿-수정"><a href="#4-List-템플릿-수정" class="headerlink" title="4. List 템플릿 수정"></a>4. List 템플릿 수정</h2><p><strong>notice_list.html</strong>의 <strong>thead</strong>부분에 context로 넘어온 상단고정 게시글을 출력하기 위해 아래와 같이 소스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_list.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;thead&gt;</span><br><span class="line">    &lt;tr class&#x3D;&quot;text-center&quot;&gt;</span><br><span class="line">        &lt;th&gt;번호&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;th&gt;제목&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;th&gt;작성자&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;th&gt;등록일&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;th&gt;조회수&lt;&#x2F;th&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &#123;% if q %&#125;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    &#123;% if notice_fixed %&#125;</span><br><span class="line">    &#123;% for notice in notice_fixed %&#125;</span><br><span class="line">    &lt;tr class&#x3D;&quot;table-secondary text-center&quot; onclick&#x3D;&quot;location.href&#x3D;&#39;&#x2F;notice&#x2F;&#123;&#123; notice.id &#125;&#125;&#x2F;&#39;&quot;&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123; notice.id &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123; notice.title|truncatechars:30 &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123; notice.writer &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123; notice.registered_date|date:&#39;Y. m. d&#39; &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123; notice.hits &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;thead&gt;</span><br></pre></td></tr></table></figure><p>사용자가 게시글을 검색할 시 상단고정 게시글은 표시되지 않게 하기 위해 조건문을 걸고, 상단고정임을 알리는 적절한 Style의 클래스를 추가합니다.</p><h2 id="5-결과"><a href="#5-결과" class="headerlink" title="5. 결과"></a>5. 결과</h2><p><img src="22-1.GIF" alt="django-project-22"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/04/09/django-project-22/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 21. 게시글 작성 구현 / SUMMERNOTE 적용</title>
      <link>https://parkhyeonchae.github.io/2020/04/08/django-project-21/</link>
      <guid>https://parkhyeonchae.github.io/2020/04/08/django-project-21/</guid>
      <pubDate>Wed, 08 Apr 2020 10:58:13 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-21-게시글-작성-구현-SUMMERNOTE-적용&quot;&gt;&lt;a href=&quot;#Django-21-게시글-작성-구현-SUMMERNOTE-적용&quot; class=&quot;headerlink&quot; title=&quot;Django 21. 게시글 작성 구현 / SUM
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-21-게시글-작성-구현-SUMMERNOTE-적용"><a href="#Django-21-게시글-작성-구현-SUMMERNOTE-적용" class="headerlink" title="Django 21. 게시글 작성 구현 / SUMMERNOTE 적용"></a>Django 21. 게시글 작성 구현 / SUMMERNOTE 적용</h1><blockquote><p>WYSIWYG 텍스트에디터인 Summernote를 적용하여 게시판 글쓰기를 구현합니다.</p></blockquote><hr><h2 id="1-forms-py-생성"><a href="#1-forms-py-생성" class="headerlink" title="1. forms.py 생성"></a>1. forms.py 생성</h2><p>글 리스트, 상세보기 구현이 완료되었으므로 게시글 작성을 구현하기 위해 글쓰기 폼을 생성합니다. <strong>notice</strong>앱에 <strong>forms.py</strong> 파일을 생성하고 <strong>ModelForm</strong>을 사용해 아래와 같이 form을 생성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">from django import forms</span><br><span class="line">from .models import Notice</span><br><span class="line"></span><br><span class="line">class NoticeWriteForm(forms.ModelForm):</span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        super(NoticeWriteForm, self).__init__(*args, **kwargs)</span><br><span class="line">        self.fields[&#39;title&#39;].label &#x3D; &#39;제목&#39;</span><br><span class="line">        self.fields[&#39;title&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;placeholder&#39;: &#39;제목을 입력해주세요.&#39;,</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">            &#39;autofocus&#39;: True,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; Notice</span><br><span class="line">        fields &#x3D; [&#39;title&#39;, &#39;content&#39;]</span><br></pre></td></tr></table></figure><p>form에 사용할 모델과 필드를 결정하는 Meta클래스 쪽에 제목과, 내용 필드를 추가하되, 게시글작성의 내용부분은 <strong>위지위그 텍스트에디터</strong>를 적용하므로 init메소드에는 title필드만 추가하도록 합니다.</p><h2 id="2-views-py-작성"><a href="#2-views-py-작성" class="headerlink" title="2. views.py 작성"></a>2. views.py 작성</h2><p><strong>views.py</strong>에 아래와 같이 글쓰기를 위한 view를 작성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from .models import Notice</span><br><span class="line">from users.models import User</span><br><span class="line">from django.shortcuts import redirect</span><br><span class="line">from .forms import NoticeWriteForm</span><br><span class="line">from users.decorators import admin_required</span><br><span class="line"></span><br><span class="line">@login_message_required</span><br><span class="line">@admin_required</span><br><span class="line">def notice_write_view(request):</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;POST&quot;:</span><br><span class="line">        form &#x3D; NoticeWriteForm(request.POST)</span><br><span class="line">        user &#x3D; request.session[&#39;user_id&#39;]</span><br><span class="line">        user_id &#x3D; User.objects.get(user_id &#x3D; user)</span><br><span class="line"></span><br><span class="line">        if form.is_valid():</span><br><span class="line">            notice &#x3D; form.save(commit &#x3D; False)</span><br><span class="line">            notice.writer &#x3D; user_id</span><br><span class="line">            notice.save()</span><br><span class="line">            return redirect(&#39;notice:notice_list&#39;)</span><br><span class="line">    else:</span><br><span class="line">        form &#x3D; NoticeWriteForm()</span><br><span class="line"></span><br><span class="line">    return render(request, &quot;notice&#x2F;notice_write.html&quot;, &#123;&#39;form&#39;: form&#125;)</span><br></pre></td></tr></table></figure><p>공지사항 글작성은 관리자권한의 사용자만 글을 작성할 수 있도록 하기 위해 이전에 생성해둔 <strong>decorators</strong>에서 <strong>admin_required</strong>를 추가로 import 해줍니다. 그후 앞서 생성한 <strong>NoticeWriteForm</strong>을 <strong>GET</strong>으로 뿌려주고, 입력된 폼 값들이 <strong>POST</strong>로 요청되면 user변수에 접속 사용자의 세션 아이디를 담아 모델의 작성자 필드에 삽입시킵니다.</p><h2 id="3-urls-py-작성"><a href="#3-urls-py-작성" class="headerlink" title="3. urls.py 작성"></a>3. urls.py 작성</h2><p>생성한 글작성 view를 연결하기 위해 <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 아래의 path경로를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;write&#x2F;&#39;, views.notice_write_view, name&#x3D;&#39;notice_write&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-templates-작성"><a href="#4-templates-작성" class="headerlink" title="4. templates 작성"></a>4. templates 작성</h2><p>앞서 작성해둔 <strong>notice_list.html</strong>에 아래와 같이 글작성을 위한 버튼을 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_list.html --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% if request.user.level &#x3D;&#x3D; &#39;0&#39; or request.user.level &#x3D;&#x3D; &#39;1&#39; %&#125;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;&#123;% url &#39;notice:notice_write&#39; %&#125;&quot; class&#x3D;&quot;btn btn-sm&quot;&gt;글쓰기&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>서버쪽에서 decorator로 일반사용자의 접근을 차단했지만 클라이언트에도 관리자권한이 아닌 사용자들은 버튼이 보이지 않게 하기 위해 템플릿언어로 조건을 걸어줍니다.</p><p><strong>notice_wirte.html</strong>을 생성한 후 아래와 같이 글작성 템플릿을 작성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_write.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;POST&quot;&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;card&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;card-header&quot;&gt;</span><br><span class="line">            &#123;&#123; form.title &#125;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123; form.content &#125;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;text-right&quot;&gt;   </span><br><span class="line">        &lt;button type&#x3D;&quot;submit&quot; id&#x3D;&quot;write&quot; class&#x3D;&quot;btn btn-sm&quot;&gt;작성하기&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><h2 id="5-summernote-적용-커스텀"><a href="#5-summernote-적용-커스텀" class="headerlink" title="5. summernote 적용, 커스텀"></a>5. summernote 적용, 커스텀</h2><p><strong>위지위그</strong>란 간단히 문서편집을 위한 에디터입니다. 자주 사용되는 <strong>Ckeditor</strong>, <strong>TinyMCE</strong>, <strong>Redactor</strong> 등이 있지만 이 프로젝트의 프론트 디자인은 대부분 부트스트랩이기 때문에 부트스트랩 기반의 위지위그인 <strong>Summernote</strong>를 사용합니다.</p><p>Summernote 설치는 <strong>pip install django-summernote</strong> 명령어를 통해 간단히 설치할 수 있습니다. 하지만 저는 커스텀을 위해 프로젝트에 직접 파일을 추가하여 적용하였습니다. (포스팅에서는 CDN추가로 진행하겠습니다. Summernote 공식 사이트에 들어가면 for Bootstarp4과 같이 버전별로 CDN을 확인하실 수 있습니다.)</p><p><strong>notice_wirte.html</strong>의 <strong>header</strong>부분에 Summernote CDN을 추가하고 한글폰트를 적용하기 위해 summernote사이트에서 font파일을 다운받아 프로젝트에 파일을 추가한 후, 아래와 같이 커스텀을 위한 script를 작성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_write.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;summernote@0.8.15&#x2F;dist&#x2F;summernote-bs4.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;summernote@0.8.15&#x2F;dist&#x2F;summernote-bs4.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;static&#x2F;js&#x2F;lang&#x2F;summernote-ko-KR.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(document).ready(function () &#123;</span><br><span class="line">        $(&#39;#id_content&#39;).summernote(&#123;</span><br><span class="line">            placeholder: &#39;내용을 입력해주세요.&#39;,</span><br><span class="line">            height: 500,</span><br><span class="line">            minHeight: 500,</span><br><span class="line">            maxHeight: 500,</span><br><span class="line">            lang: &#39;ko-KR&#39;,</span><br><span class="line">           </span><br><span class="line">            toolbar: [</span><br><span class="line">            [&#39;style&#39;, [&#39;style&#39;]],</span><br><span class="line">            [&#39;font&#39;, [&#39;bold&#39;, &#39;underline&#39;, &#39;clear&#39;]],</span><br><span class="line">            [&#39;color&#39;, [&#39;color&#39;]],</span><br><span class="line">            [&#39;para&#39;, [&#39;ul&#39;, &#39;ol&#39;, &#39;paragraph&#39;]],</span><br><span class="line">            [&#39;table&#39;, [&#39;table&#39;]],</span><br><span class="line">            [&#39;insert&#39;, [&#39;link&#39;, &#39;picture&#39;, &#39;video&#39;]],</span><br><span class="line">            [&#39;view&#39;, [&#39;fullscreen&#39;, &#39;help&#39;]]</span><br><span class="line">            ]</span><br><span class="line">        &#125;);</span><br><span class="line">        $(&#39;p&#39;).css(&#39;margin-bottom&#39;,&#39;0&#39;)</span><br><span class="line">        $(&#39;.note-resizebar&#39;).css(&#39;display&#39;,&#39;none&#39;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>추가할 toolbar를 설정하고, 에디터 특성상 줄바꿈을 할시 margin 간격이 심해 margin-bottom을 0으로 설정하는 css속성을 추가해줍니다. 그리고 note-resizebar에 textarea창 크기조절을 할 수 없도록 설정합니다.</p><p><strong><a href="https://summernote.org/" target="_blank" rel="external nofollow noopener noreferrer">Summernote 공식 사이트</a></strong></p><h2 id="6-글상세보기-Tag-Escape-방지"><a href="#6-글상세보기-Tag-Escape-방지" class="headerlink" title="6. 글상세보기 Tag Escape 방지"></a>6. 글상세보기 Tag Escape 방지</h2><p>Summernote로 작성한 게시글을 불러올시 html 태그가 그대로 적용되어 출력되는것을 방지하기 위해서 <strong>notice_detail.html</strong>의 content 부분에 django 내장 필터인 <strong>safe</strong>를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_detail.html --&gt;</span><br><span class="line"></span><br><span class="line">&#123;&#123; notice.content | safe &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="7-페이지-벗어나기-경고창-구현"><a href="#7-페이지-벗어나기-경고창-구현" class="headerlink" title="7. 페이지 벗어나기 경고창 구현"></a>7. 페이지 벗어나기 경고창 구현</h2><p>글작성 창에서 새로고침, 뒤로가기 등 사용자가 작성중인 페이지를 벗어날시 경고 alert창을 띄우게 하기 위해 아래의 스크립트를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_write.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    var checkUnload &#x3D; true;</span><br><span class="line">    $(window).on(&#39;beforeunload&#39;, function () &#123;</span><br><span class="line">        if (checkUnload) return &quot;이 페이지를 벗어나면 작성된 내용은 저장되지 않습니다.&quot;;</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&quot;#write&quot;).on(&quot;click&quot;, function () &#123;</span><br><span class="line">        checkUnload &#x3D; false;</span><br><span class="line">        $(&quot;submit&quot;).submit();</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="8-결과"><a href="#8-결과" class="headerlink" title="8. 결과"></a>8. 결과</h2><p><img src="21-1.GIF" alt="django-project-21"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/04/08/django-project-21/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 20. 글 조회수 GET중복방지 구현</title>
      <link>https://parkhyeonchae.github.io/2020/04/04/django-project-20/</link>
      <guid>https://parkhyeonchae.github.io/2020/04/04/django-project-20/</guid>
      <pubDate>Sat, 04 Apr 2020 13:02:46 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-20-글-조회수-GET중복방지-구현&quot;&gt;&lt;a href=&quot;#Django-20-글-조회수-GET중복방지-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 20. 글 조회수 GET중복방지 구현&quot;&gt;&lt;/a&gt;Django 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-20-글-조회수-GET중복방지-구현"><a href="#Django-20-글-조회수-GET중복방지-구현" class="headerlink" title="Django 20. 글 조회수 GET중복방지 구현"></a>Django 20. 글 조회수 GET중복방지 구현</h1><blockquote><p>Cookie를 사용해 새로고침 등 게시글을 조회할 때마다 조회수가 증가하지 않도록 구현합니다.</p></blockquote><hr><h2 id="1-views-py-수정"><a href="#1-views-py-수정" class="headerlink" title="1. views.py 수정"></a>1. views.py 수정</h2><p>사용자가 게시글을 클릭할 시 이전의 게시판 모델을 생성할 때 추가한 조회수 필드인 hits가 증가하도록 구현하기 위해서 <strong>Cookie</strong>를 사용합니다.</p><p><strong>*Django 2</strong>버전대를 사용하시는 분이면 조회수 플러그인인 <strong>django-hitcount</strong>를 사용하실 수 있습니다. 현재까지 나온 <strong>django-hitcount 1.3.1</strong>버전은 <strong>Django 3</strong>버전을 지원하지 않습니다.</p><p><strong><a href="https://pypi.org/project/django-hitcount/" target="_blank" rel="external nofollow noopener noreferrer">Django-Hitcount</a></strong></p><p>Cookie를 사용한 조회수 증가를 구현하기 위해 <strong>notice</strong>앱 <strong>views.py</strong>의 <strong>notice_detail_view</strong>에 아래의 소스를 추가로 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;views.py</span><br><span class="line"></span><br><span class="line">@login_message_required</span><br><span class="line">def notice_detail_view(request, pk):</span><br><span class="line">    notice &#x3D; get_object_or_404(Notice, pk&#x3D;pk)</span><br><span class="line">    session_cookie &#x3D; request.session[&#39;user_id&#39;]</span><br><span class="line">    cookie_name &#x3D; F&#39;notice_hits:&#123;session_cookie&#125;&#39;</span><br><span class="line">    context &#x3D; &#123;</span><br><span class="line">        &#39;notice&#39;: notice,</span><br><span class="line">    &#125;</span><br><span class="line">    response &#x3D; render(request, &#39;notice&#x2F;notice_detail.html&#39;, context)</span><br><span class="line"></span><br><span class="line">    if request.COOKIES.get(cookie_name) is not None:</span><br><span class="line">        cookies &#x3D; request.COOKIES.get(cookie_name)</span><br><span class="line">        cookies_list &#x3D; cookies.split(&#39;|&#39;)</span><br><span class="line">        if str(pk) not in cookies_list:</span><br><span class="line">            response.set_cookie(cookie_name, cookies + f&#39;|&#123;pk&#125;&#39;, expires&#x3D;None)</span><br><span class="line">            notice.hits +&#x3D; 1</span><br><span class="line">            notice.save()</span><br><span class="line">            return response</span><br><span class="line">    else:</span><br><span class="line">        response.set_cookie(cookie_name, pk, expires&#x3D;None)</span><br><span class="line">        notice.hits +&#x3D; 1</span><br><span class="line">        notice.save()</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line">    return render(request, &#39;notice&#x2F;notice_detail.html&#39;, context)</span><br></pre></td></tr></table></figure><p>session_cookie 변수에 현재 접속된 사용자를 담아두고, 게시글을 조회했을시 생성할 cookie_name에 <strong>f-string</strong>을 사용해서 접속한 사용자의 아이디를 삽입 할 수 있게 합니다. </p><p>Python에서 cookie를 생성하는 방법은 <strong>set_cookie</strong> 메소드를 사용하여 생성할 수 있고, 클라이언트의 쿠키를 얻는 방법은 <strong>request.COOKIES.get(쿠키이름)</strong> 으로 cookie를 얻을 수 있습니다.</p><p>그후 cookie_name의 유무를 확인하여 접속된 사용자의 cookie가 있는 경우, 사용자가 게시글을 조회할때마다 게시글의 pk인 id값을 추가하고 hits를 증가시킵니다.</p><h2 id="2-결과"><a href="#2-결과" class="headerlink" title="2. 결과"></a>2. 결과</h2><p><img src="20-1.GIF" alt="django-project-20"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/04/04/django-project-20/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 19. 게시글 상세보기 구현</title>
      <link>https://parkhyeonchae.github.io/2020/04/03/django-project-19/</link>
      <guid>https://parkhyeonchae.github.io/2020/04/03/django-project-19/</guid>
      <pubDate>Fri, 03 Apr 2020 07:09:01 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-19-게시글-상세보기-구현&quot;&gt;&lt;a href=&quot;#Django-19-게시글-상세보기-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 19. 게시글 상세보기 구현&quot;&gt;&lt;/a&gt;Django 19. 게시글 상세보기 구현
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-19-게시글-상세보기-구현"><a href="#Django-19-게시글-상세보기-구현" class="headerlink" title="Django 19. 게시글 상세보기 구현"></a>Django 19. 게시글 상세보기 구현</h1><blockquote><p>FBV로 글보기를 구현하고, 템플릿에서 각 글 리스트에 ID를 매겨 이동할수 있도록 구현합니다.</p></blockquote><hr><h2 id="1-views-py-작성"><a href="#1-views-py-작성" class="headerlink" title="1. views.py 작성"></a>1. views.py 작성</h2><p>글 리스트에서 게시글을 선택할시 정해진 ID값으로 글 상세보기 창으로 이동되는 view를 작성하기 위해 <strong>notice</strong>앱의 <strong>views.py</strong>에 아래의 소스를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from users.decorators import login_message_required</span><br><span class="line">from django.shortcuts import get_object_or_404</span><br><span class="line"></span><br><span class="line">@login_message_required</span><br><span class="line">def notice_detail_view(request, pk):</span><br><span class="line">    notice &#x3D; get_object_or_404(Notice, pk&#x3D;pk)</span><br><span class="line">    context &#x3D; &#123;</span><br><span class="line">        &#39;notice&#39;: notice,</span><br><span class="line">    &#125;</span><br><span class="line">    return render(request, &#39;notice&#x2F;notice_detail.html&#39;, context)</span><br></pre></td></tr></table></figure><p>로그인한 사용자만 접근을 허용하기 위해 decorator를 추가합니다. 그 후 템플릿에 설정한 게시글의 <strong>pk</strong>값인 <strong>id</strong>를 인자로 받아 단일 객체를 반환하는 <strong>get_object_or_404</strong>를 import하여 사용합니다. <strong>get_object_or_404</strong>는 해당 모델에서 지정된 값을 찾아 있으면 반환하고 없으면 404에러를 발생시킵니다. 그 후 반환된 context를 담아 게시글 상세보기 창으로 render합니다.</p><h2 id="2-urls-py-작성"><a href="#2-urls-py-작성" class="headerlink" title="2. urls.py 작성"></a>2. urls.py 작성</h2><p>게시글 상세보기의 url경로를 선택한 글의 ID로 표시하기 위해 <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 아래의 path를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">path(&#39;&lt;int:pk&gt;&#x2F;&#39;, views.notice_detail_view, name&#x3D;&#39;notice_detail&#39;),</span><br></pre></td></tr></table></figure><h2 id="3-templates-작성"><a href="#3-templates-작성" class="headerlink" title="3. templates 작성"></a>3. templates 작성</h2><p><strong>templates</strong>의 <strong>notice</strong>폴더에 <strong>notice_detail.html</strong>을 생성하고 get_object_or_404으로 반환된 context를 전달받는 소스를 입력합니다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_detail.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;card&quot;&gt;</span><br><span class="line">    &lt;!--제목,분류,작성일--&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;card-header&quot;&gt;</span><br><span class="line">        &lt;strong&gt;&#123;&#123; notice.title &#125;&#125;&lt;&#x2F;strong&gt;&lt;span&gt;[공지사항]&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123; notice.registered_date|date:&#39;Y.m.d. H:i&#39; &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;card-body&quot;&gt;</span><br><span class="line">        &lt;!--작성자, 조회수--&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;span&gt;작성자 : &#123;&#123; notice.writer &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;span&gt;조회수 : &#123;&#123; notice.hits &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;!--내용--&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123; notice.content &#125;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;button onclick&#x3D;&quot;location.href&#x3D;&#39;&#x2F;notice&#x2F;&#39;&quot;&gt;목록으로&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>이전에 구현해둔 글 리스트보기 템플릿인 <strong>notice_list.html</strong>에 각 게시글을 클릭할시 지정된 path 경로로 이동할 수 있도록 <strong>onclick</strong>속성에 각 게시글의 <strong>pk</strong>값인 <strong>id</strong>경로를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_list.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr class&#x3D;&quot;text-center&quot; style&#x3D;&quot;cursor:pointer;&quot; onclick&#x3D;&quot;location.href&#x3D;&#39;&#x2F;notice&#x2F;&#123;&#123; notice.id &#125;&#125;&#x2F;&#39;&quot;&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123; notice.id &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123; notice.title|truncatechars:30 &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123; notice.writer &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123; notice.registered_date|date:&#39;Y. m. d&#39; &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123; notice.hits &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br></pre></td></tr></table></figure><h2 id="4-결과"><a href="#4-결과" class="headerlink" title="4. 결과"></a>4. 결과</h2><p><img src="19-1.GIF" alt="django-project-19"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/04/03/django-project-19/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 18. 게시글 검색 기능 구현</title>
      <link>https://parkhyeonchae.github.io/2020/04/02/django-project-18/</link>
      <guid>https://parkhyeonchae.github.io/2020/04/02/django-project-18/</guid>
      <pubDate>Thu, 02 Apr 2020 06:13:02 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-18-게시글-검색-기능-구현&quot;&gt;&lt;a href=&quot;#Django-18-게시글-검색-기능-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 18. 게시글 검색 기능 구현&quot;&gt;&lt;/a&gt;Django 18. 게시글 검색 기
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-18-게시글-검색-기능-구현"><a href="#Django-18-게시글-검색-기능-구현" class="headerlink" title="Django 18. 게시글 검색 기능 구현"></a>Django 18. 게시글 검색 기능 구현</h1><blockquote><p>Django Query Filter를 통해 전체, 작성자, 제목, 내용별 검색을 구현합니다.</p></blockquote><hr><h2 id="1-views-py-수정"><a href="#1-views-py-수정" class="headerlink" title="1. views.py 수정"></a>1. views.py 수정</h2><p>게시글의 검색기능 구현은 <strong>Django의 쿼리 필터</strong>를 통해 쉽게 구현할 수 있습니다. 템플릿에 select 태그로 전체, 제목+내용, 제목, 내용, 작성자별 검색 타입과 검색어를 입력받아 form <strong>GET</strong> 메소드로 요청을 받습니다. view에서 form의 값들이 GET으로 넘어와 url 뒤에 <strong>/?type=’검색타입’&amp;q=’검색어’&amp;page=’페이지’</strong> 와 같은 형식으로 파라미터들을 받게 되면 request 객체에 있는 get은 딕셔너리 형으로 변환하여 저장하게 됩니다. 따라서 <strong>request.GET.get(‘파라미터값’, ‘ ‘)</strong> 과 같은 형식으로 파라미터를 전달받고 쿼리 필터를 적용하여 반환하는 소스를 이전 포스팅에서 구현한 <strong>NoticeListView</strong>의 <strong>get_queryset</strong>에 아래와 같이 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from django.contrib import messages</span><br><span class="line">from django.db.models import Q</span><br><span class="line"></span><br><span class="line">def get_queryset(self):</span><br><span class="line">    search_keyword &#x3D; self.request.GET.get(&#39;q&#39;, &#39;&#39;)</span><br><span class="line">    search_type &#x3D; self.request.GET.get(&#39;type&#39;, &#39;&#39;)</span><br><span class="line">    notice_list &#x3D; Notice.objects.order_by(&#39;-id&#39;) </span><br><span class="line">    </span><br><span class="line">    if search_keyword :</span><br><span class="line">        if len(search_keyword) &gt; 1 :</span><br><span class="line">            if search_type &#x3D;&#x3D; &#39;all&#39;:</span><br><span class="line">                search_notice_list &#x3D; notice_list.filter(Q (title__icontains&#x3D;search_keyword) | Q (content__icontains&#x3D;search_keyword) | Q (writer__user_id__icontains&#x3D;search_keyword))</span><br><span class="line">            elif search_type &#x3D;&#x3D; &#39;title_content&#39;:</span><br><span class="line">                search_notice_list &#x3D; notice_list.filter(Q (title__icontains&#x3D;search_keyword) | Q (content__icontains&#x3D;search_keyword))</span><br><span class="line">            elif search_type &#x3D;&#x3D; &#39;title&#39;:</span><br><span class="line">                search_notice_list &#x3D; notice_list.filter(title__icontains&#x3D;search_keyword)    </span><br><span class="line">            elif search_type &#x3D;&#x3D; &#39;content&#39;:</span><br><span class="line">                search_notice_list &#x3D; notice_list.filter(content__icontains&#x3D;search_keyword)    </span><br><span class="line">            elif search_type &#x3D;&#x3D; &#39;writer&#39;:</span><br><span class="line">                search_notice_list &#x3D; notice_list.filter(writer__user_id__icontains&#x3D;search_keyword)</span><br><span class="line"></span><br><span class="line">            return search_notice_list</span><br><span class="line">        else:</span><br><span class="line">            messages.error(self.request, &#39;검색어는 2글자 이상 입력해주세요.&#39;)</span><br><span class="line">    return notice_list</span><br></pre></td></tr></table></figure><p><strong>get_queryset</strong>에 추가된 소스를 보시면 search_keyword, search_type의 변수명으로 파라미터의 값들을 저장합니다. 그 후 검색어인 search_keyword의 유무와 검색어의 길이를 판별해 검색타입인 search_type으로 다시 구분하여 각각의 필터를 적용합니다.</p><p>전체타입과 제목+내용 타입과 같이 두가지 이상의 필터 조건을 적용하기 위하여 <strong>django.db.models</strong>의 <strong>Q</strong>를 import합니다. 그리고 전체 쿼리셋에서 search_keyword가 포함되어있는 쿼리셋만 가져오기 위해 <strong>‘필드명’__icontains = ‘조건값’</strong> 형식으로 필터를 적용합니다. <strong>__icontains</strong>는 대소문자를 구분하지 않고 조건값이 포함되어 있는 데이터를 가져옵니다.</p><p>그리고 템플릿에서도 사용자가 검색한 검색결과를 ‘&lt;검색어&gt; 검색결과 입니다.’ 와 같이 표시하고, 선택한 검색타입을 계속 유지하기 위해 <strong>context</strong>로 <strong>search_keyword</strong>와 <strong>search_type</strong>을 넘겨주는 소스를 <strong>NoticeListView</strong>의 <strong>get_context_data</strong>에 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;views.py</span><br><span class="line"></span><br><span class="line">def get_context_data(self, **kwargs):</span><br><span class="line">    search_keyword &#x3D; self.request.GET.get(&#39;q&#39;, &#39;&#39;)</span><br><span class="line">    search_type &#x3D; self.request.GET.get(&#39;type&#39;, &#39;&#39;)</span><br><span class="line"></span><br><span class="line">    if len(search_keyword) &gt; 1 :</span><br><span class="line">        context[&#39;q&#39;] &#x3D; search_keyword</span><br><span class="line">    context[&#39;type&#39;] &#x3D; search_type</span><br><span class="line"></span><br><span class="line">    return context</span><br></pre></td></tr></table></figure><p>마찬가지로 <strong>request.GET.get</strong> 형식으로 파라미터값을 받고, 템플릿에 넘겨줄 q와 type을 딕셔너리형인 context에 추가합니다.</p><h2 id="2-templates-수정"><a href="#2-templates-수정" class="headerlink" title="2. templates 수정"></a>2. templates 수정</h2><p>사용자가 검색한 검색어를 표시하기 위해 상단부에 context로 전달받은 검색어인 <strong>q</strong>를 표시합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_list.html --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% if q %&#125;</span><br><span class="line">&lt;h5&gt;&#39;&#123;&#123; q &#125;&#125;&#39; 검색 결과입니다.&lt;&#x2F;h5&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>검색어를 포함하는 게시글이 없어 검색결과에러를 표시하기 위해 context의 <strong>q</strong>를 사용하여 <strong>{ % if notice_list % }</strong>의 <strong>else</strong> 처리 부분에 아래와 같이 소스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_list.html --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% if notice_list %&#125;</span><br><span class="line">&#123;% for notice in notice_list %&#125;</span><br><span class="line">&lt;tr class&#x3D;&quot;text-center&quot;&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123; notice.id &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123; notice.title|truncatechars:30 &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123; notice.writer &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123; notice.registered_date|date:&#39;Y. m. d&#39; &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123; notice.hits &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% else %&#125;              &lt;!-- 게시글 쿼리셋이 존재하지 않을 때 --&gt;</span><br><span class="line">    &#123;% if q %&#125;          &lt;!-- 검색어가 있어 q가 context로 넘어오면 검색결과가 없음 --&gt;</span><br><span class="line">    &lt;tr class&#x3D;&quot;text-center&quot;&gt;</span><br><span class="line">        &lt;td colspan&#x3D;&quot;5&quot;&gt;</span><br><span class="line">            일치하는 검색 결과가 없습니다.</span><br><span class="line">        &lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &#123;% else %&#125;          &lt;!-- q가 없으면 검색어가 아니며 게시글이 존재하지 않으므로 게시글 미작성 --&gt;</span><br><span class="line">    &lt;tr class&#x3D;&quot;text-center&quot;&gt;</span><br><span class="line">        &lt;td colspan&#x3D;&quot;5&quot;&gt;</span><br><span class="line">            작성된 게시글이 없습니다.</span><br><span class="line">        &lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>검색결과 수가 많아 페이지네이션이 적용되었을 때 페이지를 넘기면 검색결과가 풀려버리는 버그가 발생합니다. 이 프로젝트에서는 따로 검색 View를 구현하지 않고 ListView로 묶어 구현했기 때문에 페이지네이션 부분의 <u>href 소스도 파라미터를 전달 할 수 있도록</u> 아래와 같이 수정해줍니다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_list.html --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% if is_paginated %&#125;</span><br><span class="line">&lt;ul class&#x3D;&quot;pagination&quot;&gt;</span><br><span class="line">    &#123;% if page_obj.has_previous %&#125;</span><br><span class="line">    &lt;li class&#x3D;&quot;page-item&quot;&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;page-link&quot; href&#x3D;&quot;?type&#x3D;&#123;&#123; type &#125;&#125;&amp;q&#x3D;&#123;&#123; q &#125;&#125;&amp;page&#x3D;&#123;&#123; page_obj.previous_page_number &#125;&#125;&quot;</span><br><span class="line">            tabindex&#x3D;&quot;-1&quot;&gt;이전&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    &lt;li class&#x3D;&quot;page-item disabled&quot;&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;page-link&quot; href&#x3D;&quot;#&quot; tabindex&#x3D;&quot;-1&quot;&gt;이전&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% for page in page_range %&#125;</span><br><span class="line">    &lt;li class&#x3D;&quot;page-item &#123;% if page &#x3D;&#x3D; page_obj.number %&#125; activate &#123;% endif %&#125;&quot;&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;page-link&quot; href&#x3D;&quot;?type&#x3D;&#123;&#123; type &#125;&#125;&amp;q&#x3D;&#123;&#123; q &#125;&#125;&amp;page&#x3D;&#123;&#123; page &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% if page_obj.has_next %&#125;</span><br><span class="line">    &lt;li class&#x3D;&quot;page-item&quot;&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;page-link&quot;</span><br><span class="line">            href&#x3D;&quot;?type&#x3D;&#123;&#123; type &#125;&#125;&amp;q&#x3D;&#123;&#123; q &#125;&#125;&amp;page&#x3D;&#123;&#123; page_obj.next_page_number &#125;&#125;&quot;&gt;다음&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    &lt;li class&#x3D;&quot;page-item disabled&quot;&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;page-link&quot; href&#x3D;&quot;#&quot;&gt;다음&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="3-결과"><a href="#3-결과" class="headerlink" title="3. 결과"></a>3. 결과</h2><p><img src="18-1.GIF" alt="django-project-18"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/04/02/django-project-18/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 17. 게시판 글 리스트 / 페이징처리</title>
      <link>https://parkhyeonchae.github.io/2020/04/01/django-project-17/</link>
      <guid>https://parkhyeonchae.github.io/2020/04/01/django-project-17/</guid>
      <pubDate>Wed, 01 Apr 2020 11:18:50 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-17-게시판-글-리스트-페이징처리&quot;&gt;&lt;a href=&quot;#Django-17-게시판-글-리스트-페이징처리&quot; class=&quot;headerlink&quot; title=&quot;Django 17. 게시판 글 리스트 / 페이징처리&quot;&gt;&lt;/a&gt;Django 1
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-17-게시판-글-리스트-페이징처리"><a href="#Django-17-게시판-글-리스트-페이징처리" class="headerlink" title="Django 17. 게시판 글 리스트 / 페이징처리"></a>Django 17. 게시판 글 리스트 / 페이징처리</h1><blockquote><p>ListView를 사용해서 게시판의 글 목록 보기와 페이지네이션을 구현합니다.</p></blockquote><hr><h2 id="1-글-리스트-보기-views-py-작성"><a href="#1-글-리스트-보기-views-py-작성" class="headerlink" title="1. 글 리스트 보기 views.py 작성"></a>1. 글 리스트 보기 views.py 작성</h2><p>공지사항 게시판의 전체 게시글을 표시하기 위해 Django에서 제공하는 <strong>Generic display views</strong> 중 <strong>ListView</strong>를 사용합니다. <strong>notice</strong>앱 내 <strong>views.py</strong>에 ListView를 import하고 아래의 소스를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from django.views.generic import ListView</span><br><span class="line">from .models import Notice</span><br><span class="line"></span><br><span class="line">class NoticeListView(ListView):</span><br><span class="line">    model &#x3D; Notice</span><br><span class="line">    paginate_by &#x3D; 10</span><br><span class="line">    template_name &#x3D; &#39;notice&#x2F;notice_list.html&#39;  #DEFAULT : &lt;app_label&gt;&#x2F;&lt;model_name&gt;_list.html</span><br><span class="line">    context_object_name &#x3D; &#39;notice_list&#39;        #DEFAULT : &lt;model_name&gt;_list</span><br><span class="line"></span><br><span class="line">    def get_queryset(self):</span><br><span class="line">        notice_list &#x3D; Notice.objects.order_by(&#39;-id&#39;) </span><br><span class="line">        return notice_list</span><br></pre></td></tr></table></figure><p>Django의 <strong>ListView</strong>를 사용하면 따로 Paginator를 import할 필요없이 <strong>paginate_by</strong>로 한 페이지에 표시할 게시글의 개수를 정할 수 있습니다. 또한 DEFAULT로 <strong>template_name</strong>과 <strong>context_object_name</strong>이 정해져 있기에 템플릿에서 <strong>&lt; model_name &gt;_list</strong>로 쿼리셋을 사용할 수 있습니다.</p><p>게시글의 리스트를 최근 작성순으로 표시하기 위해 <strong>get_queryset</strong> 메소드를 오버라이딩하여 order_by로 정렬을 한 후 쿼리셋을 반환합니다.</p><p><strong><a href="https://docs.djangoproject.com/en/3.0/ref/class-based-views/generic-display/" target="_blank" rel="external nofollow noopener noreferrer">Django Generic Display Views 공식문서</a></strong></p><h2 id="2-페이지네이션-커스텀"><a href="#2-페이지네이션-커스텀" class="headerlink" title="2. 페이지네이션 커스텀"></a>2. 페이지네이션 커스텀</h2><p><strong>Django Paginator</strong>를 사용하여 간단하게 페이징처리를 구현할 수 있지만 하단부의 페이지 숫자 범위를 커스텀하기 위해 <strong>get_context_data</strong> 메소드로 페이지 숫자 범위 Context를 생성하여 템플릿에 전달합니다. 따로 view를 생성하지 않고 <strong>NoticeListView</strong> 내에 아래와 같이 <strong>get_context_data</strong> 메소드를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;views.py</span><br><span class="line"></span><br><span class="line">def get_context_data(self, **kwargs):</span><br><span class="line">    context &#x3D; super().get_context_data(**kwargs)</span><br><span class="line">    paginator &#x3D; context[&#39;paginator&#39;]</span><br><span class="line">    page_numbers_range &#x3D; 5</span><br><span class="line">    max_index &#x3D; len(paginator.page_range)</span><br><span class="line"></span><br><span class="line">    page &#x3D; self.request.GET.get(&#39;page&#39;)</span><br><span class="line">    current_page &#x3D; int(page) if page else 1</span><br><span class="line"></span><br><span class="line">    start_index &#x3D; int((current_page - 1) &#x2F; page_numbers_range) * page_numbers_range</span><br><span class="line">    end_index &#x3D; start_index + page_numbers_range</span><br><span class="line">    if end_index &gt;&#x3D; max_index:</span><br><span class="line">        end_index &#x3D; max_index</span><br><span class="line"></span><br><span class="line">    page_range &#x3D; paginator.page_range[start_index:end_index]</span><br><span class="line">    context[&#39;page_range&#39;] &#x3D; page_range</span><br><span class="line"></span><br><span class="line">    return context</span><br></pre></td></tr></table></figure><h2 id="2-urls-py-작성"><a href="#2-urls-py-작성" class="headerlink" title="2. urls.py 작성"></a>2. urls.py 작성</h2><p><strong>urls.py</strong>의 <strong>urlpatterns</strong>에 NoticeListView의 path경로를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;&#39;, views.NoticeListView.as_view(), name&#x3D;&#39;notice_list&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="3-templates-py-작성"><a href="#3-templates-py-작성" class="headerlink" title="3. templates.py 작성"></a>3. templates.py 작성</h2><p><strong>templates</strong> 내에 <strong>notice</strong>폴더를 생성한 후 <strong>notice_list.html</strong>을 생성합니다. 우선 get_queryset으로 반환되는 쿼리셋들을 테이블형식으로 출력하기 위해 아래와 같이 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_list.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr class&#x3D;&quot;text-center&quot;&gt;</span><br><span class="line">            &lt;th&gt;번호&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;제목&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;작성자&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;등록일&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;조회수&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &#123;% if notice_list %&#125;</span><br><span class="line">        &#123;% for notice in notice_list %&#125;</span><br><span class="line">        &lt;tr class&#x3D;&quot;text-center&quot;&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123; notice.id &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123; notice.title|truncatechars:30 &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123; notice.writer &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123; notice.registered_date|date:&#39;Y. m. d&#39; &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123; notice.hits &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        &lt;tr class&#x3D;&quot;text-center&quot;&gt;</span><br><span class="line">            &lt;td colspan&#x3D;&quot;5&quot;&gt;</span><br><span class="line">                작성된 게시글이 없습니다.</span><br><span class="line">            &lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;&#x2F;tbody&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure><p>게시글의 내용과 작성일에 Django의 <strong>템플릿 필터</strong>를 적용합니다. <strong>truncatechars</strong>는 문자열이 정해진 숫자보다 길면 자른 후 ‘…’ 으로 표시합니다. <strong>date</strong>는 정해진 날짜 형식에 따라 표시합니다.</p><p>페이징 처리를 위한 코드는 아래와 같습니다. <strong>get_context_data</strong>로 전달받은 context인 <strong>page_range</strong>로 페이지의 표시범위를 제한합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;notice&#x2F;notice_list.html --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% if is_paginated %&#125;</span><br><span class="line">&lt;ul class&#x3D;&quot;pagination&quot;&gt;</span><br><span class="line">    &#123;% if page_obj.has_previous %&#125;</span><br><span class="line">    &lt;li class&#x3D;&quot;page-item&quot;&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;page-link&quot; href&#x3D;&quot;?page&#x3D;&#123;&#123; page_obj.previous_page_number &#125;&#125;&quot;</span><br><span class="line">            tabindex&#x3D;&quot;-1&quot;&gt;이전&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    &lt;li class&#x3D;&quot;page-item disabled&quot;&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;page-link&quot; href&#x3D;&quot;#&quot; tabindex&#x3D;&quot;-1&quot;&gt;이전&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% for page in page_range %&#125;</span><br><span class="line">    &lt;li class&#x3D;&quot;page-item &#123;% if page &#x3D;&#x3D; page_obj.number %&#125; activate &#123;% endif %&#125;&quot;&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;page-link&quot; href&#x3D;&quot;?page&#x3D;&#123;&#123; page &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% if page_obj.has_next %&#125;</span><br><span class="line">    &lt;li class&#x3D;&quot;page-item&quot;&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;page-link&quot;</span><br><span class="line">            href&#x3D;&quot;?page&#x3D;&#123;&#123; page_obj.next_page_number &#125;&#125;&quot;&gt;다음&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">    &lt;li class&#x3D;&quot;page-item disabled&quot;&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;page-link&quot; href&#x3D;&quot;#&quot;&gt;다음&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="5-결과"><a href="#5-결과" class="headerlink" title="5. 결과"></a>5. 결과</h2><p>django admin 페이지에서 공지사항 게시글을 6개 정도 생성한 뒤 view의 paginate_by를 5로 지정하면 아래와 같은 결과를 확인 할 수 있습니다.</p><p><img src="17-1.GIF" alt="django-project-17"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/04/01/django-project-17/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 16. 게시판 앱 모델 생성 / 연결</title>
      <link>https://parkhyeonchae.github.io/2020/03/31/django-project-16/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/31/django-project-16/</guid>
      <pubDate>Tue, 31 Mar 2020 06:59:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-16-게시판-앱-모델-생성-연결&quot;&gt;&lt;a href=&quot;#Django-16-게시판-앱-모델-생성-연결&quot; class=&quot;headerlink&quot; title=&quot;Django 16. 게시판 앱 모델 생성 / 연결&quot;&gt;&lt;/a&gt;Django 16. 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-16-게시판-앱-모델-생성-연결"><a href="#Django-16-게시판-앱-모델-생성-연결" class="headerlink" title="Django 16. 게시판 앱 모델 생성 / 연결"></a>Django 16. 게시판 앱 모델 생성 / 연결</h1><blockquote><p>공지사항 게시판 앱인 notice app을 생성하고 models, admin, urls를 설정합니다.</p></blockquote><hr><h2 id="1-게시판-앱-생성"><a href="#1-게시판-앱-생성" class="headerlink" title="1. 게시판 앱 생성"></a>1. 게시판 앱 생성</h2><p>이 프로젝트의 게시판은 학사의 중요 공지사항을 알려주는 <strong>공지사항(notice app)</strong>, 학과생들의 커뮤니티 활동을 위한 <strong>자유게시판(free app)</strong>, 작성자가 표시되지 않는 타임라인 형식의 <strong>익명게시판(anonymous app)</strong> 총 3개의 앱으로 분류 되어있습니다. 공통적으로 구현한 기능과 각 앱에 추가된 기능은 다음과 같습니다.</p><ol><li><strong>게시판 공통 : 게시글CRUD, 텍스트에디터 적용, 파일업로드(한글명인코딩, 암호화저장), 검색</strong></li><li><strong>공지사항 : 중요게시글 상단고정, 글 작성 시 관리자 권한의 사용자로 제한</strong></li><li><strong>자유게시판 : 세부카테고리 분류(자유, 정보, 질문), 댓글달기, 답글달기</strong></li><li><strong>익명게시판 : Waypoint사용 무한스크롤, 게시글 추천하기, 댓글달기, 답글달기, FAB버튼</strong></li></ol><p>이후 포스팅부터 공지사항 앱과 구현방식이 비슷한 자유게시판 앱은 제외하고 공지사항, 익명게시판 앱의 개발기록을 포스팅하겠습니다.</p><p>공지사항 앱을 생성하기 위해 터미널에서 아래의 명령어로 <strong>notice</strong> 앱을 생성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ django-admin startapp notice</span><br></pre></td></tr></table></figure><p><strong>settings.py</strong>의 <strong>INSTALLED_APPS</strong>에 notice 앱을 추가해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># cs_web&#x2F;settings.py</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    &#39;django.contrib.admin&#39;,</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br><span class="line">    &#39;users.apps.UsersConfig&#39;,</span><br><span class="line">    &#39;notice.apps.NoticeConfig&#39;, # 추가 부분</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><em>*일반적으로 ‘notice’ 와 같이 app이름만 추가하셔도 상관은 없으나, django convention이며 시그널 또는 apps 파일에서 Config를 사용하는 경우가 있기에 저 형식으로 코드를 추가해줍니다.</em></p><h2 id="2-urls-py-생성"><a href="#2-urls-py-생성" class="headerlink" title="2. urls.py 생성"></a>2. urls.py 생성</h2><p>app별로 urls를 관리하기 위해 notice 앱 내부에 <strong>urls.py</strong>를 생성한 후 아래와 같은 코드를 작성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">from django.urls import path</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">app_name &#x3D; &#39;notice&#39;</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; []</span><br></pre></td></tr></table></figure><p>생성한 urls.py를 읽어올 수 있도록 <strong>settings.py</strong>가 있는 경로의 <strong>urls.py</strong>를 아래와 같이 수정합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># cs_web&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    path(&#39;users&#x2F;&#39;, include(&#39;users.urls&#39;)),</span><br><span class="line">    path(&#39;notice&#x2F;&#39;, include(&#39;notice.urls&#39;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="3-models-py-작성"><a href="#3-models-py-작성" class="headerlink" title="3. models.py 작성"></a>3. models.py 작성</h2><p>공지사항 앱의 DB 모델 필드는 다음과 같습니다.</p><div class="table-container"><table><thead><tr><th>필드</th><th>역할</th></tr></thead><tbody><tr><td>writer</td><td>게시글 작성자</td></tr><tr><td>title</td><td>게시글 제목</td></tr><tr><td>content</td><td>게시글 내용</td></tr><tr><td>hits</td><td>게시글 조회수</td></tr><tr><td>top_fixed</td><td>중요 게시글 상단고정 여부</td></tr><tr><td>upload_images</td><td>텍스트에디터 사용시 이미지첨부 경로</td></tr><tr><td>upload_files</td><td>파일업로드</td></tr><tr><td>filename</td><td>업로드된 첨부파일 한글명 저장</td></tr><tr><td>registered_date</td><td>게시글 작성일</td></tr></tbody></table></div><p>우선 파일과 관련된 필드들을 제외한 모델을 생성하기 위해 <strong>notice</strong>앱의 <strong>models.py</strong>에 아래와 같이 소스를 입력합니다. <em>(파일과 관련된 필드들은 이후 파일업로드 구현 포스팅에서 역할과 추가를 자세하게 포스팅하겠습니다.)</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;models.py</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">from django.conf import settings</span><br><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class Notice(models.Model):</span><br><span class="line">    writer &#x3D; models.ForeignKey(settings.AUTH_USER_MODEL, on_delete&#x3D;models.SET_NULL, null&#x3D;True, verbose_name&#x3D;&#39;작성자&#39;)</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;128, verbose_name&#x3D;&#39;제목&#39;)</span><br><span class="line">    content &#x3D; models.TextField(verbose_name&#x3D;&#39;내용&#39;)</span><br><span class="line">    hits &#x3D; models.PositiveIntegerField(verbose_name&#x3D;&#39;조회수&#39;, default&#x3D;0)</span><br><span class="line">    registered_date &#x3D; models.DateTimeField(auto_now_add&#x3D;True, verbose_name&#x3D;&#39;등록시간&#39;)</span><br><span class="line">    top_fixed &#x3D; models.BooleanField(verbose_name&#x3D;&#39;상단고정&#39;, default&#x3D;False)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        db_table &#x3D; &#39;공지사항&#39;</span><br><span class="line">        verbose_name &#x3D; &#39;공지사항&#39;</span><br><span class="line">        verbose_name_plural &#x3D; &#39;공지사항&#39;</span><br></pre></td></tr></table></figure><p>작성자인 <strong>writer</strong> 필드는 AUTH_USER_MODEL인 사용자 모델과 <strong>ForeignKey</strong> 관계로 연결되어 있으며 <strong>on_delete</strong>를 활용하여 사용자의 계정이 삭제되어도 작성자는 NULL로 변경, 게시글은 보존할 수 있도록 하였습니다. 조회수인 <strong>hits</strong> 필드는 <strong>PositiveIntegerField</strong>로 지정해 양수만 취급하도록 하고, 상단고정여부인 <strong>top_fixed</strong> 필드는 True값이면 게시글 리스트의 상단에 고정되도록 구현하기 위해 <strong>BooleanField</strong>로 지정합니다.</p><h2 id="4-admin-py-작성"><a href="#4-admin-py-작성" class="headerlink" title="4. admin.py 작성"></a>4. admin.py 작성</h2><p>생성한 Model을 django admin페이지에서 관리할 수 있도록 <strong>admin.py</strong>에 아래의 코드를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># notice&#x2F;admin.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from .models import Notice</span><br><span class="line"></span><br><span class="line">class NoticeAdmin(admin.ModelAdmin):</span><br><span class="line">    list_display &#x3D; (</span><br><span class="line">        &#39;title&#39;, </span><br><span class="line">        &#39;writer&#39;, </span><br><span class="line">        &#39;hits&#39;,</span><br><span class="line">        &#39;registered_date&#39;,</span><br><span class="line">        )</span><br><span class="line">    search_fields &#x3D; (&#39;title&#39;, &#39;content&#39;, &#39;writer__user_id&#39;,)</span><br><span class="line"></span><br><span class="line">admin.site.register(Notice, NoticeAdmin)</span><br></pre></td></tr></table></figure><p>admin 커스텀 중 ForeignKey가 search_fields에 포함되어 있으면 <strong>incontains</strong>에러가 발생합니다. 작성자인 writer가 User모델과 ForeignKey 관계로 연결되어 있기 때문에 search_fields에 <strong>‘writer__user_id’</strong> 와 같은 형식으로 추가합니다.</p><h2 id="5-DB-Migrate"><a href="#5-DB-Migrate" class="headerlink" title="5. DB Migrate"></a>5. DB Migrate</h2><p>아래의 명령어로 <strong>migrations</strong> 파일을 생성한 후 django DB에 적용하기 위해 <strong>migrate</strong>를 진행합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py makemigrations</span><br><span class="line">$ python manage.py migrate</span><br></pre></td></tr></table></figure><p><em>*app 생성 직후를 제외한 migrations는 명령 뒤에 app의 이름을 명시해주는것이 좋습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/31/django-project-16/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 15. 본인인증 후 회원탈퇴 구현</title>
      <link>https://parkhyeonchae.github.io/2020/03/31/django-project-15/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/31/django-project-15/</guid>
      <pubDate>Mon, 30 Mar 2020 15:21:28 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-15-본인인증-후-회원탈퇴-구현&quot;&gt;&lt;a href=&quot;#Django-15-본인인증-후-회원탈퇴-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 15. 본인인증 후 회원탈퇴 구현&quot;&gt;&lt;/a&gt;Django 15. 본인
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-15-본인인증-후-회원탈퇴-구현"><a href="#Django-15-본인인증-후-회원탈퇴-구현" class="headerlink" title="Django 15. 본인인증 후 회원탈퇴 구현"></a>Django 15. 본인인증 후 회원탈퇴 구현</h1><blockquote><p>Django check_password함수를 통해 비밀번호 인증 후 회원탈퇴를 구현합니다.</p></blockquote><hr><h2 id="1-forms-py-작성"><a href="#1-forms-py-작성" class="headerlink" title="1. forms.py 작성"></a>1. forms.py 작성</h2><p>사용자가 회원탈퇴를 시도할 시 본인의 비밀번호를 확인하는 form을 생성하기 위해 <strong>forms.py</strong>에 아래와 같이 소스를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">from django.contrib.auth.hashers import check_password</span><br><span class="line"></span><br><span class="line">class CheckPasswordForm(forms.Form):</span><br><span class="line">    password &#x3D; forms.CharField(label&#x3D;&#39;비밀번호&#39;, widget&#x3D;forms.PasswordInput(</span><br><span class="line">        attrs&#x3D;&#123;&#39;class&#39;: &#39;form-control&#39;,&#125;), </span><br><span class="line">    )</span><br><span class="line">    def __init__(self, user, *args, **kwargs):</span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line">        self.user &#x3D; user</span><br><span class="line"></span><br><span class="line">    def clean(self):</span><br><span class="line">        cleaned_data &#x3D; super().clean()</span><br><span class="line">        password &#x3D; cleaned_data.get(&#39;password&#39;)</span><br><span class="line">        confirm_password &#x3D; self.user.password</span><br><span class="line">        </span><br><span class="line">        if password:</span><br><span class="line">            if not check_password(password, confirm_password):</span><br><span class="line">                self.add_error(&#39;password&#39;, &#39;비밀번호가 일치하지 않습니다.&#39;)</span><br></pre></td></tr></table></figure><p>현재 접속중인 사용자의 password를 가져오기 위해 <strong>init</strong> 메소드로 user 객체를 생성하고 <strong>clean</strong> 메소드로 form에 입력된 password 값과 <strong>init</strong>으로 생성된 현재 사용자의 password 값을 django에서 제공하는 <strong>check_password</strong>를 통해 비교합니다.</p><h2 id="2-views-py-작성"><a href="#2-views-py-작성" class="headerlink" title="2. views.py 작성"></a>2. views.py 작성</h2><p><strong>views.py</strong>에 아래와 같이 회원탈퇴 view를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from .forms import CheckPasswordForm</span><br><span class="line"></span><br><span class="line">@login_message_required</span><br><span class="line">def profile_delete_view(request):</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class="line">        password_form &#x3D; CheckPasswordForm(request.user, request.POST)</span><br><span class="line">        </span><br><span class="line">        if password_form.is_valid():</span><br><span class="line">            request.user.delete()</span><br><span class="line">            logout(request)</span><br><span class="line">            messages.success(request, &quot;회원탈퇴가 완료되었습니다.&quot;)</span><br><span class="line">            return redirect(&#39;&#x2F;users&#x2F;login&#x2F;&#39;)</span><br><span class="line">    else:</span><br><span class="line">        password_form &#x3D; CheckPasswordForm(request.user)</span><br><span class="line"></span><br><span class="line">    return render(request, &#39;users&#x2F;profile_delete.html&#39;, &#123;&#39;password_form&#39;:password_form&#125;)</span><br></pre></td></tr></table></figure><p>로그인하지 않은 사용자의 접근을 막기 위해 decorator를 추가하고 form에서 비밀번호 인증을 위한 user객체를 생성하기 위해 <strong>request.user</strong>로 현재 사용자를 form에 담아 템플릿에 뿌려줍니다. is_valid가 통과되면 <strong>delete()로</strong> DB에서 현재 user를 삭제하고 <strong>logout()</strong>을 통해 세션을 만료시킵니다.</p><h2 id="3-urls-py-작성"><a href="#3-urls-py-작성" class="headerlink" title="3. urls.py 작성"></a>3. urls.py 작성</h2><p>생성한 회원탈퇴 view를 연결하기 위해 <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 아래의 path를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">path(&#39;profile&#x2F;delete&#x2F;&#39;, views.profile_delete_view, name&#x3D;&#39;profile_delete&#39;),</span><br></pre></td></tr></table></figure><h2 id="4-templates-py-작성"><a href="#4-templates-py-작성" class="headerlink" title="4. templates.py 작성"></a>4. templates.py 작성</h2><p><strong>templates</strong>의 <strong>users</strong>내 <strong>profile_delete.html</strong>을 생성하고 아래의 소스를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;profile_delete.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method&#x3D;&quot;POST&quot; novalidate&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;p&gt;&lt;strong&gt;&#123;&#123; user.user_id &#125;&#125;&lt;&#x2F;strong&gt; 회원님의 계정이 삭제됩니다.&lt;br&gt;탈퇴시 개인정보 및 이용정보가 삭제되며 복구할 수 없습니다. &lt;br&gt;본인의 비밀번호를 입력한 후 하단의 유의사항 동의에 체크하세요.&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label name&#x3D;&quot;label_password&quot; for&#x3D;&quot;&#123;&#123; password_form.password.id_for_label &#125;&#125;&quot;&gt;&#123;&#123; password_form.password.label &#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">        &#123;&#123; password_form.password &#125;&#125;</span><br><span class="line">        &#123;% if password_form.password.errors %&#125;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            document.getElementsByName(&#39;password&#39;)[0].setAttribute(&#39;class&#39;, &#39;form-control is-invalid&#39;)</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">        &#123;% for error in password_form.password.errors %&#125;</span><br><span class="line">        &lt;div class&#x3D;&quot;invalid-feedback&quot;&gt;</span><br><span class="line">            &#123;&#123; error &#125;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        &lt;small&gt;</span><br><span class="line">            본인인증을 위해 비밀번호를 입력해주세요.</span><br><span class="line">        &lt;&#x2F;small&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;ck&quot; onClick&#x3D;&quot;checkDisable(this.form)&quot;&gt;</span><br><span class="line">        &lt;span&gt;유의사항 동의&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;label&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;button type&#x3D;&quot;submit&quot; name&#x3D;&quot;bt&quot; disabled&#x3D;&quot;true&quot; &gt;탈퇴하기&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    function checkDisable(form) &#123;</span><br><span class="line">        if (form.ck.checked &#x3D;&#x3D; true) &#123;</span><br><span class="line">            form.bt.disabled &#x3D; false;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            form.bt.disabled &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>템플릿에 회원탈퇴시 유의사항과 비밀번호 입력필드를 추가하고 유의사항 동의 Checkbox가 Check되었을때만 탈퇴하기 버튼이 활성회되는 스크립트를 추가합니다.</p><h2 id="5-결과"><a href="#5-결과" class="headerlink" title="5. 결과"></a>5. 결과</h2><p><img src="15-1.GIF" alt="django-project-15"></p><p>회원탈퇴 기능을 마지막으로 사용자 앱인 users의 구현은 완료되었습니다. 다음 포스팅부턴 게시판 앱을 생성하고 기본적인 CRUD, 댓글달기, 위지위그 적용, 파일 업로드, 무한 스크롤, 글 추천하기 등을 구현한 개발기록을 포스팅하겠습니다.</p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/31/django-project-15/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 14. 비밀번호 변경 구현</title>
      <link>https://parkhyeonchae.github.io/2020/03/30/django-project-14/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/30/django-project-14/</guid>
      <pubDate>Mon, 30 Mar 2020 13:59:40 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-14-비밀번호-변경-구현&quot;&gt;&lt;a href=&quot;#Django-14-비밀번호-변경-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 14. 비밀번호 변경 구현&quot;&gt;&lt;/a&gt;Django 14. 비밀번호 변경 구현&lt;/h1
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-14-비밀번호-변경-구현"><a href="#Django-14-비밀번호-변경-구현" class="headerlink" title="Django 14. 비밀번호 변경 구현"></a>Django 14. 비밀번호 변경 구현</h1><blockquote><p>Django 내장폼인 PasswordChangeForm을 사용해 사용자의 비밀번호 변경을 구현합니다.</p></blockquote><hr><h2 id="1-forms-py-작성"><a href="#1-forms-py-작성" class="headerlink" title="1. forms.py 작성"></a>1. forms.py 작성</h2><p>비밀번호 변경 템플릿에 적용할 form을 생성하기 위해 <strong>forms.py</strong>에 django 내장폼인 <strong>PasswordChangeForm</strong>을 상속받는 폼클래스를 아래와 같이 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">from django.contrib.auth.forms import PasswordChangeForm</span><br><span class="line"></span><br><span class="line">class CustomPasswordChangeForm(PasswordChangeForm):</span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        super(CustomPasswordChangeForm, self).__init__(*args, **kwargs)</span><br><span class="line">        self.fields[&#39;old_password&#39;].label &#x3D; &#39;기존 비밀번호&#39;</span><br><span class="line">        self.fields[&#39;old_password&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">            &#39;autofocus&#39;: False,</span><br><span class="line">        &#125;)</span><br><span class="line">        self.fields[&#39;new_password1&#39;].label &#x3D; &#39;새 비밀번호&#39;</span><br><span class="line">        self.fields[&#39;new_password1&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">        &#125;)</span><br><span class="line">        self.fields[&#39;new_password2&#39;].label &#x3D; &#39;새 비밀번호 확인&#39;</span><br><span class="line">        self.fields[&#39;new_password2&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>이전에 포스팅한 비밀번호 찾기 후 비밀번호 변경 폼과의 차이점은 상속받는 Django form에 있습니다. 비밀번호 찾기에서 사용한 <strong>SetPasswordForm</strong>은 <u>기존의 비밀번호를 입력받지 않고 비밀번호 변경이 가능</u>하고, 이번 포스팅에서 구현한 <strong>PasswordChangeForm</strong>은 <u>기존의 비밀번호를 입력해야한다</u>는 차이점이 있습니다. 따라서 공식문서를 살펴보면 PasswordChangeForm은 SetPasswordForm을 상속받아 구현되어있는것을 알 수 있습니다.</p><p><strong><a href="https://docs.djangoproject.com/en/1.8/_modules/django/contrib/auth/forms/" target="_blank" rel="external nofollow noopener noreferrer">Django 내장폼 공식문서</a></strong></p><h2 id="2-views-py-작성"><a href="#2-views-py-작성" class="headerlink" title="2. views.py 작성"></a>2. views.py 작성</h2><p><strong>views.py</strong>에 비밀번호 수정 view를 아래와 같이 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from .forms import CustomPasswordChangeForm</span><br><span class="line">from django.contrib.auth import update_session_auth_hash</span><br><span class="line"></span><br><span class="line">@login_message_required</span><br><span class="line">def password_edit_view(request):</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class="line">        password_change_form &#x3D; CustomPasswordChangeForm(request.user, request.POST)</span><br><span class="line">        if password_change_form.is_valid():</span><br><span class="line">            user &#x3D; password_change_form.save()</span><br><span class="line">            update_session_auth_hash(request, user)</span><br><span class="line">            messages.success(request, &quot;비밀번호를 성공적으로 변경하였습니다.&quot;)</span><br><span class="line">            return redirect(&#39;users:profile&#39;)</span><br><span class="line">    else:</span><br><span class="line">        password_change_form &#x3D; CustomPasswordChangeForm(request.user)</span><br><span class="line"></span><br><span class="line">    return render(request, &#39;users&#x2F;profile_password.html&#39;, &#123;&#39;password_change_form&#39;:password_change_form&#125;)</span><br></pre></td></tr></table></figure><p>비밀번호 변경 창에서 <strong>GET</strong>요청이 들어오면 <strong>request.user</strong>로 사용자의 정보를 방금 생성한 <strong>CustomPasswordChagneForm</strong>에 담아 render합니다. 사용자는 변경할 비밀번호를 Submit하여 <strong>POST</strong>요청을 하게 되고 is_valid검사를 통과하면 비밀번호를 변경하고 message와 함께 profile창으로 redirect되게 됩니다.</p><p>비밀번호가 변경되었을 시 기존 session에 담긴 사용자의 비밀번호가 일치하지 않아 session이 해제되는 것을 막기 위해 <strong>update_session_auth_hash</strong>를 import하여 추가합니다. 사용자는 비밀번호를 변경하더라도 request로 session에 비밀번호를 자동으로 업데이트 해주는 <strong>update_session_auth_hash</strong> 덕분에 세션 유지가 가능하게 됩니다.</p><h2 id="3-urls-py-작성"><a href="#3-urls-py-작성" class="headerlink" title="3. urls.py 작성"></a>3. urls.py 작성</h2><p>생성한 비밀번호 view를 연결하기 위해 <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 아래의 path를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">path(&#39;profile&#x2F;password&#x2F;&#39;, views.password_edit_view, name&#x3D;&#39;password_edit&#39;),</span><br></pre></td></tr></table></figure><h2 id="4-templates-py-작성"><a href="#4-templates-py-작성" class="headerlink" title="4. templates.py 작성"></a>4. templates.py 작성</h2><p>비밀번호 변경 창의 templates는 아래와 같습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;profile_password.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method&#x3D;&quot;POST&quot; novalidate&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label name&#x3D;&quot;label_old_password&quot; for&#x3D;&quot;&#123;&#123; password_change_form.old_password.id_for_label &#125;&#125;&quot;&gt;&#123;&#123; password_change_form.old_password.label &#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">        &#123;&#123; password_change_form.old_password &#125;&#125;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            if (document.getElementsByName(&#39;old_password&#39;)[0].value !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">                document.getElementsByName(&#39;label_old_password&#39;)[0].setAttribute(&#39;class&#39;, &#39;active&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">        &#123;% if password_change_form.old_password.errors %&#125;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            document.getElementsByName(&#39;old_password&#39;)[0].setAttribute(&#39;class&#39;, &#39;form-control is-invalid&#39;)</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">        &#123;% for error in password_change_form.old_password.errors %&#125;</span><br><span class="line">        &lt;div class&#x3D;&quot;invalid-feedback&quot;&gt;</span><br><span class="line">            &#123;&#123; error &#125;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label name&#x3D;&quot;label_new_password1&quot; for&#x3D;&quot;&#123;&#123; password_change_form.new_password1.id_for_label &#125;&#125;&quot;&gt;&#123;&#123; password_change_form.new_password1.label &#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">        &#123;&#123; password_change_form.new_password1 &#125;&#125;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            if (document.getElementsByName(&#39;new_password1&#39;)[0].value !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">                document.getElementsByName(&#39;label_new_password1&#39;)[0].setAttribute(&#39;class&#39;, &#39;active&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">        &#123;% if password_change_form.new_password1.errors %&#125;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            document.getElementsByName(&#39;new_password1&#39;)[0].setAttribute(&#39;class&#39;, &#39;form-control is-invalid&#39;)</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">        &#123;% for error in password_change_form.new_password1.errors %&#125;</span><br><span class="line">        &lt;div class&#x3D;&quot;invalid-feedback&quot;&gt;</span><br><span class="line">            &#123;&#123; error &#125;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label name&#x3D;&quot;label_new_password2&quot; for&#x3D;&quot;&#123;&#123; password_change_form.new_password2.id_for_label &#125;&#125;&quot;&gt;&#123;&#123; password_change_form.new_password2.label &#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">        &#123;&#123; password_change_form.new_password2 &#125;&#125;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            if (document.getElementsByName(&#39;new_password2&#39;)[0].value !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">                document.getElementsByName(&#39;label_new_password2&#39;)[0].setAttribute(&#39;class&#39;, &#39;active&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">        &#123;% if password_change_form.new_password2.errors %&#125;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            document.getElementsByName(&#39;new_password2&#39;)[0].setAttribute(&#39;class&#39;, &#39;form-control is-invalid&#39;)</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">        &#123;% for error in password_change_form.new_password2.errors %&#125;</span><br><span class="line">        &lt;div style&#x3D;&quot;white-space: nowrap;&quot; class&#x3D;&quot;invalid-feedback&quot;&gt;</span><br><span class="line">            &#123;&#123; error &#125;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        &lt;small&gt;</span><br><span class="line">            최소 8개의 숫자와 문자 또는 특수기호를 입력해주세요.</span><br><span class="line">        &lt;&#x2F;small&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><h2 id="5-결과"><a href="#5-결과" class="headerlink" title="5. 결과"></a>5. 결과</h2><p><img src="14-1.GIF" alt="django-project-14"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/30/django-project-14/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 13. 프로필보기 / 수정 구현</title>
      <link>https://parkhyeonchae.github.io/2020/03/30/django-project-13/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/30/django-project-13/</guid>
      <pubDate>Sun, 29 Mar 2020 21:05:21 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-13-프로필보기-수정-구현&quot;&gt;&lt;a href=&quot;#Django-13-프로필보기-수정-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 13. 프로필보기 / 수정 구현&quot;&gt;&lt;/a&gt;Django 13. 프로필보기 / 수
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-13-프로필보기-수정-구현"><a href="#Django-13-프로필보기-수정-구현" class="headerlink" title="Django 13. 프로필보기 / 수정 구현"></a>Django 13. 프로필보기 / 수정 구현</h1><blockquote><p>Django 내장폼인 UserChangeForm을 사용해 사용자 프로필보기와 수정을 구현합니다.</p></blockquote><hr><h2 id="1-프로필보기-구현하기"><a href="#1-프로필보기-구현하기" class="headerlink" title="1. 프로필보기 구현하기"></a>1. 프로필보기 구현하기</h2><p>Profile 템플릿을 render하는 <strong>views.py</strong>에 아래와 같이 소스를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">@login_message_required</span><br><span class="line">def profile_view(request):</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;GET&#39;:</span><br><span class="line">        return render(request, &#39;users&#x2F;profile.html&#39;)</span><br></pre></td></tr></table></figure><p>Decorator로 로그인되지 않은 사용자의 접근을 막고 <strong>GET</strong> 요청이 들어오면 profile.html을 render합니다.  템플릿에서는 현재 사용자의 정보를 <strong>{ { user.&lt;필드명&gt; } }</strong> 형식으로 조회가 가능합니다. <strong>templates</strong>의 <strong>users</strong>에 <strong>profile.html</strong>을 생성하고 아래와 같이 소스를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;profile.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;아이디&lt;&#x2F;td&gt;</span><br><span class="line">        &#123;% if user.level &#x3D;&#x3D; &#39;0&#39;%&#125;</span><br><span class="line">        &lt;td&gt;&#123;&#123; user.user_id &#125;&#125;(개발자)&lt;&#x2F;td&gt;</span><br><span class="line">        &#123;% elif user.level &#x3D;&#x3D; &#39;1&#39; %&#125;</span><br><span class="line">        &lt;td&gt;&#123;&#123; user.user_id &#125;&#125;(관리자)&lt;&#x2F;td&gt;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        &lt;td&gt;&#123;&#123; user.user_id &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;이메일&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123; user.email &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;이름&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123; user.name &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure><p>위와 같은 형식으로 조회할 users 모델의 필드명을 입력합니다.</p><h2 id="2-프로필수정-forms-py-작성"><a href="#2-프로필수정-forms-py-작성" class="headerlink" title="2. 프로필수정 forms.py 작성"></a>2. 프로필수정 forms.py 작성</h2><p>회원정보수정 템플릿에 적용할 form을 작성하기 위해 django.auth의 <strong>UserChangeForm</strong>을 상속받는 폼클래스를 <strong>forms.py</strong>에 아래와 같이 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">from django.contrib.auth.forms import UserChangeForm</span><br><span class="line">from .choice import *</span><br><span class="line"></span><br><span class="line">class CustomCsUserChangeForm(UserChangeForm):</span><br><span class="line">    password &#x3D; None        </span><br><span class="line">    hp &#x3D; forms.IntegerField(label&#x3D;&#39;연락처&#39;, widget&#x3D;forms.NumberInput(</span><br><span class="line">        attrs&#x3D;&#123;&#39;class&#39;: &#39;form-control&#39;, &#39;maxlength&#39;:&#39;11&#39;, &#39;oninput&#39;:&quot;maxLengthCheck(this)&quot;,&#125;), </span><br><span class="line">    )        </span><br><span class="line">    name &#x3D; forms.CharField(label&#x3D;&#39;이름&#39;, widget&#x3D;forms.TextInput(</span><br><span class="line">        attrs&#x3D;&#123;&#39;class&#39;: &#39;form-control&#39;, &#39;maxlength&#39;:&#39;8&#39;,&#125;), </span><br><span class="line">    )        </span><br><span class="line">    student_id &#x3D; forms.IntegerField(label&#x3D;&#39;학번&#39;, widget&#x3D;forms.NumberInput(</span><br><span class="line">        attrs&#x3D;&#123;&#39;class&#39;: &#39;form-control&#39;, &#39;maxlength&#39;:&#39;8&#39;, &#39;oninput&#39;:&quot;maxLengthCheck(this)&quot;,&#125;), </span><br><span class="line">    )</span><br><span class="line">    grade &#x3D; forms.ChoiceField(choices&#x3D;GRADE_CHOICES, label&#x3D;&#39;학년&#39;, widget&#x3D;forms.Select(</span><br><span class="line">        attrs&#x3D;&#123;&#39;class&#39;: &#39;form-control&#39;,&#125;), </span><br><span class="line">    )</span><br><span class="line">    circles &#x3D; forms.ChoiceField(choices&#x3D;CIRCLES_CHOICES, label&#x3D;&#39;동아리&#39;, widget&#x3D;forms.Select(</span><br><span class="line">        attrs&#x3D;&#123;&#39;class&#39;: &#39;form-control&#39;,&#125;), </span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; User()</span><br><span class="line">        fields &#x3D; [&#39;hp&#39;, &#39;name&#39;, &#39;student_id&#39;, &#39;grade&#39;, &#39;circles&#39;]</span><br></pre></td></tr></table></figure><p>아이디와 메일 등 변경되어서는 안되는 필드들은 Meta 클래스 내에 표기하지 않습니다.</p><p><strong><a href="https://docs.djangoproject.com/en/1.8/_modules/django/contrib/auth/forms/" target="_blank" rel="external nofollow noopener noreferrer">Django 내장폼 공식문서</a></strong></p><h2 id="3-프로필수정-views-py-작성"><a href="#3-프로필수정-views-py-작성" class="headerlink" title="3. 프로필수정 views.py 작성"></a>3. 프로필수정 views.py 작성</h2><p><strong>views.py</strong>에 아래와 같이 프로필 수정 view의 소스를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from .forms import CustomCsUserChangeForm</span><br><span class="line"></span><br><span class="line">@login_message_required</span><br><span class="line">def profile_update_view(request):</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class="line">        user_change_form &#x3D; CustomCsUserChangeForm(request.POST, instance &#x3D; request.user)</span><br><span class="line"></span><br><span class="line">        if user_change_form.is_valid():</span><br><span class="line">            user_change_form.save()</span><br><span class="line">            messages.success(request, &#39;회원정보가 수정되었습니다.&#39;)</span><br><span class="line">            return render(request, &#39;users&#x2F;profile.html&#39;)</span><br><span class="line">    else:</span><br><span class="line">        user_change_form &#x3D; CustomCsUserChangeForm(instance &#x3D; request.user)</span><br><span class="line"></span><br><span class="line">        return render(request, &#39;users&#x2F;profile_update.html&#39;, &#123;&#39;user_change_form&#39;:user_change_form&#125;)</span><br></pre></td></tr></table></figure><p><em>(원래의 소스는 컴퓨터공학부와 일반사용자의 form이 각각 구분되어 있습니다. 이 포스팅에서는 일반사용자의 form은 제외하고 포스팅하겠습니다.)</em></p><p>마찬가지로 decorator를 추가하고 사용자가 수정하기 버튼을 클릭했을시 사용자의 정보들이 이전에 생성한 <strong>CustomCsUserChangeForm</strong>에 담겨야 하기에 <strong>instance = request.user</strong> 소스를 삽입합니다. 회원정보가 수정되면 <strong>UserChangeForm</strong>에서 검증을 해주며 성공하면 message와 함께 다시 프로필창으로 이동합니다.</p><h2 id="4-urls-py-작성"><a href="#4-urls-py-작성" class="headerlink" title="4. urls.py 작성"></a>4. urls.py 작성</h2><p>각각의 view와 url을 연결하기 위해 <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 아래의 path를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">path(&#39;profile&#x2F;&#39;, views.profile_view, name&#x3D;&#39;profile&#39;),</span><br><span class="line">path(&#39;profile&#x2F;update&#x2F;&#39;, views.profile_update_view, name&#x3D;&#39;profile_update&#39;),</span><br></pre></td></tr></table></figure><h2 id="5-결과"><a href="#5-결과" class="headerlink" title="5. 결과"></a>5. 결과</h2><p><img src="13-1.GIF" alt="django-project-13"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/30/django-project-13/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 12. 비밀번호찾기 인증번호 구현 (AJAX)</title>
      <link>https://parkhyeonchae.github.io/2020/03/30/django-project-12/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/30/django-project-12/</guid>
      <pubDate>Sun, 29 Mar 2020 17:08:41 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-12-비밀번호-찾기-구현-AJAX&quot;&gt;&lt;a href=&quot;#Django-12-비밀번호-찾기-구현-AJAX&quot; class=&quot;headerlink&quot; title=&quot;Django 12. 비밀번호 찾기 구현 (AJAX)&quot;&gt;&lt;/a&gt;Django 1
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-12-비밀번호-찾기-구현-AJAX"><a href="#Django-12-비밀번호-찾기-구현-AJAX" class="headerlink" title="Django 12. 비밀번호 찾기 구현 (AJAX)"></a>Django 12. 비밀번호 찾기 구현 (AJAX)</h1><blockquote><p>Jquery Ajax를 활용하고 인증번호를 확인 후 사용자의 비밀번호찾기를 구현합니다.</p></blockquote><hr><h2 id="1-인증번호-생성-함수-구현"><a href="#1-인증번호-생성-함수-구현" class="headerlink" title="1. 인증번호 생성 함수 구현"></a>1. 인증번호 생성 함수 구현</h2><p>이전 포스트와 같이 비밀번호찾기 또한 <strong>Ajax</strong>를 활용하여 구현합니다. 하지만 아이디찾기와는 다르게 회원가입 때 구현한 <strong>send_mail</strong>을 활용해 비밀번호찾기 인증번호를 발송하는 기능을 추가합니다. 비밀번호찾기 로직은 다음과 같습니다.</p><ol><li><strong>8자리의 랜덤한 문자를 생성하는 인증번호 함수를 구현한다.</strong></li><li><strong>비밀번호찾기 창을 통해 이름, 아이디, 메일을 입력한 후 Ajax로 view에 요청한다.</strong></li><li><strong>비밀번호찾기 버튼을 클릭했을시 templates에서 인증번호 타이머 스크립트를 실행한다.</strong></li><li><strong>Ajax요청시 send_mail 함수를 통해 요청한 사용자에게 인증번호를 담은 메일을 발송한다.</strong></li><li><strong>메일 발송과 함께 사용자 DB auth필드에 인증번호를 삽입한다.</strong></li><li><strong>입력된 인증번호가 DB auth 값과 일치하면 비밀번호변경 창으로 이동한다.</strong></li></ol><p>인증번호를 생성하는 함수를 구현하기 위해 send_mail 함수가 있는 <strong>users app</strong> 내 <strong>helper.py</strong>에 아래의 소스를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;helper.py</span><br><span class="line"></span><br><span class="line">import string</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">def email_auth_num():</span><br><span class="line">    LENGTH &#x3D; 8</span><br><span class="line">    string_pool &#x3D; string.ascii_letters + string.digits</span><br><span class="line">    auth_num &#x3D; &quot;&quot;</span><br><span class="line">    for i in range(LENGTH):</span><br><span class="line">        auth_num +&#x3D; random.choice(string_pool)</span><br><span class="line">    return auth_num</span><br></pre></td></tr></table></figure><h2 id="2-forms-py-작성"><a href="#2-forms-py-작성" class="headerlink" title="2. forms.py 작성"></a>2. forms.py 작성</h2><p><strong>forms.py</strong>에 아래와 같이 비밀번호찾기에 사용할 form을 작성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">class RecoveryPwForm(forms.Form):</span><br><span class="line">    user_id &#x3D; forms.CharField(</span><br><span class="line">        widget&#x3D;forms.TextInput,)</span><br><span class="line">    name &#x3D; forms.CharField(</span><br><span class="line">        widget&#x3D;forms.TextInput,)</span><br><span class="line">    email &#x3D; forms.EmailField(</span><br><span class="line">        widget&#x3D;forms.EmailInput,)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        fields &#x3D; [&#39;user_id&#39;, &#39;name&#39;, &#39;email&#39;]</span><br><span class="line"></span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        super(RecoveryPwForm, self).__init__(*args, **kwargs)</span><br><span class="line">        self.fields[&#39;user_id&#39;].label &#x3D; &#39;아이디&#39;</span><br><span class="line">        self.fields[&#39;user_id&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">            &#39;id&#39;: &#39;pw_form_id&#39;,</span><br><span class="line">        &#125;)</span><br><span class="line">        self.fields[&#39;name&#39;].label &#x3D; &#39;이름&#39;</span><br><span class="line">        self.fields[&#39;name&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">            &#39;id&#39;: &#39;pw_form_name&#39;,</span><br><span class="line">        &#125;)</span><br><span class="line">        self.fields[&#39;email&#39;].label &#x3D; &#39;이메일&#39;</span><br><span class="line">        self.fields[&#39;email&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">            &#39;id&#39;: &#39;pw_form_email&#39;,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>인증번호 입력 후 사용자의 비밀번호 변경 창에 사용할 <strong>SetPasswordForm</strong>을 상속받는 <strong>CustomSetPasswordForm</strong>을 아래와 같이 입력합나다. <strong><a href="https://docs.djangoproject.com/en/1.8/_modules/django/contrib/auth/forms/" target="_blank" rel="external nofollow noopener noreferrer">Django 내장폼 공식문서</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">from django.contrib.auth.forms import SetPasswordForm</span><br><span class="line"></span><br><span class="line">class CustomSetPasswordForm(SetPasswordForm):</span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        super(CustomSetPasswordForm, self).__init__(*args, **kwargs)</span><br><span class="line">        self.fields[&#39;new_password1&#39;].label &#x3D; &#39;새 비밀번호&#39;</span><br><span class="line">        self.fields[&#39;new_password1&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">        &#125;)</span><br><span class="line">        self.fields[&#39;new_password2&#39;].label &#x3D; &#39;새 비밀번호 확인&#39;</span><br><span class="line">        self.fields[&#39;new_password2&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h2 id="3-views-py-작성"><a href="#3-views-py-작성" class="headerlink" title="3. views.py 작성"></a>3. views.py 작성</h2><p>비밀번호찾기 GET시 매핑할 view인 <strong>RecoveryPwView</strong>를 <strong>views.py</strong>에 아래와 같이 작성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from .forms import RecoveryPwForm</span><br><span class="line"></span><br><span class="line">@method_decorator(logout_message_required, name&#x3D;&#39;dispatch&#39;)</span><br><span class="line">class RecoveryPwView(View):</span><br><span class="line">    template_name &#x3D; &#39;users&#x2F;recovery_pw.html&#39;</span><br><span class="line">    recovery_pw &#x3D; RecoveryPwForm</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        if request.method&#x3D;&#x3D;&#39;GET&#39;:</span><br><span class="line">            form &#x3D; self.recovery_pw(None)</span><br><span class="line">            return render(request, self.template_name, &#123; &#39;form&#39;:form, &#125;)</span><br></pre></td></tr></table></figure><p>비밀번호찾기 창에서 필드 값들을 입력하고 Ajax요청을 하는 view를 아래와 같이 작성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from .helper import email_auth_num</span><br><span class="line"></span><br><span class="line">def ajax_find_pw_view(request):</span><br><span class="line">    user_id &#x3D; request.POST.get(&#39;user_id&#39;)</span><br><span class="line">    name &#x3D; request.POST.get(&#39;name&#39;)</span><br><span class="line">    email &#x3D; request.POST.get(&#39;email&#39;)</span><br><span class="line">    target_user &#x3D; User.objects.get(user_id&#x3D;user_id, name&#x3D;name, email&#x3D;email)</span><br><span class="line"></span><br><span class="line">    if target_user:</span><br><span class="line">        auth_num &#x3D; email_auth_num()</span><br><span class="line">        target_user.auth &#x3D; auth_num </span><br><span class="line">        target_user.save()</span><br><span class="line"></span><br><span class="line">        send_mail(</span><br><span class="line">            &#39;비밀번호 찾기 인증메일입니다.&#39;,</span><br><span class="line">            [email],</span><br><span class="line">            html&#x3D;render_to_string(&#39;users&#x2F;recovery_email.html&#39;, &#123;</span><br><span class="line">                &#39;auth_num&#39;: auth_num,</span><br><span class="line">            &#125;),</span><br><span class="line">        )</span><br><span class="line">    return HttpResponse(json.dumps(&#123;&quot;result&quot;: target_user.user_id&#125;, cls&#x3D;DjangoJSONEncoder), content_type &#x3D; &quot;application&#x2F;json&quot;)</span><br></pre></td></tr></table></figure><p>Ajax로 요청된 값들을 User 모델에서 찾은 후 반환된 <strong>target_user</strong>의 <strong>auth</strong>필드에 방금 구현한 인증번호 생성함수를 통해 <strong>auth_num</strong>를 저장합니다. 후에 <strong>send_mail</strong> 함수로 인증번호인 <strong>auth_num</strong>을 담은 메일을 사용자에게 발송합니다.</p><p>템플릿에서 입력된 인증번호를 확인하는 view는 아래와 같습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">def auth_confirm_view(request):</span><br><span class="line">    user_id &#x3D; request.POST.get(&#39;user_id&#39;)</span><br><span class="line">    input_auth_num &#x3D; request.POST.get(&#39;input_auth_num&#39;)</span><br><span class="line">    target_user &#x3D; User.objects.get(user_id&#x3D;user_id, auth&#x3D;input_auth_num)</span><br><span class="line">    target_user.auth &#x3D; &quot;&quot;</span><br><span class="line">    target_user.save()</span><br><span class="line">    request.session[&#39;auth&#39;] &#x3D; target_user.user_id  </span><br><span class="line">    </span><br><span class="line">    return HttpResponse(json.dumps(&#123;&quot;result&quot;: target_user.user_id&#125;, cls&#x3D;DjangoJSONEncoder), content_type &#x3D; &quot;application&#x2F;json&quot;)</span><br></pre></td></tr></table></figure><p>마찬가지로 Ajax로 요청된 <strong>user_id</strong>와 입력된 인증번호인 <strong>input_auth_num</strong>가 일치하는 쿼리를 User모델에서 찾아 반환한 후 auth 세션을 생성하고 비밀번호를 찾으려는 사용자의 user_id를 세션값으로 생성합니다.</p><p>마지막으로 auth_confirm_view를 통해 Ajax통신이 성공했다면 redirect될 비밀번호 변경창의 view를 아래와 같이 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from .forms import CustomSetPasswordForm        </span><br><span class="line"></span><br><span class="line">@logout_message_required</span><br><span class="line">def auth_pw_reset_view(request):</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;GET&#39;:</span><br><span class="line">        if not request.session.get(&#39;auth&#39;, False):</span><br><span class="line">            raise PermissionDenied</span><br><span class="line"></span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class="line">        session_user &#x3D; request.session[&#39;auth&#39;]</span><br><span class="line">        current_user &#x3D; User.objects.get(user_id&#x3D;session_user)</span><br><span class="line">        login(request, current_user)</span><br><span class="line"></span><br><span class="line">        reset_password_form &#x3D; CustomSetPasswordForm(request.user, request.POST)</span><br><span class="line">        </span><br><span class="line">        if reset_password_form.is_valid():</span><br><span class="line">            user &#x3D; reset_password_form.save()</span><br><span class="line">            messages.success(request, &quot;비밀번호 변경완료! 변경된 비밀번호로 로그인하세요.&quot;)</span><br><span class="line">            logout(request)</span><br><span class="line">            return redirect(&#39;users:login&#39;)</span><br><span class="line">        else:</span><br><span class="line">            logout(request)</span><br><span class="line">            request.session[&#39;auth&#39;] &#x3D; session_user</span><br><span class="line">    else:</span><br><span class="line">        reset_password_form &#x3D; CustomSetPasswordForm(request.user)</span><br><span class="line"></span><br><span class="line">    return render(request, &#39;users&#x2F;password_reset.html&#39;, &#123;&#39;form&#39;:reset_password_form&#125;)</span><br></pre></td></tr></table></figure><p><strong>GET</strong>시 auth_confirm_view에서 생성한 세션값을 비교해 False면 403 에러를 발생시킵니다. 인증된 사용자의 비밀번호 변경값이 <strong>POST</strong>로 넘어오면 Django에서 제공해주는 SetPasswordForm를 사용하여 비밀번호 변경을 구현하기 위해 유지되고 있는 세션의 user를 login합니다. 그 후 유효성검사에 성공하면 변경된 비밀번호를 저장한 후 logout하여 세션을 해제합니다.</p><h2 id="4-urls-py-작성"><a href="#4-urls-py-작성" class="headerlink" title="4. urls.py 작성"></a>4. urls.py 작성</h2><p>구현한 view들을 연결하기 위해 <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 아래의 소스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">path(&#39;recovery&#x2F;pw&#x2F;&#39;, views.RecoveryPwView.as_view(), name&#x3D;&#39;recovery_pw&#39;),</span><br><span class="line">path(&#39;recovery&#x2F;pw&#x2F;find&#x2F;&#39;, views.ajax_find_pw_view, name&#x3D;&#39;ajax_pw&#39;),</span><br><span class="line">path(&#39;recovery&#x2F;pw&#x2F;auth&#x2F;&#39;, views.auth_confirm_view, name&#x3D;&#39;recovery_auth&#39;),</span><br><span class="line">path(&#39;recovery&#x2F;pw&#x2F;reset&#x2F;&#39;, views.auth_pw_reset_view, name&#x3D;&#39;recovery_pw_reset&#39;),</span><br></pre></td></tr></table></figure><h2 id="5-templates-작성"><a href="#5-templates-작성" class="headerlink" title="5. templates 작성"></a>5. templates 작성</h2><p><strong>templates</strong>의 <strong>users</strong>에 <strong>recovery_email.html</strong>을 생성하고 인증번호가 담긴 메일의 템플릿을 작성한 후 <strong>recovery_pw.html</strong>을 생성하여 아래의 소스를 작성합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;recovery_pw.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label name&#x3D;&quot;label_user_id&quot; for&#x3D;&quot;&#123;&#123; form.user_id.id_for_label &#125;&#125;&quot;&gt;&#123;&#123; form.user_id.label &#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">        &#123;&#123; form.user_id &#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label name&#x3D;&quot;label_name&quot; for&#x3D;&quot;&#123;&#123; form.name.id_for_label &#125;&#125;&quot;&gt;&#123;&#123; form.name.label &#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">        &#123;&#123; form.name &#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label name&#x3D;&quot;label_email&quot; for&#x3D;&quot;&#123;&#123; form.email.id_for_label &#125;&#125;&quot;&gt;&#123;&#123; form.email.label &#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">            &#123;&#123; form.email &#125;&#125;</span><br><span class="line">        &lt;small&gt;</span><br><span class="line">            등록하신 메일로 인증번호가 발송됩니다.</span><br><span class="line">        &lt;&#x2F;small&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;div_find_pw&quot;&gt;</span><br><span class="line">        &lt;button id&#x3D;&quot;find_pw&quot; name&#x3D;&quot;recovery_pw&quot;&gt;비밀번호찾기&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;result_pw&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>Ajax 스크립트 코드는 이전 포스트의 아이디찾기와 비슷합니다. 비밀번호찾기 버튼을 클릭 후 Ajax통신이 성공했을 경우 인증번호 입력 타이머 스크립트는 아래와 같습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;recovery_pw.html --&gt;</span><br><span class="line"></span><br><span class="line">function countdown( elementName, minutes, seconds ) &#123;</span><br><span class="line">    var elementName, endTime, hours, mins, msLeft, time;</span><br><span class="line">    function twoDigits( n ) &#123;</span><br><span class="line">        return (n &lt;&#x3D; 9 ? &quot;0&quot; + n : n);</span><br><span class="line">    &#125;</span><br><span class="line">    function updateTimer() &#123;</span><br><span class="line">        msLeft &#x3D; endTime - (+new Date);</span><br><span class="line">        if ( msLeft &lt; 1000 ) &#123;</span><br><span class="line">            alert(&quot;인증시간이 초과되었습니다.&quot;);</span><br><span class="line">            $(&quot;&quot; + elementName).remove();</span><br><span class="line">            cert_ok &#x3D; false;</span><br><span class="line">            certificationNum &#x3D; false;</span><br><span class="line">            location.href &#x3D; &quot;&#123;% url &#39;users:recovery_pw&#39; %&#125;&quot;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            time &#x3D; new Date( msLeft );</span><br><span class="line">            hours &#x3D; time.getUTCHours();</span><br><span class="line">            mins &#x3D; time.getUTCMinutes();</span><br><span class="line">            $(&quot;&quot; + elementName).html((hours ? hours + &#39;:&#39; + twoDigits( mins ) : twoDigits(mins))</span><br><span class="line">            + &#39;:&#39; + twoDigits( time.getUTCSeconds()));</span><br><span class="line">            setTimeout( updateTimer, time.getUTCMilliseconds() + 500 );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    endTime &#x3D; (+new Date) + 1000 * (60*minutes + seconds) + 500;</span><br><span class="line">    updateTimer();</span><br><span class="line">&#125;</span><br><span class="line">countdown(&quot;#timeset&quot;, 5, 0);</span><br></pre></td></tr></table></figure><p>위 스크립트와 동일한 위치인 success부분에 auth_confirm_view와 매핑되는 ajax를 한번 더 구현하고 redirect 될 비밀번호 변경창인 <strong>password_reset.html</strong>을 생성하면 인증번호를 이용한 비밀번호가 찾기 구현이 완료되게 됩니다.</p><p> 전체 소스는 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>를 참고하세요.</p><h2 id="6-결과"><a href="#6-결과" class="headerlink" title="6. 결과"></a>6. 결과</h2><p><img src="12-1.GIF" alt="django-project-12"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/30/django-project-12/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 11. 아이디찾기 구현 (AJAX)</title>
      <link>https://parkhyeonchae.github.io/2020/03/29/django-project-11/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/29/django-project-11/</guid>
      <pubDate>Sun, 29 Mar 2020 05:14:47 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-11-아이디찾기-구현-AJAX&quot;&gt;&lt;a href=&quot;#Django-11-아이디찾기-구현-AJAX&quot; class=&quot;headerlink&quot; title=&quot;Django 11. 아이디찾기 구현 (AJAX)&quot;&gt;&lt;/a&gt;Django 11. 아이디
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-11-아이디찾기-구현-AJAX"><a href="#Django-11-아이디찾기-구현-AJAX" class="headerlink" title="Django 11. 아이디찾기 구현 (AJAX)"></a>Django 11. 아이디찾기 구현 (AJAX)</h1><blockquote><p>Jquery Ajax를 활용하여 비동기적으로 사용자의 아이디 찾기를 구현합니다.</p></blockquote><hr><h2 id="1-Ajax-CDN-추가"><a href="#1-Ajax-CDN-추가" class="headerlink" title="1. Ajax CDN 추가"></a>1. Ajax CDN 추가</h2><p><strong>Jquery Ajax</strong>는 웹페이지 전체를 다시 로드하지 않고 일부분만 로드하는 <strong>비동기 통신</strong>의 사용기법 중 하나입니다. 쉽게 말해 동적인 웹페이지를 만들기 위한 방법으로, JavaScript fetch API 등 여러가지 기법이 있지만 이 프로젝트에서는 이번 포스팅인 아이디찾기 뿐 아니라 비밀번호 찾기, 댓글쓰기 등과 같은 기능을 구현할 때, 화면전체를 로드하지 않고 특정 데이터만 로드하기 위해 Jquery의 Ajax를 사용하겠습니다.</p><p>Ajax를 사용하기 위해 <strong>Jquery CDN</strong>을 아래와 같이 <strong>templates</strong>의 <strong>user_base.html</strong>에 추가해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;user_base.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;3.4.1&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-forms-py-작성"><a href="#2-forms-py-작성" class="headerlink" title="2. forms.py 작성"></a>2. forms.py 작성</h2><p>form을 생성하기 위해 <strong>forms.py</strong>에 아래와 같이 <strong>RecoveryIdForm</strong> 클래스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">class RecoveryIdForm(forms.Form):</span><br><span class="line">    name &#x3D; forms.CharField(widget&#x3D;forms.TextInput,)</span><br><span class="line">    email &#x3D; forms.EmailField(widget&#x3D;forms.EmailInput,)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        fields &#x3D; [&#39;name&#39;, &#39;email&#39;]</span><br><span class="line"></span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        super(RecoveryIdForm, self).__init__(*args, **kwargs)</span><br><span class="line">        self.fields[&#39;name&#39;].label &#x3D; &#39;이름&#39;</span><br><span class="line">        self.fields[&#39;name&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">            &#39;id&#39;: &#39;form_name&#39;,</span><br><span class="line">        &#125;)</span><br><span class="line">        self.fields[&#39;email&#39;].label &#x3D; &#39;이메일&#39;</span><br><span class="line">        self.fields[&#39;email&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">            &#39;id&#39;: &#39;form_email&#39; </span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h2 id="3-views-py-작성"><a href="#3-views-py-작성" class="headerlink" title="3. views.py 작성"></a>3. views.py 작성</h2><p>접속중인 사용자의 접근을 방지하기 위해 decorator를 추가하고, GET으로 방금 생성한 form을 뿌려주는 <strong>RecoveryIdView</strong> 클래스를 <strong>views.py</strong>에 아래와 같이 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from .forms import RecoveryIdForm</span><br><span class="line">from django.views.generic import View</span><br><span class="line"></span><br><span class="line">@method_decorator(logout_message_required, name&#x3D;&#39;dispatch&#39;)</span><br><span class="line">class RecoveryIdView(View):</span><br><span class="line">    template_name &#x3D; &#39;users&#x2F;recovery_id.html&#39;</span><br><span class="line">    form &#x3D; RecoveryIdForm</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        if request.method&#x3D;&#x3D;&#39;GET&#39;:</span><br><span class="line">            form &#x3D; self.recovery_id(None)</span><br><span class="line">        return render(request, self.template_name, &#123; &#39;form&#39;:form, &#125;)</span><br></pre></td></tr></table></figure><p>그리고 RecoveryIdView와 매핑된 템플릿에서 아이디찾기라는 버튼을 클릭했을 때 요청되는 Ajax함수를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">import json</span><br><span class="line">from django.core.serializers.json import DjangoJSONEncoder</span><br><span class="line"></span><br><span class="line">def ajax_find_id_view(request):</span><br><span class="line">    name &#x3D; request.POST.get(&#39;name&#39;)</span><br><span class="line">    email &#x3D; request.POST.get(&#39;email&#39;)</span><br><span class="line">    result_id &#x3D; User.objects.get(name&#x3D;name, email&#x3D;email)</span><br><span class="line">       </span><br><span class="line">    return HttpResponse(json.dumps(&#123;&quot;result_id&quot;: result_id.user_id&#125;, cls&#x3D;DjangoJSONEncoder), content_type &#x3D; &quot;application&#x2F;json&quot;)</span><br></pre></td></tr></table></figure><p>템플릿에서 <u>사용자의 name과 email을 입력하고 아이디찾기 버튼을 클릭했을시 각 데이터들이 Json객체 담겨 Ajax요청이 들어오게 됩니다. view에서는 일치하는 user객체를 찾아 쿼리를 반환 후, HttpResponse를 통해 응답하고 반환되는 값이 없으면 DoesNotExist 에러를 발생시킵니다.</u></p><h2 id="4-urls-py-작성"><a href="#4-urls-py-작성" class="headerlink" title="4. urls.py 작성"></a>4. urls.py 작성</h2><p>생성한 각각의 view를 연결하기 위해 <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 아래의 소스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">path(&#39;recovery&#x2F;id&#x2F;&#39;, views.RecoveryIdView.as_view(), name&#x3D;&#39;recovery_id&#39;),</span><br><span class="line">path(&#39;recovery&#x2F;id&#x2F;find&#x2F;&#39;, views.ajax_find_id_view, name&#x3D;&#39;ajax_id&#39;),</span><br></pre></td></tr></table></figure><h2 id="5-templates-작성"><a href="#5-templates-작성" class="headerlink" title="5. templates 작성"></a>5. templates 작성</h2><p><strong>recovery_id.html</strong>을 생성하고 아래와 같이 템플릿을 작성한 뒤, Ajax를 위한 Script를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;recovery_id.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;label name&#x3D;&quot;label_name&quot; for&#x3D;&quot;&#123;&#123; form_id.name.id_for_label &#125;&#125;&quot;&gt;&#123;&#123; form.name.label &#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">    &#123;&#123; form.name &#125;&#125;</span><br><span class="line">    &lt;label name&#x3D;&quot;label_email&quot; for&#x3D;&quot;&#123;&#123; form_id.email.id_for_label &#125;&#125;&quot;&gt;&#123;&#123; form.email.label &#125;&#125;&lt;&#x2F;label&gt;</span><br><span class="line">    &#123;&#123; form.email &#125;&#125;</span><br><span class="line">    &lt;small&gt;</span><br><span class="line">        등록하신 이름과 메일주소가 일치해야 합니다.</span><br><span class="line">    &lt;&#x2F;small&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button id&#x3D;&quot;find_id&quot; name&#x3D;&quot;recovery_id&quot;&gt;아이디찾기&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;result_id&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            $(&#39;#find_id&#39;).click(function () &#123;</span><br><span class="line">                var name &#x3D; $(&quot;#form_name&quot;).val();</span><br><span class="line">                var email &#x3D; $(&quot;#form_email&quot;).val();</span><br><span class="line"></span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    type: &quot;POST&quot;,</span><br><span class="line">                    url: &quot;&#x2F;users&#x2F;recovery&#x2F;id&#x2F;find&#x2F;&quot;,</span><br><span class="line">                    dataType: &quot;json&quot;,</span><br><span class="line">                    data: &#123;</span><br><span class="line">                        &#39;name&#39;: name,</span><br><span class="line">                        &#39;email&#39;: email,</span><br><span class="line">                        &#39;csrfmiddlewaretoken&#39;: &#39;&#123;&#123;csrf_token&#125;&#125;&#39;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    success: function (response) &#123;</span><br><span class="line">                        $(&#39;#result_id&#39;).replaceWith(</span><br><span class="line">                            &#39;&lt;div id&#x3D;&quot;result_id&quot;&gt;&lt;hr&gt;&lt;div&gt;&lt;span&gt;입력된 정보로 가입된 아이디는 &lt;&#x2F;span&gt;&lt;span id&#x3D;&quot;result_id&quot;&gt;&#39; +</span><br><span class="line">                                response.result_id +&#39;&lt;&#x2F;span&gt;&lt;span&gt; 입니다.&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&lt;hr&gt;&lt;&#x2F;div&gt;&#39;)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    error: function () &#123;</span><br><span class="line">                        if (name &#x3D;&#x3D; &quot;&quot; || email &#x3D;&#x3D; &quot;&quot;) &#123;</span><br><span class="line">                            alert(&#39;이름와 이메일을 입력해주세요.&#39;);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            alert(&#39;입력하신 정보가 일치하지 않거나 존재하지 않습니다.&#39;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>Script를 보면 아이디 찾기 버튼을 클릭할 시 views.py에 작성해둔 ajax_find_id_view와 매핑된 url로 <u>사용자가 입력한 name과 email, csrf공격보안을 위한 csrftoken을 data에 담아 Json타입의 POST 요청</u>을 하게 됩니다.</p><p>view에서는 data값을 받아 일치하는 쿼리를 찾은 후, 응답할시(success) 아이디 찾기 결과를 나타낼 result_id란 id값을 가지는 div부분을 반환된 값으로 replaceWith하게 됩니다. 입력 필드들의 값의 유무를 체크하고 일치하는 쿼리가 없어 DoesNotExist오류가 발생해 응답오류(error)가 발생했다면 작성한 alert창을 표시하도록 구현합니다.</p><h2 id="6-결과"><a href="#6-결과" class="headerlink" title="6. 결과"></a>6. 결과</h2><p><img src="11-1.GIF" alt="django-project-11"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/29/django-project-11/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 10. 로그인 상태 유지하기 구현</title>
      <link>https://parkhyeonchae.github.io/2020/03/27/django-project-10/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/27/django-project-10/</guid>
      <pubDate>Thu, 26 Mar 2020 23:12:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-10-로그인-상태-유지하기-구현&quot;&gt;&lt;a href=&quot;#Django-10-로그인-상태-유지하기-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 10. 로그인 상태 유지하기 구현&quot;&gt;&lt;/a&gt;Django 10. 로그
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-10-로그인-상태-유지하기-구현"><a href="#Django-10-로그인-상태-유지하기-구현" class="headerlink" title="Django 10. 로그인 상태 유지하기 구현"></a>Django 10. 로그인 상태 유지하기 구현</h1><blockquote><p>사용자의 선택에 따라 클라이언트 프로세스 종료시에도 접속 상태를 유지할 수 있도록 구현합니다.</p></blockquote><hr><h2 id="1-settings-py-설정"><a href="#1-settings-py-설정" class="headerlink" title="1. settings.py 설정"></a>1. settings.py 설정</h2><p>Dango의 login 세션은 기본적으로 브라우저 등과 같은 클라이언트의 프로세스를 종료해도 서버단에서 세션을 유지시키기 때문에 logout 함수 실행 전까지 사용자의 세션이 남아있게 됩니다. 로그인 창에서 Checkbox를 통해 사용자가 로그인 상태를 유지할 것인지 직접 선택하게 하기 위해 <strong>settings.py</strong>에 아래의 소스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cs_web&#x2F;settings.py</span><br><span class="line"></span><br><span class="line">SESSION_EXPIRE_AT_BROWSER_CLOSE &#x3D; True</span><br></pre></td></tr></table></figure><p>위 소스를 추가함으로써 프로세스의 종료시 세션을 만료시키도록 설정합니다. default 설정은 False입니다.</p><p><em>*브라우저가 종료되었음을 서버에서 탐지할 수는 없으므로 브라우저가 그냥 종료될 때 세션이 만료되는 것이 아니라 프로세스는 살아있기에 프로세스를 종료해야 세션이 삭제됩니다.</em></p><p><strong><a href="https://django.readthedocs.io/en/1.4.X/topics/http/sessions.html" target="_blank" rel="external nofollow noopener noreferrer">Django Session 문서</a></strong></p><h2 id="2-views-py-수정"><a href="#2-views-py-수정" class="headerlink" title="2. views.py 수정"></a>2. views.py 수정</h2><p>로그인 창에서 로그인 상태 유지 Checkbox를 통해 넘어온 값을 확인하여 settings.py의 세션 만료 설정을 False로 변경하는 소스를 <strong>views.py</strong>의 <strong>LoginView</strong> 클래스 내 login(self.request, user) 소스 아래에 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line">if user is not None:</span><br><span class="line">    self.request.session[&#39;user_id&#39;] &#x3D; user_id</span><br><span class="line">    login(self.request, user)</span><br><span class="line">    remember_session &#x3D; self.request.POST.get(&#39;remember_session&#39;, False)</span><br><span class="line">    if remember_session:</span><br><span class="line">        settings.SESSION_EXPIRE_AT_BROWSER_CLOSE &#x3D; False</span><br></pre></td></tr></table></figure><h2 id="3-templates-수정"><a href="#3-templates-수정" class="headerlink" title="3. templates 수정"></a>3. templates 수정</h2><p>사용자가 로그인 상태 유지 checkbox를 선택하고 로그인을 진행할 시 view에서는 remember_session의 유무를 비교하도록 <strong>login.html</strong>의 <strong>form</strong>내부에 아래와 같이 remember_session이란 name 값을 가지는 checkbox를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;login.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;remember_session&quot;&#x2F;&gt;</span><br><span class="line">    &lt;span&gt;로그인 상태 유지&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;label&gt;</span><br></pre></td></tr></table></figure><p> 사용자의 로그인 상태유지 선택에 따라 세션 유지를 확인해보면 잘 적용되어 동작하는 것을 확인할 수 있습니다.</p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/27/django-project-10/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 09. 로그인, 로그아웃 구현</title>
      <link>https://parkhyeonchae.github.io/2020/03/27/django-project-09/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/27/django-project-09/</guid>
      <pubDate>Thu, 26 Mar 2020 20:16:37 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-09-로그인-로그아웃-구현&quot;&gt;&lt;a href=&quot;#Django-09-로그인-로그아웃-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 09. 로그인, 로그아웃 구현&quot;&gt;&lt;/a&gt;Django 09. 로그인, 로그아웃 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-09-로그인-로그아웃-구현"><a href="#Django-09-로그인-로그아웃-구현" class="headerlink" title="Django 09. 로그인, 로그아웃 구현"></a>Django 09. 로그인, 로그아웃 구현</h1><blockquote><p>Django Authentication에서 제공하는 기능을 사용하여 사용자 로그인, 로그아웃을 구현합니다.</p></blockquote><hr><h2 id="1-로그인-forms-py-작성"><a href="#1-로그인-forms-py-작성" class="headerlink" title="1. 로그인 forms.py 작성"></a>1. 로그인 forms.py 작성</h2><p>Login을 구현하기 위해 사용할 form을 먼저 구현하겠습니다. <strong>users app</strong>의 <strong>forms.py</strong>에 해쉬화된 비밀번호를 검사하는 <strong>check_password</strong>를 import 한 후 아래의 소스를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">class LoginForm(forms.Form):</span><br><span class="line">    user_id &#x3D; forms.CharField(</span><br><span class="line">        widget&#x3D;forms.TextInput(</span><br><span class="line">        attrs&#x3D;&#123;&#39;class&#39;: &#39;form-control&#39;,&#125;), </span><br><span class="line">        error_messages&#x3D;&#123;&#39;required&#39;: &#39;아이디을 입력해주세요.&#39;&#125;,</span><br><span class="line">        max_length&#x3D;17,</span><br><span class="line">        label&#x3D;&#39;아이디&#39;</span><br><span class="line">    )</span><br><span class="line">    password &#x3D; forms.CharField(</span><br><span class="line">        widget&#x3D;forms.PasswordInput(</span><br><span class="line">        attrs&#x3D;&#123;&#39;class&#39;: &#39;form-control&#39;,&#125;), </span><br><span class="line">        error_messages&#x3D;&#123;&#39;required&#39;: &#39;비밀번호를 입력해주세요.&#39;&#125;,</span><br><span class="line">        label&#x3D;&#39;비밀번호&#39;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    def clean(self):</span><br><span class="line">        cleaned_data &#x3D; super().clean()</span><br><span class="line">        user_id &#x3D; cleaned_data.get(&#39;user_id&#39;)</span><br><span class="line">        password &#x3D; cleaned_data.get(&#39;password&#39;)</span><br><span class="line"></span><br><span class="line">        if user_id and password:</span><br><span class="line">            try:</span><br><span class="line">               user &#x3D; User.objects.get(user_id&#x3D;user_id)</span><br><span class="line">            except User.DoesNotExist:</span><br><span class="line">                self.add_error(&#39;user_id&#39;, &#39;아이디가 존재하지 않습니다.&#39;)</span><br><span class="line">                return</span><br><span class="line">            </span><br><span class="line">            if not check_password(password, user.password):</span><br><span class="line">                self.add_error(&#39;password&#39;, &#39;비밀번호가 틀렸습니다.&#39;)</span><br></pre></td></tr></table></figure><p>LoginForm 클래스를 생성한 뒤 입력필드에 맞는 적절한 <strong>widget</strong>을 삽입합니다. </p><p>clean 함수를 클래스 내부에 추가하고 해당 입력값에 맞는 표준 형식으로 변환하기 위해 <strong>cleaned_data</strong>로 form에 입력된 user_id와 password 값을 담아두고 검사하여 아이디 존재여부와 비밀번호 오류를 form에서 처리하도록 구현하였습니다.</p><p><strong><a href="https://docs.djangoproject.com/en/3.0/ref/forms/widgets/" target="_blank" rel="external nofollow noopener noreferrer">Django Forms Widgets 공식문서</a></strong></p><h2 id="2-로그인-views-py-작성"><a href="#2-로그인-views-py-작성" class="headerlink" title="2. 로그인 views.py 작성"></a>2. 로그인 views.py 작성</h2><p>Django에서 제공하는 로그인 기능을 사용하기 위해 contrib.auth의 <strong>login</strong>, <strong>authenticate</strong> 와 Generic View인 <strong>FormView</strong>를 import 한 후 users app의 <strong>views.py</strong>에 아래의 코드를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from .forms import LoginForm</span><br><span class="line">from django.contrib.auth import login, authenticate</span><br><span class="line">from django.views.generic import FormView</span><br><span class="line"></span><br><span class="line">@method_decorator(logout_message_required, name&#x3D;&#39;dispatch&#39;)</span><br><span class="line">class LoginView(FormView):</span><br><span class="line">    template_name &#x3D; &#39;users&#x2F;login.html&#39;</span><br><span class="line">    form_class &#x3D; LoginForm</span><br><span class="line">    success_url &#x3D; &#39;&#x2F;users&#x2F;main&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">    def form_valid(self, form):</span><br><span class="line">        user_id &#x3D; form.cleaned_data.get(&quot;user_id&quot;)</span><br><span class="line">        password &#x3D; form.cleaned_data.get(&quot;password&quot;)</span><br><span class="line">        user &#x3D; authenticate(self.request, username&#x3D;user_id, password&#x3D;password)</span><br><span class="line">        </span><br><span class="line">        if user is not None:</span><br><span class="line">            self.request.session[&#39;user_id&#39;] &#x3D; user_id</span><br><span class="line">            login(self.request, user)</span><br><span class="line"></span><br><span class="line">        return super().form_valid(form)</span><br></pre></td></tr></table></figure><p>마찬가지로 이미 로그인 중인 사용자의 접근을 막기 위해 <strong>logout_message_required</strong>를 사용하고, 직접 구현한 decorators의 user객체를 비교하기 위해 <strong>user_id</strong>란 이름의 세션에 로그인한 <strong>user_id</strong> 값을 추가합니다. form_valid를 통과한 user 객체가 존재한다면 로그인을 한 후 작성되어 있는 main페이지로 이동하게됩니다.</p><h2 id="3-로그아웃-views-py-작성"><a href="#3-로그아웃-views-py-작성" class="headerlink" title="3.  로그아웃 views.py 작성"></a>3.  로그아웃 views.py 작성</h2><p>Django의 <strong>logout</strong>을 호출하면 현재 요청에 대한 세션이 모두 제거됩니다. views.py에 <strong>logout</strong>을 import 한 후 아래의 코드를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from django.contrib.auth import logout</span><br><span class="line"></span><br><span class="line">def logout_view(request):</span><br><span class="line">    logout(request)</span><br><span class="line">    return redirect(&#39;&#x2F;&#39;)</span><br></pre></td></tr></table></figure><h2 id="4-urls-py-작성"><a href="#4-urls-py-작성" class="headerlink" title="4. urls.py 작성"></a>4. urls.py 작성</h2><p>구현한 login, logout view를 연결하기 위해 <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 아래의 코드를 추가합니다. 로그인 성공시 이동할 main path도 함께 추가합니다. main페이지 구현은 따로 포스팅하지 않겠습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">path(&#39;main&#x2F;&#39;, views.main_view, name&#x3D;&#39;main&#39;),</span><br><span class="line">path(&#39;login&#x2F;&#39;, views.LoginView.as_view(), name&#x3D;&#39;login&#39;),</span><br><span class="line">path(&#39;logout&#x2F;&#39;, views.logout_view, name&#x3D;&#39;logout&#39;),</span><br></pre></td></tr></table></figure><h2 id="5-templates-작성"><a href="#5-templates-작성" class="headerlink" title="5. templates 작성"></a>5. templates 작성</h2><p>templates의 <strong>users</strong>폴더에 <strong>login.html</strong>을 생성하고 아래의 코드를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;login.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;.&quot; novalidate&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label name&#x3D;&quot;label_user_id&quot; for&#x3D;&quot;&#123;&#123; form.user_id.id_for_label &#125;&#125;&quot;&gt;</span><br><span class="line">            &#123;&#123; form.user_id.label &#125;&#125;</span><br><span class="line">        &lt;&#x2F;label&gt;</span><br><span class="line">        &#123;&#123; form.user_id &#125;&#125;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            if (document.getElementsByName(&#39;user_id&#39;)[0].value !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">                document.getElementsByName(&#39;label_user_id&#39;)[0].setAttribute(&#39;class&#39;, &#39;active&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">        &#123;% if form.user_id.errors %&#125;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            document.getElementsByName(&#39;user_id&#39;)[0].setAttribute(&#39;class&#39;, &#39;form-control is-invalid&#39;)</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">        &#123;% for error in form.user_id.errors %&#125;</span><br><span class="line">        &lt;div class&#x3D;&quot;invalid-feedback&quot;&gt;</span><br><span class="line">            &#123;&#123; error &#125;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>위 소스는 login.html의 user_id 입력 필드입니다. <strong>{ { form.user_id } }</strong>로 forms.py에서 설정한 <strong>widget type</strong>을 생성하고 <strong>add_error</strong>가 있다면 <strong>erros</strong> 값으로 넘어와 오류를 출력하게 됩니다. password 입력 필드 또한 ‘user_id’ 부분을 forms.py에서 지정한 ‘password’로 바꿔 작성하면 로그인 템플릿 구현이 완료됩니다.</p><h2 id="6-결과"><a href="#6-결과" class="headerlink" title="6. 결과"></a>6. 결과</h2><p><img src="09-1.GIF" alt="django-project-09"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/27/django-project-09/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 08. SMTP 회원가입 인증메일 구현</title>
      <link>https://parkhyeonchae.github.io/2020/03/26/django-project-08/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/26/django-project-08/</guid>
      <pubDate>Thu, 26 Mar 2020 11:46:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-08-SMTP-회원가입-인증메일-구현&quot;&gt;&lt;a href=&quot;#Django-08-SMTP-회원가입-인증메일-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 08. SMTP 회원가입 인증메일 구현&quot;&gt;&lt;/a&gt;Djan
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-08-SMTP-회원가입-인증메일-구현"><a href="#Django-08-SMTP-회원가입-인증메일-구현" class="headerlink" title="Django 08. SMTP 회원가입 인증메일 구현"></a>Django 08. SMTP 회원가입 인증메일 구현</h1><blockquote><p>Naver의 SMTP서버와 Django send_mail, token을 사용하여 회원가입 인증메일을 구현합니다.</p></blockquote><hr><h2 id="1-네이버-SMTP-서버-설정"><a href="#1-네이버-SMTP-서버-설정" class="headerlink" title="1.  네이버 SMTP 서버 설정"></a>1.  네이버 SMTP 서버 설정</h2><p>메일 전송을 구현하기 위해 네이버 메일로 들어가 SMTP 서버를 설정합니다.</p><p>*Google 또한 SMTP 서버를 제공하지만 <u>Gmail 보안상의 이유로 렌더링하는 메일 html스타일에 href 경로가 존재하면 3~4분의 딜레이가 생기게 됩니다.</u> 이 프로젝트에서는 토큰값이 담긴 href를 메일로 보내 인증하는 방식이기에 딜레이가 발생하는 Google SMTP를 사용하지 않고 Naver SMTP를 사용합니다.</p><p>네이버 메일의 환경설정에서 <strong>POP3/IMAP</strong> 설정으로 들어가 <strong>IMAP/SMTP</strong> 사용설정을 <strong>사용함</strong>으로 변경합니다.</p><p><img src="08-1.JPG" alt="django-project-08"></p><p><strong>settings.py</strong>에 아래의 소스를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># cs_web&#x2F;settings.py</span><br><span class="line"></span><br><span class="line">EMAIL_BACKEND &#x3D; &#39;django.core.mail.backends.smtp.EmailBackend&#39;</span><br><span class="line">EMAIL_HOST &#x3D; &#39;smtp.naver.com&#39;</span><br><span class="line">EMAIL_HOST_USER &#x3D; &#39;&lt;네이버 ID&gt;&#39;</span><br><span class="line">EMAIL_HOST_PASSWORD &#x3D; get_secret(&quot;EMAIL_HOST_PASSWORD&quot;)</span><br><span class="line">EMAIL_USE_TLS &#x3D; True</span><br><span class="line">EMAIL_PORT &#x3D; 587</span><br><span class="line">DEFAULT_FROM_MAIL &#x3D; &#39;&lt;네이버 ID&gt;&#39;</span><br></pre></td></tr></table></figure><p>EMAIL_HOST_PASSWORD를 숨기기 위해 SECRET_KEY값이 담긴 <strong>secrets.json</strong>파일에 naver 계정 비밀번호를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># secrets.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;SECRET_KEY&quot;: &quot;&lt;SECRET_KEY 값&quot;&gt;,</span><br><span class="line">    &quot;EMAIL_HOST_PASSWORD&quot;: &quot;&lt;네이버 계정 비밀번호&gt;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-send-mail-구현"><a href="#2-send-mail-구현" class="headerlink" title="2.  send_mail 구현"></a>2.  send_mail 구현</h2><p>Host 연결을 마쳤으므로 이제 django의 mail 기능인 <strong>send_mail</strong>을 import 하고 <strong>threading</strong> 모듈을 사용해 메일 보내기 기능을 구현합니다. 부가적인 기능을 따로 관리하기 위해 <strong>users app</strong>에 <strong>hepler.py</strong>를 생성하고 아래의 소스를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;helper.py</span><br><span class="line"></span><br><span class="line">from django.core.mail import send_mail</span><br><span class="line">from django.core.mail import EmailMultiAlternatives</span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line">class EmailThread(threading.Thread):</span><br><span class="line">    def __init__(self, subject, body, from_email, recipient_list, fail_silently, html):</span><br><span class="line">        self.subject &#x3D; subject</span><br><span class="line">        self.body &#x3D; body</span><br><span class="line">        self.recipient_list &#x3D; recipient_list</span><br><span class="line">        self.from_email &#x3D; from_email</span><br><span class="line">        self.fail_silently &#x3D; fail_silently</span><br><span class="line">        self.html &#x3D; html</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    def run (self):</span><br><span class="line">        msg &#x3D; EmailMultiAlternatives(self.subject, self.body, self.from_email, self.recipient_list)</span><br><span class="line">        if self.html:</span><br><span class="line">            msg.attach_alternative(self.html, &quot;text&#x2F;html&quot;)</span><br><span class="line">        msg.send(self.fail_silently)</span><br><span class="line"></span><br><span class="line">def send_mail(subject, recipient_list, body&#x3D;&#39;&#39;, from_email&#x3D;&#39;&lt;네이버 메일계정&gt;&#39;, fail_silently&#x3D;False, html&#x3D;None, *args, **kwargs):</span><br><span class="line">    EmailThread(subject, body, from_email, recipient_list, fail_silently, html).start()</span><br></pre></td></tr></table></figure><p>threading 모듈을 사용해 동시에 여러 사용자에게 메일을 보낼 수 있도록 구현합니다. 또한 html 형식의 메일을 전송하기에 <strong>EmailMultiAlternatives</strong>를 import 하여 텍스트 뿐 아니라 다른 컨텐츠 유형을 포함시킬 수 있도록 합니다.</p><p><strong><a href="https://docs.djangoproject.com/en/3.0/topics/email/" target="_blank" rel="external nofollow noopener noreferrer">Django Send_Mail 공식문서</a></strong></p><h2 id="3-forms-py-수정"><a href="#3-forms-py-수정" class="headerlink" title="3. forms.py 수정"></a>3. forms.py 수정</h2><p>회원가입 후 메일 인증을 완료하지 못한 사용자는 로그인 할 수 없도록 앞서 구현한 <strong>forms.py</strong>에서 <strong>CsRegisterForm</strong>의 <strong>save</strong>함수에 <strong>is_active</strong>를 비활성화하는 소스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">def save(self, commit&#x3D;True):</span><br><span class="line">    user &#x3D; super(CsRegisterForm, self).save(commit&#x3D;False)</span><br><span class="line">    user.level &#x3D; &#39;2&#39;</span><br><span class="line">    user.department &#x3D; &#39;컴퓨터공학부&#39;</span><br><span class="line">    user.is_active &#x3D; False</span><br><span class="line">    user.save()</span><br></pre></td></tr></table></figure><h2 id="4-views-py-수정"><a href="#4-views-py-수정" class="headerlink" title="4. views.py 수정"></a>4. views.py 수정</h2><p>메일 전송 기능을 구현한 후 사용자에게 인증 토큰값을 담은 인증링크를 보내기 위해 <strong>CsRegisterView</strong>의 <strong>form_valid</strong> 부분에 아래의 <strong>send_mail</strong> 소스를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from django.urls import reverse</span><br><span class="line">from .helper import send_mail</span><br><span class="line">from django.template.loader import render_to_string</span><br><span class="line">from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode</span><br><span class="line">from django.utils.encoding import force_bytes, force_text</span><br><span class="line">from django.contrib.auth.tokens import default_token_generator</span><br><span class="line"></span><br><span class="line">def form_valid(self, form):</span><br><span class="line">    self.object &#x3D; form.save()</span><br><span class="line"></span><br><span class="line">    send_mail(</span><br><span class="line">        &#39;&#123;&#125;님의 회원가입 인증메일 입니다.&#39;.format(self.object.user_id),</span><br><span class="line">        [self.object.email],</span><br><span class="line">        html&#x3D;render_to_string(&#39;users&#x2F;register_email.html&#39;, &#123;</span><br><span class="line">            &#39;user&#39;: self.object,</span><br><span class="line">            &#39;uid&#39;: urlsafe_base64_encode(force_bytes(self.object.pk)).encode().decode(),</span><br><span class="line">            &#39;domain&#39;: self.request.META[&#39;HTTP_HOST&#39;],</span><br><span class="line">            &#39;token&#39;: default_token_generator.make_token(self.object),</span><br><span class="line">        &#125;),</span><br><span class="line">    )</span><br><span class="line">    return redirect(self.get_success_url())</span><br></pre></td></tr></table></figure><p><strong>default_token_generator</strong>로 생성된 token 값을 전송할 메일인 html 파일에 domain과 함께 값을 담아 메일 전송을 하게 됩니다.</p><p><em>(‘uid’ 부분에서 .decode(‘UTF-8’)로 디코딩을 할 시 오류가 발생하게 됩니다. pythono3에서 이미 디코딩을 해주기에 .encode().decode()로 구현합니다.)</em></p><p>토큰 값이 담긴 메일의 링크를 사용자가 클릭시 계정을 활성화하도록 아래와 같이 <strong>activate view</strong>를 구현합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">def activate(request, uid64, token):</span><br><span class="line">    try:</span><br><span class="line">        uid &#x3D; force_text(urlsafe_base64_decode(uid64))</span><br><span class="line">        current_user &#x3D; User.objects.get(pk&#x3D;uid)</span><br><span class="line">    except (TypeError, ValueError, OverflowError, User.DoesNotExist, ValidationError):</span><br><span class="line">        messages.error(request, &#39;메일 인증에 실패했습니다.&#39;)</span><br><span class="line">        return redirect(&#39;users:login&#39;)</span><br><span class="line"></span><br><span class="line">    if default_token_generator.check_token(current_user, token):</span><br><span class="line">        current_user.is_active &#x3D; True</span><br><span class="line">        current_user.save()</span><br><span class="line"></span><br><span class="line">        messages.info(request, &#39;메일 인증이 완료 되었습니다. 회원가입을 축하드립니다!&#39;)</span><br><span class="line">        return redirect(&#39;users:login&#39;)</span><br><span class="line"></span><br><span class="line">    messages.error(request, &#39;메일 인증에 실패했습니다.&#39;)</span><br><span class="line">    return redirect(&#39;users:login&#39;)</span><br></pre></td></tr></table></figure><p>회원가입 인증메일이 발송되었다는 메세지와 함께 간단한 안내 창으로 redirect시키기 위해 <strong>CsRegisterView</strong>의 <strong>get_success_url</strong>에 아래와 같은 소스로 수정합니다. 마찬가지로 세션을 생성하여 강제적인 url 이동을  방지합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">def get_success_url(self):</span><br><span class="line">    self.request.session[&#39;register_auth&#39;] &#x3D; True</span><br><span class="line">    messages.success(self.request, &#39;회원님의 입력한 Email 주소로 인증 메일이 발송되었습니다. 인증 후 로그인이 가능합니다.&#39;)</span><br><span class="line">    return reverse(&#39;users:register_success&#39;)</span><br></pre></td></tr></table></figure><p>마지막으로 위에서 구현한 register_auth의 세션값을 비교하여 인증메일 발송 안내창을 render 해주는 view를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">def register_success(request):</span><br><span class="line">    if not request.session.get(&#39;register_auth&#39;, False):</span><br><span class="line">        raise PermissionDenied</span><br><span class="line">    request.session[&#39;register_auth&#39;] &#x3D; False</span><br><span class="line"></span><br><span class="line">    return render(request, &#39;users&#x2F;register_success.html&#39;)</span><br></pre></td></tr></table></figure><h2 id="5-urls-py-작성"><a href="#5-urls-py-작성" class="headerlink" title="5. urls.py 작성"></a>5. urls.py 작성</h2><p>views에서 구현한 메일발송 안내, 발송된 메일의 인증링크를 연결하기 위해 <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 아래의 <strong>path</strong>를 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">path(&#39;registerauth&#x2F;&#39;, views.register_success, name&#x3D;&#39;register_success&#39;),</span><br><span class="line">path(&#39;activate&#x2F;&lt;str:uid64&gt;&#x2F;&lt;str:token&gt;&#x2F;&#39;, views.activate, name&#x3D;&#39;activate&#39;),</span><br></pre></td></tr></table></figure><h2 id="6-templates-작성"><a href="#6-templates-작성" class="headerlink" title="6. templates 작성"></a>6. templates 작성</h2><p>전송될 메일 html을 구현합니다. html형식으로 메일발송시 <u>head부분을 제외한 body부분안의 내용만 작성해야합니다. 또한 css를 적용해야 한다면 반드시 inline형식으로 구현해야 합니다.</u></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;register_email.html --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% autoescape off %&#125;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;&#123;&#123; domain &#125;&#125;&#123;% url &#39;users:activate&#39; uid64&#x3D;uid token&#x3D;token %&#125;&quot;&gt;인증하기&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;           </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">&#123;% endautoescape %&#125;</span><br></pre></td></tr></table></figure><p>전체 소스가 아닌 href 부분만 삽입하였습니다. 마찬가지로 메일 발송이 완료되었다는 페이지를 register_success.html을 생성하여 구현하면 됩니다.</p><h2 id="7-결과"><a href="#7-결과" class="headerlink" title="7. 결과"></a>7. 결과</h2><p><img src="08-2.JPG" alt="django-project-08"></p><p><img src="08-3.JPG" alt="django-project-08"></p><p>아직 login 페이지를 생성하지 않았기에 인증링크 클릭시 render 오류가 발생 할 수 있습니다. 하지만 admin페이지에서 생성한 계정의 is_activate가 False에서 True로 활성화된 것을 확인할 수 있습니다.</p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/26/django-project-08/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django 07. 회원가입 구현</title>
      <link>https://parkhyeonchae.github.io/2020/03/26/django-project-07/</link>
      <guid>https://parkhyeonchae.github.io/2020/03/26/django-project-07/</guid>
      <pubDate>Wed, 25 Mar 2020 19:27:13 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Django-07-회원가입-구현&quot;&gt;&lt;a href=&quot;#Django-07-회원가입-구현&quot; class=&quot;headerlink&quot; title=&quot;Django 07. 회원가입 구현&quot;&gt;&lt;/a&gt;Django 07. 회원가입 구현&lt;/h1&gt;&lt;blockquote
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Django-07-회원가입-구현"><a href="#Django-07-회원가입-구현" class="headerlink" title="Django 07. 회원가입 구현"></a>Django 07. 회원가입 구현</h1><blockquote><p>Django에서 제공하는 내장 Form을 사용하여 회원가입과 Validation을 구현합니다.</p></blockquote><hr><h2 id="1-forms-py-추가"><a href="#1-forms-py-추가" class="headerlink" title="1. forms.py 추가"></a>1. forms.py 추가</h2><p>Django는 <strong>form</strong>을 통해 커스텀되고 생성된 필드를 <strong>templates</strong>과 연결하여 사용할 수 있습니다. <strong>form</strong>에서 지정된 필드에 따라 <strong>validation</strong> 처리를 해주며, <strong>form</strong>으로 넘긴 입력 필드를 as_p() 등과 같은 기능을 사용함으로써 간결한 html 작성이 가능하다는 장점이 있습니다.</p><p>이 프로젝트는 기본적으로 회원가입이 컴퓨터공학부 전용, 일반인 전용 두가지로 나누어져 있습니다. 입력필드는 대부분 같고 필수, 선택사항 필드만 다르기에 일반인 회원가입은 포스팅에서 생략하도록 하겠습니다.</p><p><strong>users app</strong> 내에 <strong>forms.py</strong> 파일을 생성한 후 django의 내장 form인 <strong>UserCreationForm</strong>을 상속받는 <strong>CsRegisterForm</strong> 클래스를 생성하고 아래와 같이 코드를 입력합니다. 우선 아이디와 비밀번호 필드만 추가하겠습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;forms.py</span><br><span class="line"></span><br><span class="line">from django import forms</span><br><span class="line">from .models import User</span><br><span class="line">from django.contrib.auth.forms import UserCreationForm</span><br><span class="line"></span><br><span class="line">def hp_validator(value):</span><br><span class="line">    if len(str(value)) !&#x3D; 10:</span><br><span class="line">        raise forms.ValidationError(&#39;정확한 핸드폰 번호를 입력해주세요.&#39;)</span><br><span class="line"></span><br><span class="line">def student_id_validator(value):</span><br><span class="line">    if len(str(value)) !&#x3D; 8:</span><br><span class="line">        raise forms.ValidationError(&#39;본인의 학번 8자리를 입력해주세요.&#39;)</span><br><span class="line"></span><br><span class="line">class CsRegisterForm(UserCreationForm):</span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        super(CsRegisterForm, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        self.fields[&#39;user_id&#39;].label &#x3D; &#39;아이디&#39;</span><br><span class="line">        self.fields[&#39;user_id&#39;].widget.attrs.update(&#123;     </span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">            &#39;autofocus&#39;: False</span><br><span class="line">        &#125;)</span><br><span class="line">        self.fields[&#39;password1&#39;].label &#x3D; &#39;비밀번호&#39;</span><br><span class="line">        self.fields[&#39;password1&#39;].widget.attrs.update(&#123;</span><br><span class="line">            &#39;class&#39;: &#39;form-control&#39;,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; User</span><br><span class="line">        fields &#x3D; [&#39;user_id&#39;, &#39;password1&#39;, &#39;password2&#39;, &#39;email&#39;, &#39;name&#39;, &#39;hp&#39;, &#39;grade&#39;, &#39;student_id&#39;, &#39;circles&#39;]</span><br><span class="line"></span><br><span class="line">    def save(self, commit&#x3D;True):</span><br><span class="line">        user &#x3D; super(CsRegisterForm, self).save(commit&#x3D;False)</span><br><span class="line">        user.level &#x3D; &#39;2&#39;</span><br><span class="line">        user.department &#x3D; &#39;컴퓨터공학부&#39;</span><br><span class="line">        user.save()</span><br><span class="line"></span><br><span class="line">        return user</span><br></pre></td></tr></table></figure><p><strong>widget</strong> 커스텀, <strong>validations</strong>을 수정이 가능하도록 <strong>init </strong>메소드로 초기화 후 form을 작성합니다.</p><p><strong>save</strong> 함수를 보시면 컴퓨터공학부 회원가입을 통해 생성된 사용자는 <strong>level 2</strong>의 권한을 가지며, department 필드가 <strong>컴퓨터공학부</strong>로 저장됩니다.</p><p><strong><a href="https://docs.djangoproject.com/en/1.8/_modules/django/contrib/auth/forms/" target="_blank" rel="external nofollow noopener noreferrer">Django 내장폼 공식문서</a></strong></p><h2 id="2-views-py-작성"><a href="#2-views-py-작성" class="headerlink" title="2. views.py 작성"></a>2. views.py 작성</h2><p>django의 generic view인 <strong>CreateView</strong>를 import하여 회원가입 CBV를 구현하겠습니다. 아래의 소스를 기존의 <strong>views.py</strong>에 추가해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;views.py</span><br><span class="line"></span><br><span class="line">from django.core.exceptions import PermissionDenied</span><br><span class="line">from .forms import CsRegisterForm</span><br><span class="line">from django.views.generic import CreateView</span><br><span class="line"> </span><br><span class="line">class CsRegisterView(CreateView):</span><br><span class="line">    model &#x3D; User</span><br><span class="line">    template_name &#x3D; &#39;users&#x2F;register_cs.html&#39;</span><br><span class="line">    form_class &#x3D; CsRegisterForm</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        if not request.session.get(&#39;agreement&#39;, False):</span><br><span class="line">            raise PermissionDenied</span><br><span class="line">        request.session[&#39;agreement&#39;] &#x3D; False</span><br><span class="line">        return super().get(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def get_success_url(self):</span><br><span class="line">        messages.success(self.request, &quot;회원가입 성공.&quot;)</span><br><span class="line">        return redirect(&#39;users:login&#39;)</span><br><span class="line"></span><br><span class="line">    def form_valid(self, form):</span><br><span class="line">        self.object &#x3D; form.save()</span><br><span class="line">        return redirect(self.get_success_url())</span><br></pre></td></tr></table></figure><p>회원가입 창으로 redirect시 get함수를 통해 이전 포스팅에서 구현한 agreement 세션값을 검사하게 됩니다. 만약 사용자가 약관에 동의를 안했을시 403 에러가 발생하도록 <strong>PermissionDenied</strong>처리를 해줍니다.</p><p>POST시 form에서 validations 검증이 성공했다면 get_success_url()로 넘어가 Success 메세지와 함께 login 경로로 redirect 되도록 구현합니다.</p><p><strong><a href="https://docs.djangoproject.com/en/3.0/ref/class-based-views/" target="_blank" rel="external nofollow noopener noreferrer">Django 내장 CBV API 공식문서</a></strong></p><h2 id="3-urls-py-작성"><a href="#3-urls-py-작성" class="headerlink" title="3. urls.py 작성"></a>3. urls.py 작성</h2><p>기존 <strong>urls.py</strong>의 <strong>urlpatterns</strong>에 회원가입 url을 추가해줍니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># users&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;agreement&#x2F;&#39;, views.AgreementView.as_view(), name&#x3D;&#39;agreement&#39;),</span><br><span class="line">    path(&#39;csregister&#x2F;&#39;, views.CsRegisterView.as_view(), name&#x3D;&#39;csregister&#39;), # 추가</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-templates-작성"><a href="#4-templates-작성" class="headerlink" title="4.  templates 작성"></a>4.  templates 작성</h2><p><strong>templates</strong>의 <strong>users</strong> 내에 <strong>register_cs.html</strong>을 생성하고 아래의 소스를 입력합니다. (전체 코드는 생략하고 form 태그의 아이디 입력필드만 포스팅하겠습니다.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- templates&#x2F;users&#x2F;register_cs.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;&quot; id&#x3D;&quot;signup&quot; method&#x3D;&quot;POST&quot; novalidate&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;label name&#x3D;&quot;label_user_id&quot; for&#x3D;&quot;&#123;&#123; form.user_id.id_for_label &#125;&#125;&quot;&gt;</span><br><span class="line">            &#123;&#123; form.user_id.label &#125;&#125;</span><br><span class="line">    &lt;&#x2F;label&gt;</span><br><span class="line">    &#123;&#123; form.user_id &#125;&#125;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            if (document.getElementsByName(&#39;user_id&#39;)[0].value !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">            document.getElementsByName(&#39;label_user_id&#39;)[0].setAttribute(&#39;class&#39;,&#39;active&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">    &#123;% if form.user_id.errors %&#125;</span><br><span class="line">        &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">            document.getElementsByName(&#39;user_id&#39;)[0].setAttribute(&#39;class&#39;, &#39;form-control is-invalid&#39;)</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">        &#123;% for error in form.user_id.errors %&#125;</span><br><span class="line">        &lt;div class&#x3D;&quot;invalid-feedback&quot;&gt;</span><br><span class="line">            &#123;&#123; error &#125;&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">        </span><br><span class="line">    &lt;small&gt;</span><br><span class="line">            로그인 시 사용할 아이디를 입력해주세요.</span><br><span class="line">    &lt;&#x2F;small&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>form의 입력필드는 html에서 <strong>{ { form.user_id } }</strong> 같은 형식으로 사용될 수 있습니다.</p><p><em>중간 중간 삽입되어 있는 script는 회원가입 에러 처리를 위한 script로 부트스트랩 플러그인 유료버전에 제공되어 있는 기능을 보고 javascript로 구현한 것입니다.</em></p><h2 id="5-결과"><a href="#5-결과" class="headerlink" title="5. 결과"></a>5. 결과</h2><p><img src="07-1.JPG" alt="django-project-07"></p><p><img src="07-2.JPG" alt="django-project-07"></p><p><em>*전체 html, css 등은 자세하게 포스팅하지 않습니다. 제 <a href="https://github.com/ParkHyeonChae/Re-Born-Web" target="_blank" rel="external nofollow noopener noreferrer">Github</a>에서 소스를 확인하실 수 있습니다.</em></p><hr>]]></content:encoded>
      
      <comments>https://parkhyeonchae.github.io/2020/03/26/django-project-07/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
